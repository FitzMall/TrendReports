@model TrendReports.Models.SummaryModel

@{
    ViewBag.Title = "Overall Trend Analysis";

    var applicationPath = Request.ApplicationPath;

    if (applicationPath == "/")
    {
        applicationPath = "";
    }

}

@section CSS{
    <style type="text/css">

        .table-bordered > tbody > tr > td.divider-column{
            border-right: 3px double #dddddd;
        }
        .form-control{
            margin-top:6px;
        }
        @@media print
        {

            body {font-size:11px;padding-top:10px;}

            .form-control {font-size:12px;}

            .print-hide{ display:none;}
                a[href]:after {
                    content: "";
            }   

            .table tbody tr td
            {
                padding:4px;
            }
            .btn-primary{
                display:none;
            }

            .dt-buttons {
                display:none;
            }

            hr {display:none;}
            @@page {size: landscape;}
        }
    </style> 
}
@using (Html.BeginForm())
{
<div class="jumbotron">

    <div class="row">
        <div class="col-sm-3">
            Select a Month
        </div>
        <div class="col-sm-2">
            @Html.DropDownListFor(n => n.MonthId, new SelectList(TrendReports.Business.Enums.Months, "MonthId", "Name"), new { @class = "form-control form-inline" })
        </div>
        <div class="col-sm-2">
            @Html.DropDownListFor(n => n.YearId, new SelectList(TrendReports.Business.Enums.Years, "YearId", "Name"), new { @class = "form-control form-inline" })
        </div>
        <div class="col-sm-2">
            <button class="btn btn-primary" type="submit" value="submit" name="Submit">Submit</button>
        </div>
    </div>

</div>
    if (Model.ServiceSummary != null)
    {

        <div class="row">
            <div class="col-md-12">
                <h2>Service</h2>
                <hr />
                <table class="table table-condensed table-bordered" id="service-summary">
                    <thead>
                        <tr style="background-color:#d9edf7">
                            <th class="text-center"></th>
                            <th class="text-center" colspan="4">Daily</th>
                            <th class="text-center" colspan="4">Monthly</th>
                            <th class="text-center" colspan="4">Yearly</th>
                        </tr>
                        <tr style="background-color:#d9edf7">
                            <th class="text-center divider-column">Service Items</th>
                            
                            <th class="text-center">@Model.ServiceSummary.PreviousDate.StartDate.ToShortDateString()</th>
                            <th class="text-center">@Model.ServiceSummary.CurrentDate.StartDate.ToShortDateString()</th>
                            <th class="text-center">Difference</th>
                            <th class="text-center divider-column">% Change</th>
                            
                            <th class="text-center">@Model.ServiceSummary.PreviousMonthToDate.StartDate.ToShortDateString() -<br /> @Model.ServiceSummary.PreviousMonthToDate.EndDate.ToShortDateString()</th>
                            <th class="text-center">@Model.ServiceSummary.CurrentMonthToDate.StartDate.ToShortDateString() -<br /> @Model.ServiceSummary.CurrentMonthToDate.EndDate.ToShortDateString()</th>
                            <th class="text-center">Difference</th>
                            <th class="text-center divider-column">% Change</th>

                            <th class="text-center">@Model.ServiceSummary.PreviousYearToDate.StartDate.ToShortDateString() -<br /> @Model.ServiceSummary.PreviousYearToDate.EndDate.ToShortDateString()</th>
                            <th class="text-center">@Model.ServiceSummary.CurrentYearToDate.StartDate.ToShortDateString() -<br /> @Model.ServiceSummary.CurrentYearToDate.EndDate.ToShortDateString()</th>
                            <th class="text-center">Difference</th>
                            <th class="text-center divider-column">% Change</th>

                            @*<th class="text-center">Previous Year<br />Week To Date</th>
                            <th class="text-center">Week To Date</th>
                            <th class="text-center">Difference</th>
                            <th class="text-center divider-column">% Change</th>*@



                        </tr>
                    </thead>
                    <tbody>
                        @{ 

                            decimal yearDifferenceCustomerAmount = 0;
                            decimal monthDifferenceCustomerAmount = 0;
                            decimal weekDifferenceCustomerAmount = 0;
                            decimal dayDifferenceCustomerAmount = 0;

                            decimal yearPercentageCustomerAmount = 0;
                            decimal monthPercentageCustomerAmount = 0;
                            decimal weekPercentageCustomerAmount = 0;
                            decimal dayPercentageCustomerAmount = 0;

                            decimal yearDifferenceWarrantyAmount = 0;
                            decimal monthDifferenceWarrantyAmount = 0;
                            decimal weekDifferenceWarrantyAmount = 0;
                            decimal dayDifferenceWarrantyAmount = 0;

                            decimal yearPercentageWarrantyAmount = 0;
                            decimal monthPercentageWarrantyAmount = 0;
                            decimal weekPercentageWarrantyAmount = 0;
                            decimal dayPercentageWarrantyAmount = 0;

                            decimal yearDifferenceCustomerLaborAmount = 0;
                            decimal monthDifferenceCustomerLaborAmount = 0;
                            decimal weekDifferenceCustomerLaborAmount = 0;
                            decimal dayDifferenceCustomerLaborAmount = 0;

                            decimal yearPercentageCustomerLaborAmount = 0;
                            decimal monthPercentageCustomerLaborAmount = 0;
                            decimal weekPercentageCustomerLaborAmount = 0;
                            decimal dayPercentageCustomerLaborAmount = 0;

                            decimal yearDifferenceWarrantyLaborAmount = 0;
                            decimal monthDifferenceWarrantyLaborAmount = 0;
                            decimal weekDifferenceWarrantyLaborAmount = 0;
                            decimal dayDifferenceWarrantyLaborAmount = 0;

                            decimal yearPercentageWarrantyLaborAmount = 0;
                            decimal monthPercentageWarrantyLaborAmount = 0;
                            decimal weekPercentageWarrantyLaborAmount = 0;
                            decimal dayPercentageWarrantyLaborAmount = 0;

                            decimal yearDifferenceInternalLaborAmount = 0;
                            decimal monthDifferenceInternalLaborAmount = 0;
                            decimal weekDifferenceInternalLaborAmount = 0;
                            decimal dayDifferenceInternalLaborAmount = 0;

                            decimal yearPercentageInternalLaborAmount = 0;
                            decimal monthPercentageInternalLaborAmount = 0;
                            decimal weekPercentageInternalLaborAmount = 0;
                            decimal dayPercentageInternalLaborAmount = 0;

                            decimal yearDifferenceTotalLaborAmount = 0;
                            decimal monthDifferenceTotalLaborAmount = 0;
                            decimal weekDifferenceTotalLaborAmount = 0;
                            decimal dayDifferenceTotalLaborAmount = 0;

                            decimal yearPercentageTotalLaborAmount = 0;
                            decimal monthPercentageTotalLaborAmount = 0;
                            decimal weekPercentageTotalLaborAmount = 0;
                            decimal dayPercentageTotalLaborAmount = 0;


                            decimal yearDifferenceRepairOrderCount = Model.ServiceSummary.CurrentYearToDate.RepairOrderCount - Model.ServiceSummary.PreviousYearToDate.RepairOrderCount;
                            decimal monthDifferenceRepairOrderCount = Model.ServiceSummary.CurrentMonthToDate.RepairOrderCount - Model.ServiceSummary.PreviousMonthToDate.RepairOrderCount;
                            //decimal weekDifferenceRepairOrderCount = Model.ServiceSummary.CurrentWeekToDate.RepairOrderCount - Model.ServiceSummary.PreviousWeekToDate.RepairOrderCount;

                            decimal dayDifferenceRepairOrderCount = Model.ServiceSummary.CurrentDate.RepairOrderCount - Model.ServiceSummary.PreviousDate.RepairOrderCount;


                            decimal yearPercentageRepairOrderCount = yearDifferenceRepairOrderCount / Model.ServiceSummary.PreviousYearToDate.RepairOrderCount;

                            decimal monthPercentageRepairOrderCount = 0;
                            if (Model.ServiceSummary.PreviousMonthToDate.RepairOrderCount > 0)
                            {
                                monthPercentageRepairOrderCount = monthDifferenceRepairOrderCount / Model.ServiceSummary.PreviousMonthToDate.RepairOrderCount;
                            }
                            //decimal weekPercentageRepairOrderCount = weekDifferenceRepairOrderCount / Model.ServiceSummary.PreviousWeekToDate.RepairOrderCount;
                            decimal dayPercentageRepairOrderCount = 0;
                            if (Model.ServiceSummary.PreviousDate.RepairOrderCount > 0)
                            {
                                dayPercentageRepairOrderCount = dayDifferenceRepairOrderCount / Model.ServiceSummary.PreviousDate.RepairOrderCount;
                            }

                            //yearDifferenceCustomerAmount = Model.ServiceSummary.CurrentYearToDate.CustomerAmount - Model.ServiceSummary.PreviousYearToDate.CustomerAmount;
                            //monthDifferenceCustomerAmount = Model.ServiceSummary.CurrentMonthToDate.CustomerAmount - Model.ServiceSummary.PreviousMonthToDate.CustomerAmount;
                            //weekDifferenceCustomerAmount = Model.ServiceSummary.CurrentWeekToDate.CustomerAmount - Model.ServiceSummary.PreviousWeekToDate.CustomerAmount;
                            //dayDifferenceCustomerAmount = Model.ServiceSummary.CurrentDate.CustomerAmount - Model.ServiceSummary.PreviousDate.CustomerAmount;

                            //yearPercentageCustomerAmount = yearDifferenceCustomerAmount / Model.ServiceSummary.PreviousYearToDate.CustomerAmount;

                            //if (Model.ServiceSummary.PreviousMonthToDate.CustomerAmount > 0)
                            //{
                            //    monthPercentageCustomerAmount = monthDifferenceCustomerAmount / Model.ServiceSummary.PreviousMonthToDate.CustomerAmount;
                            //}
                            //weekPercentageCustomerAmount = weekDifferenceCustomerAmount / Model.ServiceSummary.PreviousWeekToDate.CustomerAmount;
                            //if (Model.ServiceSummary.PreviousDate.CustomerAmount > 0)
                            //{
                            //    dayPercentageCustomerAmount = dayDifferenceCustomerAmount / Model.ServiceSummary.PreviousDate.CustomerAmount;
                            //}

                            //yearDifferenceWarrantyAmount = Model.ServiceSummary.CurrentYearToDate.WarrantyAmount - Model.ServiceSummary.PreviousYearToDate.WarrantyAmount;
                            //monthDifferenceWarrantyAmount = Model.ServiceSummary.CurrentMonthToDate.WarrantyAmount - Model.ServiceSummary.PreviousMonthToDate.WarrantyAmount;
                            ////weekDifferenceWarrantyAmount = Model.ServiceSummary.CurrentWeekToDate.WarrantyAmount - Model.ServiceSummary.PreviousWeekToDate.WarrantyAmount;
                            //dayDifferenceWarrantyAmount = Model.ServiceSummary.CurrentDate.WarrantyAmount - Model.ServiceSummary.PreviousDate.WarrantyAmount;

                            //yearPercentageWarrantyAmount = yearDifferenceWarrantyAmount / Model.ServiceSummary.PreviousYearToDate.WarrantyAmount;

                            //if (Model.ServiceSummary.PreviousMonthToDate.WarrantyAmount > 0)
                            //{
                            //    monthPercentageWarrantyAmount = monthDifferenceWarrantyAmount / Model.ServiceSummary.PreviousMonthToDate.WarrantyAmount;
                            //}

                            ////weekPercentageWarrantyAmount = weekDifferenceWarrantyAmount / Model.ServiceSummary.PreviousWeekToDate.WarrantyAmount;
                            //if (Model.ServiceSummary.PreviousDate.WarrantyAmount > 0)
                            //{
                            //    dayPercentageWarrantyAmount = dayDifferenceWarrantyAmount / Model.ServiceSummary.PreviousDate.WarrantyAmount;
                            //}

                            yearDifferenceCustomerLaborAmount = Model.ServiceSummary.CurrentYearToDate.CustomerLaborAmount - Model.ServiceSummary.PreviousYearToDate.CustomerLaborAmount;
                            monthDifferenceCustomerLaborAmount = Model.ServiceSummary.CurrentMonthToDate.CustomerLaborAmount - Model.ServiceSummary.PreviousMonthToDate.CustomerLaborAmount;
                            //weekDifferenceCustomerLaborAmount = Model.ServiceSummary.CurrentWeekToDate.CustomerLaborAmount - Model.ServiceSummary.PreviousWeekToDate.CustomerLaborAmount;
                            dayDifferenceCustomerLaborAmount = Model.ServiceSummary.CurrentDate.CustomerLaborAmount - Model.ServiceSummary.PreviousDate.CustomerLaborAmount;

                            yearPercentageCustomerLaborAmount = yearDifferenceCustomerLaborAmount / Model.ServiceSummary.PreviousYearToDate.CustomerLaborAmount;
                            if (Model.ServiceSummary.PreviousMonthToDate.CustomerLaborAmount > 0)
                            {
                                monthPercentageCustomerLaborAmount = monthDifferenceCustomerLaborAmount / Model.ServiceSummary.PreviousMonthToDate.CustomerLaborAmount;
                            }
                            //weekPercentageCustomerLaborAmount = weekDifferenceCustomerLaborAmount / Model.ServiceSummary.PreviousWeekToDate.CustomerLaborAmount;
                            if (Model.ServiceSummary.PreviousDate.CustomerLaborAmount > 0)
                            {
                                dayPercentageCustomerLaborAmount = dayDifferenceCustomerLaborAmount / Model.ServiceSummary.PreviousDate.CustomerLaborAmount;
                            }

                            yearDifferenceWarrantyLaborAmount = Model.ServiceSummary.CurrentYearToDate.WarrantyLaborAmount - Model.ServiceSummary.PreviousYearToDate.WarrantyLaborAmount;
                            monthDifferenceWarrantyLaborAmount = Model.ServiceSummary.CurrentMonthToDate.WarrantyLaborAmount - Model.ServiceSummary.PreviousMonthToDate.WarrantyLaborAmount;
                            dayDifferenceWarrantyLaborAmount = Model.ServiceSummary.CurrentDate.WarrantyLaborAmount - Model.ServiceSummary.PreviousDate.WarrantyLaborAmount;

                            yearPercentageWarrantyLaborAmount = yearDifferenceWarrantyLaborAmount / Model.ServiceSummary.PreviousYearToDate.WarrantyLaborAmount;
                            if (Model.ServiceSummary.PreviousMonthToDate.WarrantyLaborAmount > 0)
                            {
                                monthPercentageWarrantyLaborAmount = monthDifferenceWarrantyLaborAmount / Model.ServiceSummary.PreviousMonthToDate.WarrantyLaborAmount;
                            }

                            if (Model.ServiceSummary.PreviousDate.WarrantyLaborAmount > 0)
                            {
                                dayPercentageWarrantyLaborAmount = dayDifferenceWarrantyLaborAmount / Model.ServiceSummary.PreviousDate.WarrantyLaborAmount;
                            }

                            yearDifferenceInternalLaborAmount = Model.ServiceSummary.CurrentYearToDate.InternalLaborAmount - Model.ServiceSummary.PreviousYearToDate.InternalLaborAmount;
                            monthDifferenceInternalLaborAmount = Model.ServiceSummary.CurrentMonthToDate.InternalLaborAmount - Model.ServiceSummary.PreviousMonthToDate.InternalLaborAmount;
                            dayDifferenceInternalLaborAmount = Model.ServiceSummary.CurrentDate.InternalLaborAmount - Model.ServiceSummary.PreviousDate.InternalLaborAmount;

                            if (Model.ServiceSummary.PreviousYearToDate.InternalLaborAmount > 0)
                            {
                                yearPercentageInternalLaborAmount = yearDifferenceInternalLaborAmount / Model.ServiceSummary.PreviousYearToDate.InternalLaborAmount;
                            }

                            if (Model.ServiceSummary.PreviousMonthToDate.InternalLaborAmount > 0)
                            {
                                monthPercentageInternalLaborAmount = monthDifferenceInternalLaborAmount / Model.ServiceSummary.PreviousMonthToDate.InternalLaborAmount;
                            }

                            if (Model.ServiceSummary.PreviousDate.InternalLaborAmount > 0)
                            {
                                dayPercentageInternalLaborAmount = dayDifferenceInternalLaborAmount / Model.ServiceSummary.PreviousDate.InternalLaborAmount;
                            }

                            yearDifferenceTotalLaborAmount = Model.ServiceSummary.CurrentYearToDate.TotalLaborAmount - Model.ServiceSummary.PreviousYearToDate.TotalLaborAmount;
                            monthDifferenceTotalLaborAmount = Model.ServiceSummary.CurrentMonthToDate.TotalLaborAmount - Model.ServiceSummary.PreviousMonthToDate.TotalLaborAmount;
                            dayDifferenceTotalLaborAmount = Model.ServiceSummary.CurrentDate.TotalLaborAmount - Model.ServiceSummary.PreviousDate.TotalLaborAmount;

                            if (Model.ServiceSummary.PreviousYearToDate.TotalLaborAmount > 0)
                            {
                                yearPercentageTotalLaborAmount = yearDifferenceTotalLaborAmount / Model.ServiceSummary.PreviousYearToDate.TotalLaborAmount;
                            }

                            if (Model.ServiceSummary.PreviousMonthToDate.TotalLaborAmount > 0)
                            {
                                monthPercentageTotalLaborAmount = monthDifferenceTotalLaborAmount / Model.ServiceSummary.PreviousMonthToDate.TotalLaborAmount;
                            }

                            if (Model.ServiceSummary.PreviousDate.TotalLaborAmount > 0)
                            {
                                dayPercentageTotalLaborAmount = dayDifferenceTotalLaborAmount / Model.ServiceSummary.PreviousDate.TotalLaborAmount;
                            }


                        }
                        <tr style="background-color:#e2e2e2">
                            <td class="text-right divider-column"><strong><a data-toggle="collapse" id="deal-location" style="cursor: pointer;" data-target="#collapse-ro-location"><strong>Repair Order Count <i class="fa fa-caret-down" aria-hidden="true"></i></strong></a></strong></td>

                            <td class="text-right">@Model.ServiceSummary.PreviousDate.RepairOrderCount</td>
                            <td class="text-right">@Model.ServiceSummary.CurrentDate.RepairOrderCount</td>
                            <td class="text-right">@dayDifferenceRepairOrderCount</td>
                            <td class="text-center divider-column">@dayPercentageRepairOrderCount.ToString("P")</td>

                            <td class="text-right">@Model.ServiceSummary.PreviousMonthToDate.RepairOrderCount</td>
                            <td class="text-right">@Model.ServiceSummary.CurrentMonthToDate.RepairOrderCount</td>
                            <td class="text-right">@monthDifferenceRepairOrderCount</td>
                            <td class="text-center divider-column">@monthPercentageRepairOrderCount.ToString("P")</td>

                            <td class="text-right">@Model.ServiceSummary.PreviousYearToDate.RepairOrderCount</td>
                            <td class="text-right">@Model.ServiceSummary.CurrentYearToDate.RepairOrderCount</td>
                            <td class="text-right">@yearDifferenceRepairOrderCount</td>
                            <td class="text-center divider-column">@yearPercentageRepairOrderCount.ToString("P")</td>


                        </tr>
                        <tr id="collapse-ro-location" class="collapse out" style="background-color:#e2e2e2">
                            @{

                                var locations = Model.ServiceSummary.CurrentYearToDate.ServiceData.OrderBy(x => x.Location).Select(x => x.Location).Distinct().ToList();

                            }

                            <td colspan="13">
                                <table class="table table-bordered">
                                    <thead>
                                        <tr>
                                            <th class="text-center divider-column" style="width:330px">Locations</th>
                                            <th class="text-center">@Model.ServiceSummary.PreviousDate.StartDate.ToShortDateString()</th>
                                            <th class="text-center">@Model.ServiceSummary.CurrentDate.StartDate.ToShortDateString()</th>
                                            <th class="text-center">Difference</th>
                                            <th class="text-center divider-column">% Change</th>

                                            <th class="text-center">@Model.ServiceSummary.PreviousMonthToDate.StartDate.ToShortDateString() -<br /> @Model.ServiceSummary.PreviousMonthToDate.EndDate.ToShortDateString()</th>
                                            <th class="text-center">@Model.ServiceSummary.CurrentMonthToDate.StartDate.ToShortDateString() -<br /> @Model.ServiceSummary.CurrentMonthToDate.EndDate.ToShortDateString()</th>
                                            <th class="text-center">Difference</th>
                                            <th class="text-center divider-column">% Change</th>

                                            <th class="text-center">@Model.ServiceSummary.PreviousYearToDate.StartDate.ToShortDateString() -<br /> @Model.ServiceSummary.PreviousYearToDate.EndDate.ToShortDateString()</th>
                                            <th class="text-center">@Model.ServiceSummary.CurrentYearToDate.StartDate.ToShortDateString() -<br /> @Model.ServiceSummary.CurrentYearToDate.EndDate.ToShortDateString()</th>
                                            <th class="text-center">Difference</th>
                                            <th class="text-center divider-column">% Change</th>

                                        </tr>
                                    </thead>
                                    <tbody>
                                        @{
                                            
                                                        var previousDateSales =
                                                                    from sales in Model.ServiceSummary.PreviousDate.ServiceData
                                                                    group sales by sales.Location into locationGroup
                                                                    select new
                                                                    {
                                                                        Location = locationGroup.Key,
                                                                        Deals = locationGroup.Sum(x => x.RepairOrderCount),
                                                                    };

                                            // multiple filters
                                            //var prevDateBrandService =
                                            //from makeservice in Model.ServiceSummary.PreviousDate.ServiceData
                                            //group makeservice by new { makeservice.Location, makeservice.Prefix } into locationMakeGroup
                                            //select new
                                            //{
                                            //    LocationMake = locationMakeGroup.Key,
                                            //    Deals = locationMakeGroup.Sum(x => x.RepairOrderCount),
                                            //};


                                            ///////////////////////////////////////////////


                                            var currentDateSales =
                                                                    from sales in Model.ServiceSummary.CurrentDate.ServiceData
                                                                    group sales by sales.Location into locationGroup
                                                                    select new
                                                                    {
                                                                        Location = locationGroup.Key,
                                                                        Deals = locationGroup.Sum(x => x.RepairOrderCount),
                                                                    };


                                            ///////////////////////////////////////////////

                                            var previousMonthlySales =
                                            from sales in Model.ServiceSummary.PreviousMonthToDate.ServiceData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.RepairOrderCount),
                                            };


                                            ///////////////////////////////////////////////

                                            var currentMonthlySales =
                                            from sales in Model.ServiceSummary.CurrentMonthToDate.ServiceData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.RepairOrderCount),
                                            };


                                            ///////////////////////////////////////////////

                                            var previousYearlySales =
                                            from sales in Model.ServiceSummary.PreviousYearToDate.ServiceData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.RepairOrderCount),
                                            };

                                            ///////////////////////////////////////////////

                                            var currentYearlySales =
                                            from sales in Model.ServiceSummary.CurrentYearToDate.ServiceData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.RepairOrderCount),
                                            };



                                                    }

                                                    @foreach (var location in locations)
                                        {

                                                        decimal prevDateSales = 0;
                                                        decimal currDateSales = 0;
                                                        decimal prevMonthSales = 0;
                                                        decimal currMonthSales = 0;
                                                        decimal prevYearSales = 0;
                                                        decimal currYearSales = 0;

                                                        try
                                                        {
                                                            prevDateSales = previousDateSales.ToList().Find(x => x.Location == location).Deals;
                                                        }
                                                        catch
                                                        {
                                                            prevDateSales = 0;
                                                        }

                                                        try
                                                        {
                                                            currDateSales = currentDateSales.ToList().Find(x => x.Location == location).Deals;
                                                        }
                                                        catch
                                                        {
                                                            currDateSales = 0;
                                                        }

                                                        try
                                                        {
                                                            prevMonthSales = previousMonthlySales.ToList().Find(x => x.Location == location).Deals;
                                                        }
                                                        catch
                                                        {
                                                            prevMonthSales = 0;
                                                        }

                                                        try
                                                        {
                                                            currMonthSales = currentMonthlySales.ToList().Find(x => x.Location == location).Deals;
                                                        }
                                                        catch
                                                        {
                                                            currMonthSales = 0;
                                                        }

                                                        try
                                                        {
                                                            prevYearSales = previousYearlySales.ToList().Find(x => x.Location == location).Deals;
                                                        }
                                                        catch
                                                        {
                                                            prevYearSales = 0;
                                                        }

                                                        try
                                                        {
                                                            currYearSales = currentYearlySales.ToList().Find(x => x.Location == location).Deals;
                                                        }
                                                        catch
                                                        {
                                                            currYearSales = 0;
                                                        }


                                                        var dateDifference = currDateSales - prevDateSales;
                                                        decimal datePercentChange = 0;
                                                        if (prevDateSales > 0)
                                                        {
                                                            datePercentChange = dateDifference / prevDateSales;
                                                        }

                                                        var monthDifference = currMonthSales - prevMonthSales;
                                                        decimal monthPercentChange = 0;
                                                        if (prevMonthSales > 0)
                                                        {
                                                            monthPercentChange = monthDifference / prevMonthSales;
                                                        }

                                                        var yearDifference = currYearSales - prevYearSales;
                                                        decimal yearPercentChange = 0;
                                                        if (prevYearSales > 0)
                                                        {
                                                            yearPercentChange = yearDifference / prevYearSales;
                                                        }

                                                        var displayLocation = location;
                                                        switch (location)
                                                        {
                                                            case "FOC":
                                                                displayLocation = "Annapolis Cadillac/Volkswagen";
                                                                break;
                                                            case "FMM":
                                                                displayLocation = "Annapolis Mazda/Mitsubishi";
                                                                break;
                                                            case "FTN":
                                                                displayLocation = "Chambersburg";
                                                                break;
                                                            case "CJE":
                                                                displayLocation = "Clearwater Chrysler/Jeep";
                                                                break;
                                                            case "CHY":
                                                                displayLocation = "Clearwater Hyundai/Subaru";
                                                                break;
                                                            case "CDO":
                                                                displayLocation = "Rockville Hyundai";
                                                                break;
                                                            case "FAM":
                                                                displayLocation = "Frederick";
                                                                break;
                                                            case "LFM":
                                                                displayLocation = "Germantown";
                                                                break;
                                                            case "FHT":
                                                                displayLocation = "Hagerstown Chrysler";
                                                                break;
                                                            case "FHG":
                                                                displayLocation = "Hagerstown GM";
                                                                break;
                                                            case "LFT":
                                                                displayLocation = "Gaitherburg Toyota";
                                                                break;
                                                            case "LFO":
                                                                displayLocation = "Gaithersburg Hyundai/Subaru";
                                                                break;
                                                            case "FLP":
                                                                displayLocation = "Lexington Park";
                                                                break;
                                                            case "FBN":
                                                                displayLocation = "Rockville Buick/GMC";
                                                                break;
                                                            case "FBS":
                                                                displayLocation = "Rockville Subaru";
                                                                break;
                                                            case "WDC":
                                                                displayLocation = "Wheaton";
                                                                break;
                                                        }




                                            <tr>
                                                <td class="text-right divider-column" style="width:330px">@displayLocation</td>
                                                <td class="text-right">@prevDateSales</td>
                                                <td class="text-right">@currDateSales</td>
                                                <td class="text-right">@dateDifference</td>
                                                <td class="text-right divider-column">@datePercentChange.ToString("P")</td>
                                                <td class="text-right">@prevMonthSales</td>
                                                <td class="text-right">@currMonthSales</td>
                                                <td class="text-right">@monthDifference</td>
                                                <td class="text-right divider-column">@monthPercentChange.ToString("P")</td>
                                                <td class="text-right">@prevYearSales</td>
                                                <td class="text-right">@currYearSales</td>
                                                <td class="text-right">@yearDifference</td>
                                                <td class="text-right divider-column">@yearPercentChange.ToString("P")</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>

                            </td>

                        </tr>
                        @*<tr>
                            <td class="text-right divider-column"><strong><a data-toggle="collapse" id="deal-location" style="cursor: pointer;" data-target="#collapse-Customer-location"><strong>Customer Amount <i class="fa fa-caret-down" aria-hidden="true"></i></strong></a></strong></td>


                            <td class="text-right">@Model.ServiceSummary.PreviousDate.CustomerAmount.ToString("C")</td>
                            <td class="text-right">@Model.ServiceSummary.CurrentDate.CustomerAmount.ToString("C")</td>
                            <td class="text-right">@dayDifferenceCustomerAmount.ToString("C")</td>
                            <td class="text-center divider-column">@dayPercentageCustomerAmount.ToString("P")</td>

                            <td class="text-right">@Model.ServiceSummary.PreviousMonthToDate.CustomerAmount.ToString("C")</td>
                            <td class="text-right">@Model.ServiceSummary.CurrentMonthToDate.CustomerAmount.ToString("C")</td>
                            <td class="text-right">@monthDifferenceCustomerAmount.ToString("C")</td>
                            <td class="text-center divider-column">@monthPercentageCustomerAmount.ToString("P")</td>

                            <td class="text-right">@Model.ServiceSummary.PreviousYearToDate.CustomerAmount.ToString("C")</td>
                            <td class="text-right">@Model.ServiceSummary.CurrentYearToDate.CustomerAmount.ToString("C")</td>
                            <td class="text-right">@yearDifferenceCustomerAmount.ToString("C")</td>
                            <td class="text-center divider-column">@yearPercentageCustomerAmount.ToString("P")</td>

                        </tr>
                        <tr id="collapse-Customer-location" class="collapse out" style="background-color:#e2e2e2">
                            @{

                                var Custlocations = Model.ServiceSummary.CurrentYearToDate.ServiceData.OrderBy(x => x.Location).Select(x => x.Location).Distinct().ToList();

                            }

                            <td colspan="13">
                                <table class="table table-bordered">
                                    <thead>
                                        <tr>
                                            <th class="text-center divider-column" style="width:330px">Locations</th>
                                            <th class="text-center">@DateTime.Now.AddYears(-1).AddDays(-1).ToShortDateString()</th>
                                            <th class="text-center">@DateTime.Now.AddDays(-1).ToShortDateString()</th>
                                            <th class="text-center">Difference</th>
                                            <th class="text-center divider-column">% Change</th>

                                            <th class="text-center">@Model.ServiceSummary.PreviousMonthToDate.StartDate.ToShortDateString() -<br /> @Model.ServiceSummary.PreviousMonthToDate.EndDate.ToShortDateString()</th>
                                            <th class="text-center">@Model.ServiceSummary.CurrentMonthToDate.StartDate.ToShortDateString() -<br /> @Model.ServiceSummary.CurrentMonthToDate.EndDate.ToShortDateString()</th>
                                            <th class="text-center">Difference</th>
                                            <th class="text-center divider-column">% Change</th>

                                            <th class="text-center">@Model.ServiceSummary.PreviousYearToDate.StartDate.ToShortDateString() -<br /> @Model.ServiceSummary.PreviousYearToDate.EndDate.ToShortDateString()</th>
                                            <th class="text-center">@Model.ServiceSummary.CurrentYearToDate.StartDate.ToShortDateString() -<br /> @Model.ServiceSummary.CurrentYearToDate.EndDate.ToShortDateString()</th>
                                            <th class="text-center">Difference</th>
                                            <th class="text-center divider-column">% Change</th>

                                        </tr>
                                    </thead>
                                    <tbody>
                                        @{
                                            var CustpreviousDateSales =
                                            from sales in Model.ServiceSummary.PreviousDate.ServiceData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.CustomerAmount),
                                            };

                                            ///////////////////////////////////////////////


                                            var CustcurrentDateSales =
                                        from sales in Model.ServiceSummary.CurrentDate.ServiceData
                                        group sales by sales.Location into locationGroup
                                        select new
                                        {
                                            Location = locationGroup.Key,
                                            Deals = locationGroup.Sum(x => x.CustomerAmount),
                                        };


                                            ///////////////////////////////////////////////

                                            var CustpreviousMonthlySales =
                                        from sales in Model.ServiceSummary.PreviousMonthToDate.ServiceData
                                        group sales by sales.Location into locationGroup
                                        select new
                                        {
                                            Location = locationGroup.Key,
                                            Deals = locationGroup.Sum(x => x.CustomerAmount),
                                        };


                                            ///////////////////////////////////////////////

                                            var CustcurrentMonthlySales =
                                        from sales in Model.ServiceSummary.CurrentMonthToDate.ServiceData
                                        group sales by sales.Location into locationGroup
                                        select new
                                        {
                                            Location = locationGroup.Key,
                                            Deals = locationGroup.Sum(x => x.CustomerAmount),
                                        };


                                            ///////////////////////////////////////////////

                                            var CustpreviousYearlySales =
                                        from sales in Model.ServiceSummary.PreviousYearToDate.ServiceData
                                        group sales by sales.Location into locationGroup
                                        select new
                                        {
                                            Location = locationGroup.Key,
                                            Deals = locationGroup.Sum(x => x.CustomerAmount),
                                        };

                                            ///////////////////////////////////////////////

                                            var CustcurrentYearlySales =
                                        from sales in Model.ServiceSummary.CurrentYearToDate.ServiceData
                                        group sales by sales.Location into locationGroup
                                        select new
                                        {
                                            Location = locationGroup.Key,
                                            Deals = locationGroup.Sum(x => x.CustomerAmount),
                                        };



                                        }

                                        @foreach (var location in Custlocations)
                                        {

                                            decimal prevDateSales = 0;
                                            decimal currDateSales = 0;
                                            decimal prevMonthSales = 0;
                                            decimal currMonthSales = 0;
                                            decimal prevYearSales = 0;
                                            decimal currYearSales = 0;

                                            try
                                            {
                                                prevDateSales = CustpreviousDateSales.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                prevDateSales = 0;
                                            }

                                            try
                                            {
                                                currDateSales = CustcurrentDateSales.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                currDateSales = 0;
                                            }

                                            try
                                            {
                                                prevMonthSales = CustpreviousMonthlySales.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                prevMonthSales = 0;
                                            }

                                            try
                                            {
                                                currMonthSales = CustcurrentMonthlySales.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                currMonthSales = 0;
                                            }

                                            try
                                            {
                                                prevYearSales = CustpreviousYearlySales.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                prevYearSales = 0;
                                            }

                                            try
                                            {
                                                currYearSales = CustcurrentYearlySales.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                currYearSales = 0;
                                            }


                                            var dateDifference = currDateSales - prevDateSales;
                                            decimal datePercentChange = 0;
                                            if (prevDateSales > 0)
                                            {
                                                datePercentChange = dateDifference / prevDateSales;
                                            }

                                            var monthDifference = currMonthSales - prevMonthSales;
                                            decimal monthPercentChange = 0;
                                            if (prevMonthSales > 0)
                                            {
                                                monthPercentChange = monthDifference / prevMonthSales;
                                            }

                                            var yearDifference = currYearSales - prevYearSales;
                                            decimal yearPercentChange = 0;
                                            if (prevYearSales > 0)
                                            {
                                                yearPercentChange = yearDifference / prevYearSales;
                                            }

                                            var displayLocation = location;
                                            switch (location)
                                            {
                                                case "FOC":
                                                    displayLocation = "Annapolis Cadillac/Volkswagen";
                                                    break;
                                                case "FMM":
                                                    displayLocation = "Annapolis Mazda/Mitsubishi";
                                                    break;
                                                case "FTN":
                                                    displayLocation = "Chambersburg";
                                                    break;
                                                case "CJE":
                                                    displayLocation = "Clearwater Chrysler/Jeep";
                                                    break;
                                                case "CHY":
                                                    displayLocation = "Clearwater Hyundai/Subaru";
                                                    break;
                                                case "CDO":
                                                    displayLocation = "Rockville Hyundai";
                                                    break;
                                                case "FAM":
                                                    displayLocation = "Frederick";
                                                    break;
                                                case "LFM":
                                                    displayLocation = "Germantown";
                                                    break;
                                                case "FHT":
                                                    displayLocation = "Hagerstown Chrysler";
                                                    break;
                                                case "FHG":
                                                    displayLocation = "Hagerstown GM";
                                                    break;
                                                case "LFT":
                                                    displayLocation = "Gaitherburg Toyota";
                                                    break;
                                                case "LFO":
                                                    displayLocation = "Gaithersburg Hyundai/Subaru";
                                                    break;
                                                case "FLP":
                                                    displayLocation = "Lexington Park";
                                                    break;
                                                case "FBN":
                                                    displayLocation = "Rockville Buick/GMC";
                                                    break;
                                                case "FBS":
                                                    displayLocation = "Rockville Subaru";
                                                    break;
                                                case "WDC":
                                                    displayLocation = "Wheaton";
                                                    break;
                                            }




                                            <tr>
                                                <td class="text-right divider-column" style="width:330px">@displayLocation</td>
                                                <td class="text-right">@prevDateSales.ToString("C")</td>
                                                <td class="text-right">@currDateSales.ToString("C")</td>
                                                <td class="text-right">@dateDifference.ToString("C")</td>
                                                <td class="text-right divider-column">@datePercentChange.ToString("P")</td>
                                                <td class="text-right">@prevMonthSales.ToString("C")</td>
                                                <td class="text-right">@currMonthSales.ToString("C")</td>
                                                <td class="text-right">@monthDifference.ToString("C")</td>
                                                <td class="text-right divider-column">@monthPercentChange.ToString("P")</td>
                                                <td class="text-right">@prevYearSales.ToString("C")</td>
                                                <td class="text-right">@currYearSales.ToString("C")</td>
                                                <td class="text-right">@yearDifference.ToString("C")</td>
                                                <td class="text-right divider-column">@yearPercentChange.ToString("P")</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>

                            </td>

                        </tr>   
                        <tr>
                            <td class="text-right divider-column"><strong><a data-toggle="collapse" id="deal-location" style="cursor: pointer;" data-target="#collapse-Warranty-location"><strong>Warranty Amount <i class="fa fa-caret-down" aria-hidden="true"></i></strong></a></strong></td>

                            <td class="text-right">@Model.ServiceSummary.PreviousDate.WarrantyAmount.ToString("C")</td>
                            <td class="text-right">@Model.ServiceSummary.CurrentDate.WarrantyAmount.ToString("C")</td>
                            <td class="text-right">@dayDifferenceWarrantyAmount.ToString("C")</td>
                            <td class="text-center divider-column">@dayPercentageWarrantyAmount.ToString("P")</td>

                            <td class="text-right">@Model.ServiceSummary.PreviousMonthToDate.WarrantyAmount.ToString("C")</td>
                            <td class="text-right">@Model.ServiceSummary.CurrentMonthToDate.WarrantyAmount.ToString("C")</td>
                            <td class="text-right">@monthDifferenceWarrantyAmount.ToString("C")</td>
                            <td class="text-center divider-column">@monthPercentageWarrantyAmount.ToString("P")</td>

                            <td class="text-right">@Model.ServiceSummary.PreviousYearToDate.WarrantyAmount.ToString("C")</td>
                            <td class="text-right">@Model.ServiceSummary.CurrentYearToDate.WarrantyAmount.ToString("C")</td>
                            <td class="text-right">@yearDifferenceWarrantyAmount.ToString("C")</td>
                            <td class="text-center divider-column">@yearPercentageWarrantyAmount.ToString("P")</td>


                           </tr>
                        <tr id="collapse-Warranty-location" class="collapse out" style="background-color:#e2e2e2">
                            @{

                                var Warlocations = Model.ServiceSummary.CurrentYearToDate.ServiceData.OrderBy(x => x.Location).Select(x => x.Location).Distinct().ToList();

                            }

                            <td colspan="13">
                                <table class="table table-bordered">
                                    <thead>
                                        <tr>
                                            <th class="text-center divider-column" style="width:330px">Locations</th>
                                            <th class="text-center">@DateTime.Now.AddYears(-1).AddDays(-1).ToShortDateString()</th>
                                            <th class="text-center">@DateTime.Now.AddDays(-1).ToShortDateString()</th>
                                            <th class="text-center">Difference</th>
                                            <th class="text-center divider-column">% Change</th>

                                            <th class="text-center">@Model.ServiceSummary.PreviousMonthToDate.StartDate.ToShortDateString() -<br /> @Model.ServiceSummary.PreviousMonthToDate.EndDate.ToShortDateString()</th>
                                            <th class="text-center">@Model.ServiceSummary.CurrentMonthToDate.StartDate.ToShortDateString() -<br /> @Model.ServiceSummary.CurrentMonthToDate.EndDate.ToShortDateString()</th>
                                            <th class="text-center">Difference</th>
                                            <th class="text-center divider-column">% Change</th>

                                            <th class="text-center">@Model.ServiceSummary.PreviousYearToDate.StartDate.ToShortDateString() -<br /> @Model.ServiceSummary.PreviousYearToDate.EndDate.ToShortDateString()</th>
                                            <th class="text-center">@Model.ServiceSummary.CurrentYearToDate.StartDate.ToShortDateString() -<br /> @Model.ServiceSummary.CurrentYearToDate.EndDate.ToShortDateString()</th>
                                            <th class="text-center">Difference</th>
                                            <th class="text-center divider-column">% Change</th>

                                        </tr>
                                    </thead>
                                    <tbody>
                                        @{
                                            var WarpreviousDateSales =
                                            from sales in Model.ServiceSummary.PreviousDate.ServiceData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.WarrantyAmount),
                                            };

                                            ///////////////////////////////////////////////


                                            var WarcurrentDateSales =
                                        from sales in Model.ServiceSummary.CurrentDate.ServiceData
                                        group sales by sales.Location into locationGroup
                                        select new
                                        {
                                            Location = locationGroup.Key,
                                            Deals = locationGroup.Sum(x => x.WarrantyAmount),
                                        };


                                            ///////////////////////////////////////////////

                                            var WarpreviousMonthlySales =
                                        from sales in Model.ServiceSummary.PreviousMonthToDate.ServiceData
                                        group sales by sales.Location into locationGroup
                                        select new
                                        {
                                            Location = locationGroup.Key,
                                            Deals = locationGroup.Sum(x => x.WarrantyAmount),
                                        };


                                            ///////////////////////////////////////////////

                                            var WarcurrentMonthlySales =
                                        from sales in Model.ServiceSummary.CurrentMonthToDate.ServiceData
                                        group sales by sales.Location into locationGroup
                                        select new
                                        {
                                            Location = locationGroup.Key,
                                            Deals = locationGroup.Sum(x => x.WarrantyAmount),
                                        };


                                            ///////////////////////////////////////////////

                                            var WarpreviousYearlySales =
                                        from sales in Model.ServiceSummary.PreviousYearToDate.ServiceData
                                        group sales by sales.Location into locationGroup
                                        select new
                                        {
                                            Location = locationGroup.Key,
                                            Deals = locationGroup.Sum(x => x.WarrantyAmount),
                                        };

                                            ///////////////////////////////////////////////

                                            var WarcurrentYearlySales =
                                        from sales in Model.ServiceSummary.CurrentYearToDate.ServiceData
                                        group sales by sales.Location into locationGroup
                                        select new
                                        {
                                            Location = locationGroup.Key,
                                            Deals = locationGroup.Sum(x => x.WarrantyAmount),
                                        };



                                        }

                                        @foreach (var location in Warlocations)
                                        {

                                            decimal prevDateSales = 0;
                                            decimal currDateSales = 0;
                                            decimal prevMonthSales = 0;
                                            decimal currMonthSales = 0;
                                            decimal prevYearSales = 0;
                                            decimal currYearSales = 0;

                                            try
                                            {
                                                prevDateSales = WarpreviousDateSales.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                prevDateSales = 0;
                                            }

                                            try
                                            {
                                                currDateSales = WarcurrentDateSales.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                currDateSales = 0;
                                            }

                                            try
                                            {
                                                prevMonthSales = WarpreviousMonthlySales.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                prevMonthSales = 0;
                                            }

                                            try
                                            {
                                                currMonthSales = WarcurrentMonthlySales.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                currMonthSales = 0;
                                            }

                                            try
                                            {
                                                prevYearSales = WarpreviousYearlySales.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                prevYearSales = 0;
                                            }

                                            try
                                            {
                                                currYearSales = WarcurrentYearlySales.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                currYearSales = 0;
                                            }


                                            var dateDifference = currDateSales - prevDateSales;
                                            decimal datePercentChange = 0;
                                            if (prevDateSales > 0)
                                            {
                                                datePercentChange = dateDifference / prevDateSales;
                                            }

                                            var monthDifference = currMonthSales - prevMonthSales;
                                            decimal monthPercentChange = 0;
                                            if (prevMonthSales > 0)
                                            {
                                                monthPercentChange = monthDifference / prevMonthSales;
                                            }

                                            var yearDifference = currYearSales - prevYearSales;
                                            decimal yearPercentChange = 0;
                                            if (prevYearSales > 0)
                                            {
                                                yearPercentChange = yearDifference / prevYearSales;
                                            }

                                            var displayLocation = location;
                                            switch (location)
                                            {
                                                case "FOC":
                                                    displayLocation = "Annapolis Cadillac/Volkswagen";
                                                    break;
                                                case "FMM":
                                                    displayLocation = "Annapolis Mazda/Mitsubishi";
                                                    break;
                                                case "FTN":
                                                    displayLocation = "Chambersburg";
                                                    break;
                                                case "CJE":
                                                    displayLocation = "Clearwater Chrysler/Jeep";
                                                    break;
                                                case "CHY":
                                                    displayLocation = "Clearwater Hyundai/Subaru";
                                                    break;
                                                case "CDO":
                                                    displayLocation = "Rockville Hyundai";
                                                    break;
                                                case "FAM":
                                                    displayLocation = "Frederick";
                                                    break;
                                                case "LFM":
                                                    displayLocation = "Germantown";
                                                    break;
                                                case "FHT":
                                                    displayLocation = "Hagerstown Chrysler";
                                                    break;
                                                case "FHG":
                                                    displayLocation = "Hagerstown GM";
                                                    break;
                                                case "LFT":
                                                    displayLocation = "Gaitherburg Toyota";
                                                    break;
                                                case "LFO":
                                                    displayLocation = "Gaithersburg Hyundai/Subaru";
                                                    break;
                                                case "FLP":
                                                    displayLocation = "Lexington Park";
                                                    break;
                                                case "FBN":
                                                    displayLocation = "Rockville Buick/GMC";
                                                    break;
                                                case "FBS":
                                                    displayLocation = "Rockville Subaru";
                                                    break;
                                                case "WDC":
                                                    displayLocation = "Wheaton";
                                                    break;
                                            }




                                            <tr>
                                                <td class="text-right divider-column" style="width:330px">@displayLocation</td>
                                                <td class="text-right">@prevDateSales.ToString("C")</td>
                                                <td class="text-right">@currDateSales.ToString("C")</td>
                                                <td class="text-right">@dateDifference.ToString("C")</td>
                                                <td class="text-right divider-column">@datePercentChange.ToString("P")</td>
                                                <td class="text-right">@prevMonthSales.ToString("C")</td>
                                                <td class="text-right">@currMonthSales.ToString("C")</td>
                                                <td class="text-right">@monthDifference.ToString("C")</td>
                                                <td class="text-right divider-column">@monthPercentChange.ToString("P")</td>
                                                <td class="text-right">@prevYearSales.ToString("C")</td>
                                                <td class="text-right">@currYearSales.ToString("C")</td>
                                                <td class="text-right">@yearDifference.ToString("C")</td>
                                                <td class="text-right divider-column">@yearPercentChange.ToString("P")</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>

                            </td>

                        </tr>*@   
                        <tr>
                            <td class="text-right divider-column"><strong><a data-toggle="collapse" id="deal-location" style="cursor: pointer;" data-target="#collapse-custlbr-location"><strong>Customer Labor Amount <i class="fa fa-caret-down" aria-hidden="true"></i></strong></a></strong></td>

                            <td class="text-right">@Model.ServiceSummary.PreviousDate.CustomerLaborAmount.ToString("C")</td>
                            <td class="text-right">@Model.ServiceSummary.CurrentDate.CustomerLaborAmount.ToString("C")</td>
                            <td class="text-right">@dayDifferenceCustomerLaborAmount.ToString("C")</td>
                            <td class="text-center divider-column">@dayPercentageCustomerLaborAmount.ToString("P")</td>

                            <td class="text-right">@Model.ServiceSummary.PreviousMonthToDate.CustomerLaborAmount.ToString("C")</td>
                            <td class="text-right">@Model.ServiceSummary.CurrentMonthToDate.CustomerLaborAmount.ToString("C")</td>
                            <td class="text-right">@monthDifferenceCustomerLaborAmount.ToString("C")</td>
                            <td class="text-center divider-column">@monthPercentageCustomerLaborAmount.ToString("P")</td>

                            <td class="text-right">@Model.ServiceSummary.PreviousYearToDate.CustomerLaborAmount.ToString("C")</td>
                            <td class="text-right">@Model.ServiceSummary.CurrentYearToDate.CustomerLaborAmount.ToString("C")</td>
                            <td class="text-right">@yearDifferenceCustomerLaborAmount.ToString("C")</td>
                            <td class="text-center divider-column">@yearPercentageCustomerLaborAmount.ToString("P")</td>

                        </tr>

                        <tr id="collapse-custlbr-location" class="collapse out" style="background-color:#e2e2e2">
                            @{

                                var custlocations = Model.ServiceSummary.CurrentYearToDate.ServiceData.OrderBy(x => x.Location).Select(x => x.Location).Distinct().ToList();

                            }

                            <td colspan="13">
                                <table class="table table-bordered">
                                    <thead>
                                        <tr>
                                            <th class="text-center divider-column" style="width:330px">Locations</th>
                                            <th class="text-center">@Model.ServiceSummary.PreviousDate.StartDate.ToShortDateString()</th>
                                            <th class="text-center">@Model.ServiceSummary.CurrentDate.StartDate.ToShortDateString()</th>
                                            <th class="text-center">Difference</th>
                                            <th class="text-center divider-column">% Change</th>

                                            <th class="text-center">@Model.ServiceSummary.PreviousMonthToDate.StartDate.ToShortDateString() -<br /> @Model.ServiceSummary.PreviousMonthToDate.EndDate.ToShortDateString()</th>
                                            <th class="text-center">@Model.ServiceSummary.CurrentMonthToDate.StartDate.ToShortDateString() -<br /> @Model.ServiceSummary.CurrentMonthToDate.EndDate.ToShortDateString()</th>
                                            <th class="text-center">Difference</th>
                                            <th class="text-center divider-column">% Change</th>

                                            <th class="text-center">@Model.ServiceSummary.PreviousYearToDate.StartDate.ToShortDateString() -<br /> @Model.ServiceSummary.PreviousYearToDate.EndDate.ToShortDateString()</th>
                                            <th class="text-center">@Model.ServiceSummary.CurrentYearToDate.StartDate.ToShortDateString() -<br /> @Model.ServiceSummary.CurrentYearToDate.EndDate.ToShortDateString()</th>
                                            <th class="text-center">Difference</th>
                                            <th class="text-center divider-column">% Change</th>

                                        </tr>
                                    </thead>
                                    <tbody>
                                        @{
                                            var custpreviousDateSales =
                                            from sales in Model.ServiceSummary.PreviousDate.ServiceData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.CustomerLaborAmount),
                                            };

                                            ///////////////////////////////////////////////


                                            var custcurrentDateSales =
                                            from sales in Model.ServiceSummary.CurrentDate.ServiceData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.CustomerLaborAmount),
                                            };


                                            ///////////////////////////////////////////////

                                            var custpreviousMonthlySales =
                                            from sales in Model.ServiceSummary.PreviousMonthToDate.ServiceData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.CustomerLaborAmount),
                                            };


                                            ///////////////////////////////////////////////

                                            var custcurrentMonthlySales =
                                            from sales in Model.ServiceSummary.CurrentMonthToDate.ServiceData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.CustomerLaborAmount),
                                            };


                                            ///////////////////////////////////////////////

                                            var custpreviousYearlySales =
                                            from sales in Model.ServiceSummary.PreviousYearToDate.ServiceData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.CustomerLaborAmount),
                                            };

                                            ///////////////////////////////////////////////

                                            var custcurrentYearlySales =
                                            from sales in Model.ServiceSummary.CurrentYearToDate.ServiceData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.CustomerLaborAmount),
                                            };



                                        }

                                        @foreach (var location in custlocations)
                                        {

                                            decimal prevDateSales = 0;
                                            decimal currDateSales = 0;
                                            decimal prevMonthSales = 0;
                                            decimal currMonthSales = 0;
                                            decimal prevYearSales = 0;
                                            decimal currYearSales = 0;

                                            try
                                            {
                                                prevDateSales = custpreviousDateSales.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                prevDateSales = 0;
                                            }

                                            try
                                            {
                                                currDateSales = custcurrentDateSales.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                currDateSales = 0;
                                            }

                                            try
                                            {
                                                prevMonthSales = custpreviousMonthlySales.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                prevMonthSales = 0;
                                            }

                                            try
                                            {
                                                currMonthSales = custcurrentMonthlySales.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                currMonthSales = 0;
                                            }

                                            try
                                            {
                                                prevYearSales = custpreviousYearlySales.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                prevYearSales = 0;
                                            }

                                            try
                                            {
                                                currYearSales = custcurrentYearlySales.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                currYearSales = 0;
                                            }


                                            var dateDifference = currDateSales - prevDateSales;
                                            decimal datePercentChange = 0;
                                            if (prevDateSales > 0)
                                            {
                                                datePercentChange = dateDifference / prevDateSales;
                                            }

                                            var monthDifference = currMonthSales - prevMonthSales;
                                            decimal monthPercentChange = 0;
                                            if (prevMonthSales > 0)
                                            {
                                                monthPercentChange = monthDifference / prevMonthSales;
                                            }

                                            var yearDifference = currYearSales - prevYearSales;
                                            decimal yearPercentChange = 0;
                                            if (prevYearSales > 0)
                                            {
                                                yearPercentChange = yearDifference / prevYearSales;
                                            }

                                            var displayLocation = location;
                                            switch (location)
                                            {
                                                case "FOC":
                                                    displayLocation = "Annapolis Cadillac/Volkswagen";
                                                    break;
                                                case "FMM":
                                                    displayLocation = "Annapolis Mazda/Mitsubishi";
                                                    break;
                                                case "FTN":
                                                    displayLocation = "Chambersburg";
                                                    break;
                                                case "CJE":
                                                    displayLocation = "Clearwater Chrysler/Jeep";
                                                    break;
                                                case "CHY":
                                                    displayLocation = "Clearwater Hyundai/Subaru";
                                                    break;
                                                case "CDO":
                                                    displayLocation = "Rockville Hyundai";
                                                    break;
                                                case "FAM":
                                                    displayLocation = "Frederick";
                                                    break;
                                                case "LFM":
                                                    displayLocation = "Germantown";
                                                    break;
                                                case "FHT":
                                                    displayLocation = "Hagerstown Chrysler";
                                                    break;
                                                case "FHG":
                                                    displayLocation = "Hagerstown GM";
                                                    break;
                                                case "LFT":
                                                    displayLocation = "Gaitherburg Toyota";
                                                    break;
                                                case "LFO":
                                                    displayLocation = "Gaithersburg Hyundai/Subaru";
                                                    break;
                                                case "FLP":
                                                    displayLocation = "Lexington Park";
                                                    break;
                                                case "FBN":
                                                    displayLocation = "Rockville Buick/GMC";
                                                    break;
                                                case "FBS":
                                                    displayLocation = "Rockville Subaru";
                                                    break;
                                                case "WDC":
                                                    displayLocation = "Wheaton";
                                                    break;
                                            }




                                            <tr>
                                                <td class="text-right divider-column" style="width:330px">@displayLocation</td>
                                                <td class="text-right">@prevDateSales.ToString("C")</td>
                                                <td class="text-right">@currDateSales.ToString("C")</td>
                                                <td class="text-right">@dateDifference.ToString("C")</td>
                                                <td class="text-right divider-column">@datePercentChange.ToString("P")</td>
                                                <td class="text-right">@prevMonthSales.ToString("C")</td>
                                                <td class="text-right">@currMonthSales.ToString("C")</td>
                                                <td class="text-right">@monthDifference.ToString("C")</td>
                                                <td class="text-right divider-column">@monthPercentChange.ToString("P")</td>
                                                <td class="text-right">@prevYearSales.ToString("C")</td>
                                                <td class="text-right">@currYearSales.ToString("C")</td>
                                                <td class="text-right">@yearDifference.ToString("C")</td>
                                                <td class="text-right divider-column">@yearPercentChange.ToString("P")</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>

                            </td>

                        </tr>

                        <tr>
                            <td class="text-right divider-column"><strong><a data-toggle="collapse" id="deal-location" style="cursor: pointer;" data-target="#collapse-Warrantylbr-location"><strong>Warranty Labor Amount <i class="fa fa-caret-down" aria-hidden="true"></i></strong></a></strong></td>

                            <td class="text-right">@Model.ServiceSummary.PreviousDate.WarrantyLaborAmount.ToString("C")</td>
                            <td class="text-right">@Model.ServiceSummary.CurrentDate.WarrantyLaborAmount.ToString("C")</td>
                            <td class="text-right">@dayDifferenceWarrantyLaborAmount.ToString("C")</td>
                            <td class="text-center divider-column">@dayPercentageWarrantyLaborAmount.ToString("P")</td>

                            <td class="text-right">@Model.ServiceSummary.PreviousMonthToDate.WarrantyLaborAmount.ToString("C")</td>
                            <td class="text-right">@Model.ServiceSummary.CurrentMonthToDate.WarrantyLaborAmount.ToString("C")</td>
                            <td class="text-right">@monthDifferenceWarrantyLaborAmount.ToString("C")</td>
                            <td class="text-center divider-column">@monthPercentageWarrantyLaborAmount.ToString("P")</td>

                            <td class="text-right">@Model.ServiceSummary.PreviousYearToDate.WarrantyLaborAmount.ToString("C")</td>
                            <td class="text-right">@Model.ServiceSummary.CurrentYearToDate.WarrantyLaborAmount.ToString("C")</td>
                            <td class="text-right">@yearDifferenceWarrantyLaborAmount.ToString("C")</td>
                            <td class="text-center divider-column">@yearPercentageWarrantyLaborAmount.ToString("P")</td>

                        </tr>
                        <tr id="collapse-Warrantylbr-location" class="collapse out" style="background-color:#e2e2e2">
                            @{

                                var Warrantylocations = Model.ServiceSummary.CurrentYearToDate.ServiceData.OrderBy(x => x.Location).Select(x => x.Location).Distinct().ToList();

                            }

                            <td colspan="13">
                                <table class="table table-bordered">
                                    <thead>
                                        <tr>
                                            <th class="text-center divider-column" style="width:330px">Locations</th>
                                            <th class="text-center">@Model.ServiceSummary.PreviousDate.StartDate.ToShortDateString()</th>
                                            <th class="text-center">@Model.ServiceSummary.CurrentDate.StartDate.ToShortDateString()</th>
                                            <th class="text-center">Difference</th>
                                            <th class="text-center divider-column">% Change</th>

                                            <th class="text-center">@Model.ServiceSummary.PreviousMonthToDate.StartDate.ToShortDateString() -<br /> @Model.ServiceSummary.PreviousMonthToDate.EndDate.ToShortDateString()</th>
                                            <th class="text-center">@Model.ServiceSummary.CurrentMonthToDate.StartDate.ToShortDateString() -<br /> @Model.ServiceSummary.CurrentMonthToDate.EndDate.ToShortDateString()</th>
                                            <th class="text-center">Difference</th>
                                            <th class="text-center divider-column">% Change</th>

                                            <th class="text-center">@Model.ServiceSummary.PreviousYearToDate.StartDate.ToShortDateString() -<br /> @Model.ServiceSummary.PreviousYearToDate.EndDate.ToShortDateString()</th>
                                            <th class="text-center">@Model.ServiceSummary.CurrentYearToDate.StartDate.ToShortDateString() -<br /> @Model.ServiceSummary.CurrentYearToDate.EndDate.ToShortDateString()</th>
                                            <th class="text-center">Difference</th>
                                            <th class="text-center divider-column">% Change</th>

                                        </tr>
                                    </thead>
                                    <tbody>
                                        @{
                                            var WarrantypreviousDateSales =
                                            from sales in Model.ServiceSummary.PreviousDate.ServiceData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.WarrantyLaborAmount),
                                            };

                                            ///////////////////////////////////////////////


                                            var WarrantycurrentDateSales =
                                            from sales in Model.ServiceSummary.CurrentDate.ServiceData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.WarrantyLaborAmount),
                                            };


                                            ///////////////////////////////////////////////

                                            var WarrantypreviousMonthlySales =
                                            from sales in Model.ServiceSummary.PreviousMonthToDate.ServiceData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.WarrantyLaborAmount),
                                            };


                                            ///////////////////////////////////////////////

                                            var WarrantycurrentMonthlySales =
                                            from sales in Model.ServiceSummary.CurrentMonthToDate.ServiceData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.WarrantyLaborAmount),
                                            };


                                            ///////////////////////////////////////////////

                                            var WarrantypreviousYearlySales =
                                            from sales in Model.ServiceSummary.PreviousYearToDate.ServiceData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.WarrantyLaborAmount),
                                            };

                                            ///////////////////////////////////////////////

                                            var WarrantycurrentYearlySales =
                                            from sales in Model.ServiceSummary.CurrentYearToDate.ServiceData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.WarrantyLaborAmount),
                                            };



                                        }

                                        @foreach (var location in Warrantylocations)
                                        {

                                            decimal prevDateSales = 0;
                                            decimal currDateSales = 0;
                                            decimal prevMonthSales = 0;
                                            decimal currMonthSales = 0;
                                            decimal prevYearSales = 0;
                                            decimal currYearSales = 0;

                                            try
                                            {
                                                prevDateSales = WarrantypreviousDateSales.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                prevDateSales = 0;
                                            }

                                            try
                                            {
                                                currDateSales = WarrantycurrentDateSales.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                currDateSales = 0;
                                            }

                                            try
                                            {
                                                prevMonthSales = WarrantypreviousMonthlySales.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                prevMonthSales = 0;
                                            }

                                            try
                                            {
                                                currMonthSales = WarrantycurrentMonthlySales.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                currMonthSales = 0;
                                            }

                                            try
                                            {
                                                prevYearSales = WarrantypreviousYearlySales.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                prevYearSales = 0;
                                            }

                                            try
                                            {
                                                currYearSales = WarrantycurrentYearlySales.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                currYearSales = 0;
                                            }


                                            var dateDifference = currDateSales - prevDateSales;
                                            decimal datePercentChange = 0;
                                            if (prevDateSales > 0)
                                            {
                                                datePercentChange = dateDifference / prevDateSales;
                                            }

                                            var monthDifference = currMonthSales - prevMonthSales;
                                            decimal monthPercentChange = 0;
                                            if (prevMonthSales > 0)
                                            {
                                                monthPercentChange = monthDifference / prevMonthSales;
                                            }

                                            var yearDifference = currYearSales - prevYearSales;
                                            decimal yearPercentChange = 0;
                                            if (prevYearSales > 0)
                                            {
                                                yearPercentChange = yearDifference / prevYearSales;
                                            }

                                            var displayLocation = location;
                                            switch (location)
                                            {
                                                case "FOC":
                                                    displayLocation = "Annapolis Cadillac/Volkswagen";
                                                    break;
                                                case "FMM":
                                                    displayLocation = "Annapolis Mazda/Mitsubishi";
                                                    break;
                                                case "FTN":
                                                    displayLocation = "Chambersburg";
                                                    break;
                                                case "CJE":
                                                    displayLocation = "Clearwater Chrysler/Jeep";
                                                    break;
                                                case "CHY":
                                                    displayLocation = "Clearwater Hyundai/Subaru";
                                                    break;
                                                case "CDO":
                                                    displayLocation = "Rockville Hyundai";
                                                    break;
                                                case "FAM":
                                                    displayLocation = "Frederick";
                                                    break;
                                                case "LFM":
                                                    displayLocation = "Germantown";
                                                    break;
                                                case "FHT":
                                                    displayLocation = "Hagerstown Chrysler";
                                                    break;
                                                case "FHG":
                                                    displayLocation = "Hagerstown GM";
                                                    break;
                                                case "LFT":
                                                    displayLocation = "Gaitherburg Toyota";
                                                    break;
                                                case "LFO":
                                                    displayLocation = "Gaithersburg Hyundai/Subaru";
                                                    break;
                                                case "FLP":
                                                    displayLocation = "Lexington Park";
                                                    break;
                                                case "FBN":
                                                    displayLocation = "Rockville Buick/GMC";
                                                    break;
                                                case "FBS":
                                                    displayLocation = "Rockville Subaru";
                                                    break;
                                                case "WDC":
                                                    displayLocation = "Wheaton";
                                                    break;
                                            }




                                            <tr>
                                                <td class="text-right divider-column" style="width:330px">@displayLocation</td>
                                                <td class="text-right">@prevDateSales.ToString("C")</td>
                                                <td class="text-right">@currDateSales.ToString("C")</td>
                                                <td class="text-right">@dateDifference.ToString("C")</td>
                                                <td class="text-right divider-column">@datePercentChange.ToString("P")</td>
                                                <td class="text-right">@prevMonthSales.ToString("C")</td>
                                                <td class="text-right">@currMonthSales.ToString("C")</td>
                                                <td class="text-right">@monthDifference.ToString("C")</td>
                                                <td class="text-right divider-column">@monthPercentChange.ToString("P")</td>
                                                <td class="text-right">@prevYearSales.ToString("C")</td>
                                                <td class="text-right">@currYearSales.ToString("C")</td>
                                                <td class="text-right">@yearDifference.ToString("C")</td>
                                                <td class="text-right divider-column">@yearPercentChange.ToString("P")</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>

                            </td>

                        </tr>   
                        <tr>
                            <td class="text-right divider-column"><strong><a data-toggle="collapse" id="deal-location" style="cursor: pointer;" data-target="#collapse-internallbr-location"><strong>Internal Labor Amount <i class="fa fa-caret-down" aria-hidden="true"></i></strong></a></strong></td>

                            <td class="text-right">@Model.ServiceSummary.PreviousDate.InternalLaborAmount.ToString("C")</td>
                            <td class="text-right">@Model.ServiceSummary.CurrentDate.InternalLaborAmount.ToString("C")</td>
                            <td class="text-right">@dayDifferenceInternalLaborAmount.ToString("C")</td>
                            <td class="text-center divider-column">@dayPercentageInternalLaborAmount.ToString("P")</td>

                            <td class="text-right">@Model.ServiceSummary.PreviousMonthToDate.InternalLaborAmount.ToString("C")</td>
                            <td class="text-right">@Model.ServiceSummary.CurrentMonthToDate.InternalLaborAmount.ToString("C")</td>
                            <td class="text-right">@monthDifferenceInternalLaborAmount.ToString("C")</td>
                            <td class="text-center divider-column">@monthPercentageInternalLaborAmount.ToString("P")</td>

                            <td class="text-right">@Model.ServiceSummary.PreviousYearToDate.InternalLaborAmount.ToString("C")</td>
                            <td class="text-right">@Model.ServiceSummary.CurrentYearToDate.InternalLaborAmount.ToString("C")</td>
                            <td class="text-right">@yearDifferenceInternalLaborAmount.ToString("C")</td>
                            <td class="text-center divider-column">@yearPercentageInternalLaborAmount.ToString("P")</td>

                        </tr>
                        <tr id="collapse-internallbr-location" class="collapse out" style="background-color:#e2e2e2">
                            @{

                                var internallocations = Model.ServiceSummary.CurrentYearToDate.ServiceData.OrderBy(x => x.Location).Select(x => x.Location).Distinct().ToList();

                            }

                            <td colspan="13">
                                <table class="table table-bordered">
                                    <thead>
                                        <tr>
                                            <th class="text-center divider-column" style="width:330px">Locations</th>
                                            <th class="text-center">@Model.ServiceSummary.PreviousDate.StartDate.ToShortDateString()</th>
                                            <th class="text-center">@Model.ServiceSummary.CurrentDate.StartDate.ToShortDateString()</th>
                                            <th class="text-center">Difference</th>
                                            <th class="text-center divider-column">% Change</th>

                                            <th class="text-center">@Model.ServiceSummary.PreviousMonthToDate.StartDate.ToShortDateString() -<br /> @Model.ServiceSummary.PreviousMonthToDate.EndDate.ToShortDateString()</th>
                                            <th class="text-center">@Model.ServiceSummary.CurrentMonthToDate.StartDate.ToShortDateString() -<br /> @Model.ServiceSummary.CurrentMonthToDate.EndDate.ToShortDateString()</th>
                                            <th class="text-center">Difference</th>
                                            <th class="text-center divider-column">% Change</th>

                                            <th class="text-center">@Model.ServiceSummary.PreviousYearToDate.StartDate.ToShortDateString() -<br /> @Model.ServiceSummary.PreviousYearToDate.EndDate.ToShortDateString()</th>
                                            <th class="text-center">@Model.ServiceSummary.CurrentYearToDate.StartDate.ToShortDateString() -<br /> @Model.ServiceSummary.CurrentYearToDate.EndDate.ToShortDateString()</th>
                                            <th class="text-center">Difference</th>
                                            <th class="text-center divider-column">% Change</th>

                                        </tr>
                                    </thead>
                                    <tbody>
                                        @{
                                            var internalpreviousDateSales =
                                            from sales in Model.ServiceSummary.PreviousDate.ServiceData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.InternalLaborAmount),
                                            };

                                            ///////////////////////////////////////////////


                                            var internalcurrentDateSales =
                                            from sales in Model.ServiceSummary.CurrentDate.ServiceData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.InternalLaborAmount),
                                            };


                                            ///////////////////////////////////////////////

                                            var internalpreviousMonthlySales =
                                            from sales in Model.ServiceSummary.PreviousMonthToDate.ServiceData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.InternalLaborAmount),
                                            };


                                            ///////////////////////////////////////////////

                                            var internalcurrentMonthlySales =
                                            from sales in Model.ServiceSummary.CurrentMonthToDate.ServiceData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.InternalLaborAmount),
                                            };


                                            ///////////////////////////////////////////////

                                            var internalpreviousYearlySales =
                                            from sales in Model.ServiceSummary.PreviousYearToDate.ServiceData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.InternalLaborAmount),
                                            };

                                            ///////////////////////////////////////////////

                                            var internalcurrentYearlySales =
                                            from sales in Model.ServiceSummary.CurrentYearToDate.ServiceData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.InternalLaborAmount),
                                            };



                                        }

                                        @foreach (var location in internallocations)
                                        {

                                            decimal prevDateSales = 0;
                                            decimal currDateSales = 0;
                                            decimal prevMonthSales = 0;
                                            decimal currMonthSales = 0;
                                            decimal prevYearSales = 0;
                                            decimal currYearSales = 0;

                                            try
                                            {
                                                prevDateSales = internalpreviousDateSales.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                prevDateSales = 0;
                                            }

                                            try
                                            {
                                                currDateSales = internalcurrentDateSales.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                currDateSales = 0;
                                            }

                                            try
                                            {
                                                prevMonthSales = internalpreviousMonthlySales.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                prevMonthSales = 0;
                                            }

                                            try
                                            {
                                                currMonthSales = internalcurrentMonthlySales.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                currMonthSales = 0;
                                            }

                                            try
                                            {
                                                prevYearSales = internalpreviousYearlySales.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                prevYearSales = 0;
                                            }

                                            try
                                            {
                                                currYearSales = internalcurrentYearlySales.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                currYearSales = 0;
                                            }


                                            var dateDifference = currDateSales - prevDateSales;
                                            decimal datePercentChange = 0;
                                            if (prevDateSales > 0)
                                            {
                                                datePercentChange = dateDifference / prevDateSales;
                                            }

                                            var monthDifference = currMonthSales - prevMonthSales;
                                            decimal monthPercentChange = 0;
                                            if (prevMonthSales > 0)
                                            {
                                                monthPercentChange = monthDifference / prevMonthSales;
                                            }

                                            var yearDifference = currYearSales - prevYearSales;
                                            decimal yearPercentChange = 0;
                                            if (prevYearSales > 0)
                                            {
                                                yearPercentChange = yearDifference / prevYearSales;
                                            }

                                            var displayLocation = location;
                                            switch (location)
                                            {
                                                case "FOC":
                                                    displayLocation = "Annapolis Cadillac/Volkswagen";
                                                    break;
                                                case "FMM":
                                                    displayLocation = "Annapolis Mazda/Mitsubishi";
                                                    break;
                                                case "FTN":
                                                    displayLocation = "Chambersburg";
                                                    break;
                                                case "CJE":
                                                    displayLocation = "Clearwater Chrysler/Jeep";
                                                    break;
                                                case "CHY":
                                                    displayLocation = "Clearwater Hyundai/Subaru";
                                                    break;
                                                case "CDO":
                                                    displayLocation = "Rockville Hyundai";
                                                    break;
                                                case "FAM":
                                                    displayLocation = "Frederick";
                                                    break;
                                                case "LFM":
                                                    displayLocation = "Germantown";
                                                    break;
                                                case "FHT":
                                                    displayLocation = "Hagerstown Chrysler";
                                                    break;
                                                case "FHG":
                                                    displayLocation = "Hagerstown GM";
                                                    break;
                                                case "LFT":
                                                    displayLocation = "Gaitherburg Toyota";
                                                    break;
                                                case "LFO":
                                                    displayLocation = "Gaithersburg Hyundai/Subaru";
                                                    break;
                                                case "FLP":
                                                    displayLocation = "Lexington Park";
                                                    break;
                                                case "FBN":
                                                    displayLocation = "Rockville Buick/GMC";
                                                    break;
                                                case "FBS":
                                                    displayLocation = "Rockville Subaru";
                                                    break;
                                                case "WDC":
                                                    displayLocation = "Wheaton";
                                                    break;
                                            }




                                            <tr>
                                                <td class="text-right divider-column" style="width:330px">@displayLocation</td>
                                                <td class="text-right">@prevDateSales.ToString("C")</td>
                                                <td class="text-right">@currDateSales.ToString("C")</td>
                                                <td class="text-right">@dateDifference.ToString("C")</td>
                                                <td class="text-right divider-column">@datePercentChange.ToString("P")</td>
                                                <td class="text-right">@prevMonthSales.ToString("C")</td>
                                                <td class="text-right">@currMonthSales.ToString("C")</td>
                                                <td class="text-right">@monthDifference.ToString("C")</td>
                                                <td class="text-right divider-column">@monthPercentChange.ToString("P")</td>
                                                <td class="text-right">@prevYearSales.ToString("C")</td>
                                                <td class="text-right">@currYearSales.ToString("C")</td>
                                                <td class="text-right">@yearDifference.ToString("C")</td>
                                                <td class="text-right divider-column">@yearPercentChange.ToString("P")</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>

                            </td>

                        </tr>   
                        <tr>
                            <td class="text-right divider-column"><strong><a data-toggle="collapse" id="deal-location" style="cursor: pointer;" data-target="#collapse-totallbr-location"><strong>Total Labor Amount <i class="fa fa-caret-down" aria-hidden="true"></i></strong></a></strong></td>

                            <td class="text-right">@Model.ServiceSummary.PreviousDate.TotalLaborAmount.ToString("C")</td>
                            <td class="text-right">@Model.ServiceSummary.CurrentDate.TotalLaborAmount.ToString("C")</td>
                            <td class="text-right">@dayDifferenceTotalLaborAmount.ToString("C")</td>
                            <td class="text-center divider-column">@dayPercentageTotalLaborAmount.ToString("P")</td>

                            <td class="text-right">@Model.ServiceSummary.PreviousMonthToDate.TotalLaborAmount.ToString("C")</td>
                            <td class="text-right">@Model.ServiceSummary.CurrentMonthToDate.TotalLaborAmount.ToString("C")</td>
                            <td class="text-right">@monthDifferenceTotalLaborAmount.ToString("C")</td>
                            <td class="text-center divider-column">@monthPercentageTotalLaborAmount.ToString("P")</td>

                            <td class="text-right">@Model.ServiceSummary.PreviousYearToDate.TotalLaborAmount.ToString("C")</td>
                            <td class="text-right">@Model.ServiceSummary.CurrentYearToDate.TotalLaborAmount.ToString("C")</td>
                            <td class="text-right">@yearDifferenceTotalLaborAmount.ToString("C")</td>
                            <td class="text-center divider-column">@yearPercentageTotalLaborAmount.ToString("P")</td>

                        </tr>  
                        <tr id="collapse-totallbr-location" class="collapse out" style="background-color:#e2e2e2">
                            @{

                                var totallocations = Model.ServiceSummary.CurrentYearToDate.ServiceData.OrderBy(x => x.Location).Select(x => x.Location).Distinct().ToList();

                            }

                            <td colspan="13">
                                <table class="table table-bordered">
                                    <thead>
                                        <tr>
                                            <th class="text-center divider-column" style="width:330px">Locations</th>
                                            <th class="text-center">@Model.ServiceSummary.PreviousDate.StartDate.ToShortDateString()</th>
                                            <th class="text-center">@Model.ServiceSummary.CurrentDate.StartDate.ToShortDateString()</th>
                                            <th class="text-center">Difference</th>
                                            <th class="text-center divider-column">% Change</th>

                                            <th class="text-center">@Model.ServiceSummary.PreviousMonthToDate.StartDate.ToShortDateString() -<br /> @Model.ServiceSummary.PreviousMonthToDate.EndDate.ToShortDateString()</th>
                                            <th class="text-center">@Model.ServiceSummary.CurrentMonthToDate.StartDate.ToShortDateString() -<br /> @Model.ServiceSummary.CurrentMonthToDate.EndDate.ToShortDateString()</th>
                                            <th class="text-center">Difference</th>
                                            <th class="text-center divider-column">% Change</th>

                                            <th class="text-center">@Model.ServiceSummary.PreviousYearToDate.StartDate.ToShortDateString() -<br /> @Model.ServiceSummary.PreviousYearToDate.EndDate.ToShortDateString()</th>
                                            <th class="text-center">@Model.ServiceSummary.CurrentYearToDate.StartDate.ToShortDateString() -<br /> @Model.ServiceSummary.CurrentYearToDate.EndDate.ToShortDateString()</th>
                                            <th class="text-center">Difference</th>
                                            <th class="text-center divider-column">% Change</th>

                                        </tr>
                                    </thead>
                                    <tbody>
                                        @{
                                            var ttlpreviousDateSales =
                                            from sales in Model.ServiceSummary.PreviousDate.ServiceData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.TotalLaborAmount),
                                            };

                                            ///////////////////////////////////////////////


                                            var ttlcurrentDateSales =
                                            from sales in Model.ServiceSummary.CurrentDate.ServiceData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.TotalLaborAmount),
                                            };


                                            ///////////////////////////////////////////////

                                            var ttlpreviousMonthlySales =
                                            from sales in Model.ServiceSummary.PreviousMonthToDate.ServiceData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.TotalLaborAmount),
                                            };


                                            ///////////////////////////////////////////////

                                            var ttlcurrentMonthlySales =
                                            from sales in Model.ServiceSummary.CurrentMonthToDate.ServiceData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.TotalLaborAmount),
                                            };


                                            ///////////////////////////////////////////////

                                            var ttlpreviousYearlySales =
                                            from sales in Model.ServiceSummary.PreviousYearToDate.ServiceData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.TotalLaborAmount),
                                            };

                                            ///////////////////////////////////////////////

                                            var ttlcurrentYearlySales =
                                            from sales in Model.ServiceSummary.CurrentYearToDate.ServiceData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.TotalLaborAmount),
                                            };



                                        }

                                        @foreach (var location in totallocations)
                                        {

                                            decimal prevDateSales = 0;
                                            decimal currDateSales = 0;
                                            decimal prevMonthSales = 0;
                                            decimal currMonthSales = 0;
                                            decimal prevYearSales = 0;
                                            decimal currYearSales = 0;

                                            try
                                            {
                                                prevDateSales = ttlpreviousDateSales.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                prevDateSales = 0;
                                            }

                                            try
                                            {
                                                currDateSales = ttlcurrentDateSales.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                currDateSales = 0;
                                            }

                                            try
                                            {
                                                prevMonthSales = ttlpreviousMonthlySales.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                prevMonthSales = 0;
                                            }

                                            try
                                            {
                                                currMonthSales = ttlcurrentMonthlySales.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                currMonthSales = 0;
                                            }

                                            try
                                            {
                                                prevYearSales = ttlpreviousYearlySales.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                prevYearSales = 0;
                                            }

                                            try
                                            {
                                                currYearSales = ttlcurrentYearlySales.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                currYearSales = 0;
                                            }


                                            var dateDifference = currDateSales - prevDateSales;
                                            decimal datePercentChange = 0;
                                            if (prevDateSales > 0)
                                            {
                                                datePercentChange = dateDifference / prevDateSales;
                                            }

                                            var monthDifference = currMonthSales - prevMonthSales;
                                            decimal monthPercentChange = 0;
                                            if (prevMonthSales > 0)
                                            {
                                                monthPercentChange = monthDifference / prevMonthSales;
                                            }

                                            var yearDifference = currYearSales - prevYearSales;
                                            decimal yearPercentChange = 0;
                                            if (prevYearSales > 0)
                                            {
                                                yearPercentChange = yearDifference / prevYearSales;
                                            }

                                            var displayLocation = location;
                                            switch (location)
                                            {
                                                case "FOC":
                                                    displayLocation = "Annapolis Cadillac/Volkswagen";
                                                    break;
                                                case "FMM":
                                                    displayLocation = "Annapolis Mazda/Mitsubishi";
                                                    break;
                                                case "FTN":
                                                    displayLocation = "Chambersburg";
                                                    break;
                                                case "CJE":
                                                    displayLocation = "Clearwater Chrysler/Jeep";
                                                    break;
                                                case "CHY":
                                                    displayLocation = "Clearwater Hyundai/Subaru";
                                                    break;
                                                case "CDO":
                                                    displayLocation = "Rockville Hyundai";
                                                    break;
                                                case "FAM":
                                                    displayLocation = "Frederick";
                                                    break;
                                                case "LFM":
                                                    displayLocation = "Germantown";
                                                    break;
                                                case "FHT":
                                                    displayLocation = "Hagerstown Chrysler";
                                                    break;
                                                case "FHG":
                                                    displayLocation = "Hagerstown GM";
                                                    break;
                                                case "LFT":
                                                    displayLocation = "Gaitherburg Toyota";
                                                    break;
                                                case "LFO":
                                                    displayLocation = "Gaithersburg Hyundai/Subaru";
                                                    break;
                                                case "FLP":
                                                    displayLocation = "Lexington Park";
                                                    break;
                                                case "FBN":
                                                    displayLocation = "Rockville Buick/GMC";
                                                    break;
                                                case "FBS":
                                                    displayLocation = "Rockville Subaru";
                                                    break;
                                                case "WDC":
                                                    displayLocation = "Wheaton";
                                                    break;
                                            }




                                            <tr>
                                                <td class="text-right divider-column" style="width:330px">@displayLocation</td>
                                                <td class="text-right">@prevDateSales.ToString("C")</td>
                                                <td class="text-right">@currDateSales.ToString("C")</td>
                                                <td class="text-right">@dateDifference.ToString("C")</td>
                                                <td class="text-right divider-column">@datePercentChange.ToString("P")</td>
                                                <td class="text-right">@prevMonthSales.ToString("C")</td>
                                                <td class="text-right">@currMonthSales.ToString("C")</td>
                                                <td class="text-right">@monthDifference.ToString("C")</td>
                                                <td class="text-right divider-column">@monthPercentChange.ToString("P")</td>
                                                <td class="text-right">@prevYearSales.ToString("C")</td>
                                                <td class="text-right">@currYearSales.ToString("C")</td>
                                                <td class="text-right">@yearDifference.ToString("C")</td>
                                                <td class="text-right divider-column">@yearPercentChange.ToString("P")</td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>

                            </td>

                        </tr>                                            
                    </tbody>
                    <tfoot></tfoot>
                </table>
                <p><a class="btn btn-primary" href="@applicationPath/Service">Analyze &raquo;</a></p>
            </div>
        </div>
                                            }
                                            if (Model.SalesSummary != null)
                                            {
        <div class="row">
            <div class="col-md-12">
                <h2>Sales for @Model.VehicleCondition vehicles</h2>
                <hr />
                <div class="row">
                    <div class="col-md-12" style="margin-bottom:10px;">
                        <strong>
                            Vehicle Condition: @Html.RadioButtonFor(x => Model.VehicleCondition, "ALL", new { style = "margin-left:10px;" }) All
                            @Html.RadioButtonFor(x => Model.VehicleCondition, "NEW", new { style = "margin-left:10px;" }) New @Html.RadioButtonFor(x => Model.VehicleCondition, "USED", new { style = "margin-left:10px;" }) Used
                        </strong> <button class="btn btn-primary" type="submit" value="submit" name="Submit" style="margin-left:15px;">Submit</button>
                    </div>
                </div>
                    <table class="table table-condensed table-bordered" id="sales-summary">
                    <thead>
                        <tr style="background-color:#d9edf7">
                            <th class="text-center"></th>
                            <th class="text-center" colspan="4">Daily</th>
                            <th class="text-center" colspan="4">Monthly</th>
                            <th class="text-center" colspan="4">Yearly</th>
                        </tr>
                        <tr style="background-color:#d9edf7">
                            <th class="text-center divider-column">Sales Items</th>

                            <th class="text-center">@Model.SalesSummary.PreviousDate.StartDate.ToShortDateString()</th>
                            <th class="text-center">@Model.SalesSummary.CurrentDate.StartDate.ToShortDateString()</th>
                            <th class="text-center">Difference</th>
                            <th class="text-center divider-column">% Change</th>

                            <th class="text-center">MTD @System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(@Model.SalesSummary.PreviousMonthToDate.FiscalDate.Month) @Model.SalesSummary.PreviousYearToDate.EndDate.Year</th>
                            <th class="text-center">MTD @System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(@Model.SalesSummary.CurrentMonthToDate.FiscalDate.Month) @Model.SalesSummary.CurrentYearToDate.EndDate.Year</th>
                            <th class="text-center">Difference</th>
                            <th class="text-center divider-column">% Change</th>

                            <th class="text-center">YTD @Model.SalesSummary.PreviousYearToDate.EndDate.Year</th>
                            <th class="text-center">YTD @Model.SalesSummary.CurrentYearToDate.EndDate.Year</th>
                            <th class="text-center">Difference</th>
                            <th class="text-center divider-column">% Change</th>


                            @*<th class="text-center">Previous Year<br />Week To Date</th>
                                <th class="text-center">Week To Date</th>
                                <th class="text-center">Difference</th>
                                <th class="text-center divider-column">% Change</th>*@


                        </tr>
                    </thead>
                    <tbody>
    @{
        var grossChangeDate = new DateTime(2020, 1, 1);


        //if (currentSelectedDate > grossChangeDate)
        //{
        //    totalBackGrossAmount += TotalBackGrossItemAmount;
        //}


        decimal yearDifferenceDealCount = Model.SalesSummary.CurrentYearToDate.DealCount - Model.SalesSummary.PreviousYearToDate.DealCount;
        decimal monthDifferenceDealCount = Model.SalesSummary.CurrentMonthToDate.DealCount - Model.SalesSummary.PreviousMonthToDate.DealCount;
        decimal dayDifferenceDealCount = Model.SalesSummary.CurrentDate.DealCount - Model.SalesSummary.PreviousDate.DealCount;


        decimal yearPercentageDealCount = yearDifferenceDealCount / Model.SalesSummary.PreviousYearToDate.DealCount;
        decimal monthPercentageDealCount = monthDifferenceDealCount / Model.SalesSummary.PreviousMonthToDate.DealCount;

        decimal dayPercentageDealCount = 0;
        if (Model.SalesSummary.PreviousDate.DealCount > 0)
        {
            dayPercentageDealCount = dayDifferenceDealCount / Model.SalesSummary.PreviousDate.DealCount;
        }

        decimal DayFrontPVRAmount = 0;
        decimal DayBackPVRAmount = 0;
        decimal DayTotalPVRAmount = 0;

        if (Model.SalesSummary.CurrentDate.DealCount > 0)
        {
            decimal bkGrossAmount = Model.SalesSummary.CurrentDate.FinanceAmount + Model.SalesSummary.CurrentDate.ServiceContractAmount + Model.SalesSummary.CurrentDate.GapAmount + Model.SalesSummary.CurrentDate.MaintenanceAmount;

            if (Model.SalesSummary.CurrentDate.StartDate > grossChangeDate)
            {
                bkGrossAmount += Model.SalesSummary.CurrentDate.BackGrossAmount;
            }

            DayFrontPVRAmount = Model.SalesSummary.CurrentDate.GrossAmount / Model.SalesSummary.CurrentDate.DealCount;
            DayBackPVRAmount = (bkGrossAmount) / Model.SalesSummary.CurrentDate.DealCount;
            DayTotalPVRAmount = (Model.SalesSummary.CurrentDate.GrossAmount + bkGrossAmount) / Model.SalesSummary.CurrentDate.DealCount;
        }

        decimal MonthFrontPVRAmount = 0;
        decimal MonthBackPVRAmount = 0;
        decimal MonthTotalPVRAmount = 0;

        if (Model.SalesSummary.CurrentMonthToDate.DealCount > 0)
        {
            decimal bkGrossAmount = Model.SalesSummary.CurrentMonthToDate.FinanceAmount + Model.SalesSummary.CurrentMonthToDate.ServiceContractAmount + Model.SalesSummary.CurrentMonthToDate.GapAmount + Model.SalesSummary.CurrentMonthToDate.MaintenanceAmount;

            if (Model.SalesSummary.CurrentMonthToDate.StartDate > grossChangeDate)
            {
                bkGrossAmount += Model.SalesSummary.CurrentMonthToDate.BackGrossAmount;
            }

            MonthFrontPVRAmount = Model.SalesSummary.CurrentMonthToDate.GrossAmount / Model.SalesSummary.CurrentMonthToDate.DealCount;
            MonthBackPVRAmount = (bkGrossAmount) / Model.SalesSummary.CurrentMonthToDate.DealCount;
            MonthTotalPVRAmount = (Model.SalesSummary.CurrentMonthToDate.GrossAmount + bkGrossAmount) / Model.SalesSummary.CurrentMonthToDate.DealCount;

        }

        decimal YearFrontPVRAmount = 0;
        decimal YearBackPVRAmount = 0;
        decimal YearTotalPVRAmount = 0;

        if (Model.SalesSummary.CurrentYearToDate.DealCount > 0)
        {
            decimal bkGrossAmount = Model.SalesSummary.CurrentYearToDate.FinanceAmount + Model.SalesSummary.CurrentYearToDate.ServiceContractAmount + Model.SalesSummary.CurrentYearToDate.GapAmount + Model.SalesSummary.CurrentYearToDate.MaintenanceAmount;

            if (Model.SalesSummary.CurrentYearToDate.StartDate > grossChangeDate)
            {
                bkGrossAmount += Model.SalesSummary.CurrentYearToDate.BackGrossAmount;
            }

            YearFrontPVRAmount = Model.SalesSummary.CurrentYearToDate.GrossAmount / Model.SalesSummary.CurrentYearToDate.DealCount;
            YearBackPVRAmount = (bkGrossAmount) / Model.SalesSummary.CurrentYearToDate.DealCount;
            YearTotalPVRAmount = (Model.SalesSummary.CurrentYearToDate.GrossAmount + bkGrossAmount) / Model.SalesSummary.CurrentYearToDate.DealCount;

        }


        decimal prevDayFrontPVRAmount = 0;
        decimal prevDayBackPVRAmount = 0;
        decimal prevDayTotalPVRAmount = 0;

        if (Model.SalesSummary.PreviousDate.DealCount > 0)
        {
            decimal bkGrossAmount = Model.SalesSummary.PreviousDate.FinanceAmount + Model.SalesSummary.PreviousDate.ServiceContractAmount + Model.SalesSummary.PreviousDate.GapAmount + Model.SalesSummary.PreviousDate.MaintenanceAmount;

            if (Model.SalesSummary.PreviousDate.StartDate > grossChangeDate)
            {
                bkGrossAmount += Model.SalesSummary.PreviousDate.BackGrossAmount;
            }

            prevDayFrontPVRAmount = Model.SalesSummary.PreviousDate.GrossAmount / Model.SalesSummary.PreviousDate.DealCount;
            prevDayBackPVRAmount = (bkGrossAmount) / Model.SalesSummary.PreviousDate.DealCount;
            prevDayTotalPVRAmount = (Model.SalesSummary.PreviousDate.GrossAmount + bkGrossAmount) / Model.SalesSummary.PreviousDate.DealCount;

        }

        decimal prevMonthFrontPVRAmount = 0;
        decimal prevMonthBackPVRAmount = 0;
        decimal prevMonthTotalPVRAmount = 0;

        if (Model.SalesSummary.PreviousMonthToDate.DealCount > 0)
        {
            decimal bkGrossAmount = Model.SalesSummary.PreviousMonthToDate.FinanceAmount + Model.SalesSummary.PreviousMonthToDate.ServiceContractAmount + Model.SalesSummary.PreviousMonthToDate.GapAmount + Model.SalesSummary.PreviousMonthToDate.MaintenanceAmount;

            if (Model.SalesSummary.PreviousMonthToDate.StartDate > grossChangeDate)
            {
                bkGrossAmount += Model.SalesSummary.PreviousMonthToDate.BackGrossAmount;
            }

            prevMonthFrontPVRAmount = Model.SalesSummary.PreviousMonthToDate.GrossAmount / Model.SalesSummary.PreviousMonthToDate.DealCount;
            prevMonthBackPVRAmount = (bkGrossAmount) / Model.SalesSummary.PreviousMonthToDate.DealCount;
            prevMonthTotalPVRAmount = (Model.SalesSummary.PreviousMonthToDate.GrossAmount + bkGrossAmount) / Model.SalesSummary.PreviousMonthToDate.DealCount;

        }

        decimal prevYearFrontPVRAmount = 0;
        decimal prevYearBackPVRAmount = 0;
        decimal prevYearTotalPVRAmount = 0;

        if (Model.SalesSummary.PreviousYearToDate.DealCount > 0)
        {
            decimal bkGrossAmount = Model.SalesSummary.PreviousYearToDate.FinanceAmount + Model.SalesSummary.PreviousYearToDate.ServiceContractAmount + Model.SalesSummary.PreviousYearToDate.GapAmount + Model.SalesSummary.PreviousYearToDate.MaintenanceAmount;

            if (Model.SalesSummary.PreviousYearToDate.StartDate > grossChangeDate)
            {
                bkGrossAmount += Model.SalesSummary.PreviousYearToDate.BackGrossAmount;
            }

            prevYearFrontPVRAmount = Model.SalesSummary.PreviousYearToDate.GrossAmount / Model.SalesSummary.PreviousYearToDate.DealCount;
            prevYearBackPVRAmount = (bkGrossAmount) / Model.SalesSummary.PreviousYearToDate.DealCount;
            prevYearTotalPVRAmount = (Model.SalesSummary.PreviousYearToDate.GrossAmount + bkGrossAmount) / Model.SalesSummary.PreviousYearToDate.DealCount;

        }

        System.Globalization.NumberFormatInfo nfi = new System.Globalization.CultureInfo("en-US", false).NumberFormat;
        nfi.CurrencyDecimalDigits = 0;
        nfi.PercentDecimalDigits = 2;
        nfi.CurrencySymbol = "$";

        decimal DayFrontPVRDifference = 0;
        DayFrontPVRDifference = DayFrontPVRAmount - prevDayFrontPVRAmount;

        decimal MonthFrontPVRDifference = 0;
        MonthFrontPVRDifference = MonthFrontPVRAmount - prevMonthFrontPVRAmount;

        decimal YearFrontPVRDifference = 0;
        YearFrontPVRDifference = YearFrontPVRAmount - prevYearFrontPVRAmount;

        decimal DayBackPVRDifference = 0;
        DayBackPVRDifference = DayBackPVRAmount - prevDayBackPVRAmount;

        decimal MonthBackPVRDifference = 0;
        MonthBackPVRDifference = MonthBackPVRAmount - prevMonthBackPVRAmount;

        decimal YearBackPVRDifference = 0;
        YearBackPVRDifference = YearBackPVRAmount - prevYearBackPVRAmount;

        decimal DayTotalPVRDifference = 0;
        DayTotalPVRDifference = DayTotalPVRAmount - prevDayTotalPVRAmount;

        decimal MonthTotalPVRDifference = 0;
        MonthTotalPVRDifference = MonthTotalPVRAmount - prevMonthTotalPVRAmount;

        decimal YearTotalPVRDifference = 0;
        YearTotalPVRDifference = YearTotalPVRAmount - prevYearTotalPVRAmount;

        decimal DayFinancePVRAmount = 0;
        decimal MonthFinancePVRAmount = 0;
        decimal YearFinancePVRAmount = 0;

        if (Model.SalesSummary.CurrentDate.FinanceCount > 0)
        {
            DayFinancePVRAmount = Model.SalesSummary.CurrentDate.FinanceAmount / Model.SalesSummary.CurrentDate.FinanceCount;
        }

        if (Model.SalesSummary.CurrentMonthToDate.FinanceCount > 0)
        {
            MonthFinancePVRAmount = Model.SalesSummary.CurrentMonthToDate.FinanceAmount / Model.SalesSummary.CurrentMonthToDate.FinanceCount;
        }

        if (Model.SalesSummary.CurrentYearToDate.FinanceCount > 0)
        {
            YearFinancePVRAmount = Model.SalesSummary.CurrentYearToDate.FinanceAmount / Model.SalesSummary.CurrentYearToDate.FinanceCount;
        }

        decimal prevDayFinancePVRAmount = 0;
        decimal prevMonthFinancePVRAmount = 0;
        decimal prevYearFinancePVRAmount = 0;

        if (Model.SalesSummary.PreviousDate.FinanceCount > 0)
        {
            prevDayFinancePVRAmount = Model.SalesSummary.PreviousDate.FinanceAmount / Model.SalesSummary.PreviousDate.FinanceCount;
        }

        if (Model.SalesSummary.PreviousMonthToDate.FinanceCount > 0)
        {
            prevMonthFinancePVRAmount = Model.SalesSummary.PreviousMonthToDate.FinanceAmount / Model.SalesSummary.PreviousMonthToDate.FinanceCount;
        }

        if (Model.SalesSummary.PreviousYearToDate.FinanceCount > 0)
        {
            prevYearFinancePVRAmount = Model.SalesSummary.PreviousYearToDate.FinanceAmount / Model.SalesSummary.PreviousYearToDate.FinanceCount;
        }


        decimal DayFinancePercent = 0;
        decimal MonthFinancePercent = 0;
        decimal YearFinancePercent = 0;

        if (Model.SalesSummary.CurrentDate.DealCount > 0)
        {
            DayFinancePercent = Model.SalesSummary.CurrentDate.FinanceCount / Model.SalesSummary.CurrentDate.DealCount;
        }

        if (Model.SalesSummary.CurrentMonthToDate.DealCount > 0)
        {
            MonthFinancePercent = Model.SalesSummary.CurrentMonthToDate.FinanceCount / Model.SalesSummary.CurrentMonthToDate.DealCount;
        }

        if (Model.SalesSummary.CurrentYearToDate.DealCount > 0)
        {
            YearFinancePercent = Model.SalesSummary.CurrentYearToDate.FinanceCount / Model.SalesSummary.CurrentYearToDate.DealCount;
        }


        decimal prevDayFinancePercent = 0;
        decimal prevMonthFinancePercent = 0;
        decimal prevYearFinancePercent = 0;

        if (Model.SalesSummary.PreviousDate.DealCount > 0)
        {
            prevDayFinancePercent = Model.SalesSummary.PreviousDate.FinanceCount / Model.SalesSummary.PreviousDate.DealCount;
        }

        if (Model.SalesSummary.PreviousMonthToDate.DealCount > 0)
        {
            prevMonthFinancePercent = Model.SalesSummary.PreviousMonthToDate.FinanceCount / Model.SalesSummary.PreviousMonthToDate.DealCount;
        }

        if (Model.SalesSummary.PreviousYearToDate.DealCount > 0)
        {
            prevYearFinancePercent = Model.SalesSummary.PreviousYearToDate.FinanceCount / Model.SalesSummary.PreviousYearToDate.DealCount;
        }

        decimal DayBPPPVRAmount = 0;
        decimal MonthBPPPVRAmount = 0;
        decimal YearBPPPVRAmount = 0;

        if (Model.SalesSummary.CurrentDate.BPPCount > 0)
        {
            DayBPPPVRAmount = Model.SalesSummary.CurrentDate.BPPAmount / Model.SalesSummary.CurrentDate.BPPCount;
        }

        if (Model.SalesSummary.CurrentMonthToDate.BPPCount > 0)
        {
            MonthBPPPVRAmount = Model.SalesSummary.CurrentMonthToDate.BPPAmount / Model.SalesSummary.CurrentMonthToDate.BPPCount;
        }

        if (Model.SalesSummary.CurrentYearToDate.BPPCount > 0)
        {
            YearBPPPVRAmount = Model.SalesSummary.CurrentYearToDate.BPPAmount / Model.SalesSummary.CurrentYearToDate.BPPCount;
        }

        decimal prevDayBPPPVRAmount = 0;
        decimal prevMonthBPPPVRAmount = 0;
        decimal prevYearBPPPVRAmount = 0;

        if (Model.SalesSummary.PreviousDate.BPPCount > 0)
        {
            prevDayBPPPVRAmount = Model.SalesSummary.PreviousDate.BPPAmount / Model.SalesSummary.PreviousDate.BPPCount;
        }

        if (Model.SalesSummary.PreviousMonthToDate.BPPCount > 0)
        {
            prevMonthBPPPVRAmount = Model.SalesSummary.PreviousMonthToDate.BPPAmount / Model.SalesSummary.PreviousMonthToDate.BPPCount;
        }

        if (Model.SalesSummary.PreviousYearToDate.BPPCount > 0)
        {
            prevYearBPPPVRAmount = Model.SalesSummary.PreviousYearToDate.BPPAmount / Model.SalesSummary.PreviousYearToDate.BPPCount;
        }

        decimal DayBPPPercent = 0;
        decimal MonthBPPPercent = 0;
        decimal YearBPPPercent = 0;

        if (Model.SalesSummary.CurrentDate.DealCount > 0)
        {
            DayBPPPercent = Model.SalesSummary.CurrentDate.BPPCount / Model.SalesSummary.CurrentDate.DealCount;
        }

        if (Model.SalesSummary.CurrentMonthToDate.DealCount > 0)
        {
            MonthBPPPercent = Model.SalesSummary.CurrentMonthToDate.BPPCount / Model.SalesSummary.CurrentMonthToDate.DealCount;
        }

        if (Model.SalesSummary.CurrentYearToDate.DealCount > 0)
        {
            YearBPPPercent = Model.SalesSummary.CurrentYearToDate.BPPCount / Model.SalesSummary.CurrentYearToDate.DealCount;
        }


        decimal prevDayBPPPercent = 0;
        decimal prevMonthBPPPercent = 0;
        decimal prevYearBPPPercent = 0;

        if (Model.SalesSummary.PreviousDate.DealCount > 0)
        {
            prevDayBPPPercent = Model.SalesSummary.PreviousDate.BPPCount / Model.SalesSummary.PreviousDate.DealCount;
        }

        if (Model.SalesSummary.PreviousMonthToDate.DealCount > 0)
        {
            prevMonthBPPPercent = Model.SalesSummary.PreviousMonthToDate.BPPCount / Model.SalesSummary.PreviousMonthToDate.DealCount;
        }

        if (Model.SalesSummary.PreviousYearToDate.DealCount > 0)
        {
            prevYearBPPPercent = Model.SalesSummary.PreviousYearToDate.BPPCount / Model.SalesSummary.PreviousYearToDate.DealCount;
        }


        decimal DayServiceContractPVRAmount = 0;
        decimal MonthServiceContractPVRAmount = 0;
        decimal YearServiceContractPVRAmount = 0;

        if (Model.SalesSummary.CurrentDate.ServiceContractCount > 0)
        {
            DayServiceContractPVRAmount = Model.SalesSummary.CurrentDate.ServiceContractAmount / Model.SalesSummary.CurrentDate.ServiceContractCount;
        }

        if (Model.SalesSummary.CurrentMonthToDate.ServiceContractCount > 0)
        {
            MonthServiceContractPVRAmount = Model.SalesSummary.CurrentMonthToDate.ServiceContractAmount / Model.SalesSummary.CurrentMonthToDate.ServiceContractCount;
        }

        if (Model.SalesSummary.CurrentYearToDate.ServiceContractCount > 0)
        {
            YearServiceContractPVRAmount = Model.SalesSummary.CurrentYearToDate.ServiceContractAmount / Model.SalesSummary.CurrentYearToDate.ServiceContractCount;
        }

        decimal prevDayServiceContractPVRAmount = 0;
        decimal prevMonthServiceContractPVRAmount = 0;
        decimal prevYearServiceContractPVRAmount = 0;

        if (Model.SalesSummary.PreviousDate.ServiceContractCount > 0)
        {
            prevDayServiceContractPVRAmount = Model.SalesSummary.PreviousDate.ServiceContractAmount / Model.SalesSummary.PreviousDate.ServiceContractCount;
        }

        if (Model.SalesSummary.PreviousMonthToDate.ServiceContractCount > 0)
        {
            prevMonthServiceContractPVRAmount = Model.SalesSummary.PreviousMonthToDate.ServiceContractAmount / Model.SalesSummary.PreviousMonthToDate.ServiceContractCount;
        }

        if (Model.SalesSummary.PreviousYearToDate.ServiceContractCount > 0)
        {
            prevYearServiceContractPVRAmount = Model.SalesSummary.PreviousYearToDate.ServiceContractAmount / Model.SalesSummary.PreviousYearToDate.ServiceContractCount;
        }


        decimal DayServiceContractPercent = 0;
        decimal MonthServiceContractPercent = 0;
        decimal YearServiceContractPercent = 0;

        if (Model.SalesSummary.CurrentDate.DealCount > 0)
        {
            DayServiceContractPercent = Model.SalesSummary.CurrentDate.ServiceContractCount / Model.SalesSummary.CurrentDate.DealCount;
        }

        if (Model.SalesSummary.CurrentMonthToDate.DealCount > 0)
        {
            MonthServiceContractPercent = Model.SalesSummary.CurrentMonthToDate.ServiceContractCount / Model.SalesSummary.CurrentMonthToDate.DealCount;
        }

        if (Model.SalesSummary.CurrentYearToDate.DealCount > 0)
        {
            YearServiceContractPercent = Model.SalesSummary.CurrentYearToDate.ServiceContractCount / Model.SalesSummary.CurrentYearToDate.DealCount;
        }


        decimal prevDayServiceContractPercent = 0;
        decimal prevMonthServiceContractPercent = 0;
        decimal prevYearServiceContractPercent = 0;

        if (Model.SalesSummary.PreviousDate.DealCount > 0)
        {
            prevDayServiceContractPercent = Model.SalesSummary.PreviousDate.ServiceContractCount / Model.SalesSummary.PreviousDate.DealCount;
        }

        if (Model.SalesSummary.PreviousMonthToDate.DealCount > 0)
        {
            prevMonthServiceContractPercent = Model.SalesSummary.PreviousMonthToDate.ServiceContractCount / Model.SalesSummary.PreviousMonthToDate.DealCount;
        }

        if (Model.SalesSummary.PreviousYearToDate.DealCount > 0)
        {
            prevYearServiceContractPercent = Model.SalesSummary.PreviousYearToDate.ServiceContractCount / Model.SalesSummary.PreviousYearToDate.DealCount;
        }


        decimal DayFinancePVRDifference = 0;
        DayFinancePVRDifference = DayFinancePVRAmount - prevDayFinancePVRAmount;

        decimal MonthFinancePVRDifference = 0;
        MonthFinancePVRDifference = MonthFinancePVRAmount - prevMonthFinancePVRAmount;

        decimal YearFinancePVRDifference = 0;
        YearFinancePVRDifference = YearFinancePVRAmount - prevYearFinancePVRAmount;

        decimal DayBPPPVRDifference = 0;
        DayBPPPVRDifference = DayBPPPVRAmount - prevDayBPPPVRAmount;

        decimal MonthBPPPVRDifference = 0;
        MonthBPPPVRDifference = MonthBPPPVRAmount - prevMonthBPPPVRAmount;

        decimal YearBPPPVRDifference = 0;
        YearBPPPVRDifference = YearBPPPVRAmount - prevYearBPPPVRAmount;

        decimal DayServiceContractPVRDifference = 0;
        DayServiceContractPVRDifference = DayServiceContractPVRAmount - prevDayServiceContractPVRAmount;

        decimal MonthServiceContractPVRDifference = 0;
        MonthServiceContractPVRDifference = MonthServiceContractPVRAmount - prevMonthServiceContractPVRAmount;

        decimal YearServiceContractPVRDifference = 0;
        YearServiceContractPVRDifference = YearServiceContractPVRAmount - prevYearServiceContractPVRAmount;


        decimal DayFinancePercentDifference = 0;
        DayFinancePercentDifference = DayFinancePercent - prevDayFinancePercent;

        decimal MonthFinancePercentDifference = 0;
        MonthFinancePercentDifference = MonthFinancePercent - prevMonthFinancePercent;

        decimal YearFinancePercentDifference = 0;
        YearFinancePercentDifference = YearFinancePercent - prevYearFinancePercent;

        decimal DayBPPPercentDifference = 0;
        DayBPPPercentDifference = DayBPPPercent - prevDayBPPPercent;

        decimal MonthBPPPercentDifference = 0;
        MonthBPPPercentDifference = MonthBPPPercent - prevMonthBPPPercent;

        decimal YearBPPPercentDifference = 0;
        YearBPPPercentDifference = YearBPPPercent - prevYearBPPPercent;

        decimal DayServiceContractPercentDifference = 0;
        DayServiceContractPercentDifference = DayServiceContractPercent - prevDayServiceContractPercent;

        decimal MonthServiceContractPercentDifference = 0;
        MonthServiceContractPercentDifference = MonthServiceContractPercent - prevMonthServiceContractPercent;

        decimal YearServiceContractPercentDifference = 0;
        YearServiceContractPercentDifference = YearServiceContractPercent - prevYearServiceContractPercent;


        decimal yearPercentageFrontPVR = YearFrontPVRDifference / prevYearFrontPVRAmount;
        decimal monthPercentageFrontPVR = MonthFrontPVRDifference / prevMonthFrontPVRAmount;

        decimal dayPercentageFrontPVR = 0;
        if (prevDayFrontPVRAmount > 0)
        {
            dayPercentageFrontPVR = DayFrontPVRDifference / prevDayFrontPVRAmount;
        }
        decimal yearPercentageBackPVR = YearBackPVRDifference / prevYearBackPVRAmount;
        decimal monthPercentageBackPVR = MonthBackPVRDifference / prevMonthBackPVRAmount;

        decimal dayPercentageBackPVR = 0;
        if (prevDayBackPVRAmount > 0)
        {
            dayPercentageBackPVR = DayBackPVRDifference / prevDayBackPVRAmount;
        }

        decimal yearPercentageTotalPVR = YearTotalPVRDifference / prevYearTotalPVRAmount;
        decimal monthPercentageTotalPVR = MonthTotalPVRDifference / prevMonthTotalPVRAmount;

        decimal dayPercentageTotalPVR = 0;
        if (prevDayTotalPVRAmount > 0)
        {
            dayPercentageTotalPVR = DayTotalPVRDifference / prevDayTotalPVRAmount;
        }
        decimal yearPercentageFinancePVR = 0;
        decimal monthPercentageFinancePVR = 0;
        decimal dayPercentageFinancePVR = 0;


        if (prevYearFinancePVRAmount > 0)
        {
            yearPercentageFinancePVR = YearFinancePVRDifference / prevYearFinancePVRAmount;
        }

        if (prevMonthFinancePVRAmount > 0)
        {
            monthPercentageFinancePVR = MonthFinancePVRDifference / prevMonthFinancePVRAmount;
        }

        if (prevDayFinancePVRAmount > 0)
        {
            dayPercentageFinancePVR = DayFinancePVRDifference / prevDayFinancePVRAmount;
        }

        decimal yearPercentageBPPPVR = 0;
        decimal monthPercentageBPPPVR = 0;
        decimal dayPercentageBPPPVR = 0;

        if(prevYearBPPPVRAmount > 0)
        {
            yearPercentageBPPPVR = YearBPPPVRDifference / prevYearBPPPVRAmount;
        }

        if (prevMonthBPPPVRAmount > 0)
        {
            monthPercentageBPPPVR = MonthBPPPVRDifference / prevMonthBPPPVRAmount;
        }

        if (prevDayBPPPVRAmount > 0)
        {
            dayPercentageBPPPVR = DayBPPPVRDifference / prevDayBPPPVRAmount;
        }

        decimal yearPercentageServiceContractPVR = YearServiceContractPVRDifference / prevYearServiceContractPVRAmount;
        decimal monthPercentageServiceContractPVR = MonthServiceContractPVRDifference / prevMonthServiceContractPVRAmount;

        decimal dayPercentageServiceContractPVR = 0;
        if (prevDayServiceContractPVRAmount > 0)
        {
            dayPercentageServiceContractPVR = DayServiceContractPVRDifference / prevDayServiceContractPVRAmount;
        }



    }
    <tr style="background-color:#e2e2e2">
        <td class="text-right divider-column"><a data-toggle="collapse" id="deal-location" style="cursor: pointer;" data-target="#collapse-deal-location"><strong>Deal Count <i class="fa fa-caret-down" aria-hidden="true"></i></strong></a></td>

        <td class="text-right">@Model.SalesSummary.PreviousDate.DealCount</td>
        <td class="text-right">@Model.SalesSummary.CurrentDate.DealCount</td>
        <td class="text-right">@dayDifferenceDealCount</td>
        <td class="text-center divider-column">@dayPercentageDealCount.ToString("P")</td>

        <td class="text-right">@Model.SalesSummary.PreviousMonthToDate.DealCount</td>
        <td class="text-right">@Model.SalesSummary.CurrentMonthToDate.DealCount</td>
        <td class="text-right">@monthDifferenceDealCount</td>
        <td class="text-center divider-column">@monthPercentageDealCount.ToString("P")</td>

        <td class="text-right">@Model.SalesSummary.PreviousYearToDate.DealCount</td>
        <td class="text-right">@Model.SalesSummary.CurrentYearToDate.DealCount</td>
        <td class="text-right">@yearDifferenceDealCount</td>
        <td class="text-center divider-column">@yearPercentageDealCount.ToString("P")</td>

    </tr>
    <tr id="collapse-deal-location" class="collapse out" style="background-color:#e2e2e2">
        @{

            var locations = Model.SalesSummary.CurrentYearToDate.SalesData.OrderBy(x => x.Location).Select(x => x.Location).Distinct().ToList();
            var prevlocations = Model.SalesSummary.PreviousYearToDate.SalesData.OrderBy(x => x.Location).Select(x => x.Location).Distinct().ToList();

            foreach (var spot in prevlocations)
            {
                if (!locations.Contains(spot))
                {
                    locations.Add(spot);
                }
            }

        }

        <td colspan="13">
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th class="text-center divider-column" style="width:330px">Locations</th>
                        <th class="text-center">@Model.SalesSummary.PreviousDate.StartDate.ToShortDateString()</th>
                        <th class="text-center">@Model.SalesSummary.CurrentDate.StartDate.ToShortDateString()</th>
                        <th class="text-center">Difference</th>
                        <th class="text-center divider-column">% Change</th>

                        <th class="text-center">MTD @System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(@Model.SalesSummary.PreviousMonthToDate.FiscalDate.Month) @Model.SalesSummary.PreviousYearToDate.EndDate.Year</th>
                        <th class="text-center">MTD @System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(@Model.SalesSummary.CurrentMonthToDate.FiscalDate.Month) @Model.SalesSummary.CurrentYearToDate.EndDate.Year</th>
                        <th class="text-center">Difference</th>
                        <th class="text-center divider-column">% Change</th>

                        <th class="text-center">YTD @Model.SalesSummary.PreviousYearToDate.EndDate.Year</th>
                        <th class="text-center">YTD @Model.SalesSummary.CurrentYearToDate.EndDate.Year</th>
                        <th class="text-center">Difference</th>
                        <th class="text-center divider-column">% Change</th>

                    </tr>
                </thead>
                <tbody>
                    @{
                        var previousDateSales =
                        from sales in Model.SalesSummary.PreviousDate.SalesData
                        group sales by sales.Location into locationGroup
                        select new
                        {
                            Location = locationGroup.Key,
                            Deals = locationGroup.Sum(x => x.DealCount),
                        };

                        var previousDateBrandSales =
                        from makesales in Model.SalesSummary.PreviousDate.SalesData
                        group makesales by new { makesales.Location, makesales.Make } into locationMakeGroup
                        select new
                        {
                            LocationMake = locationMakeGroup.Key,
                            Deals = locationMakeGroup.Sum(x => x.DealCount),
                        };

                        ///////////////////////////////////////////////


                        var currentDateSales =
                        from sales in Model.SalesSummary.CurrentDate.SalesData
                        group sales by sales.Location into locationGroup
                        select new
                        {
                            Location = locationGroup.Key,
                            Deals = locationGroup.Sum(x => x.DealCount),
                        };

                        var currentDateBrandSales =
                        from makesales in Model.SalesSummary.CurrentDate.SalesData
                        group makesales by new { makesales.Location, makesales.Make } into locationMakeGroup
                        select new
                        {
                            LocationMake = locationMakeGroup.Key,
                            Deals = locationMakeGroup.Sum(x => x.DealCount),
                        };

                        ///////////////////////////////////////////////

                        var previousMonthlySales =
                        from sales in Model.SalesSummary.PreviousMonthToDate.SalesData
                        group sales by sales.Location into locationGroup
                        select new
                        {
                            Location = locationGroup.Key,
                            Deals = locationGroup.Sum(x => x.DealCount),
                        };

                        var previousMonthlyBrandSales =
                        from makesales in Model.SalesSummary.PreviousMonthToDate.SalesData
                        group makesales by new { makesales.Location, makesales.Make } into locationMakeGroup
                        select new
                        {
                            LocationMake = locationMakeGroup.Key,
                            Deals = locationMakeGroup.Sum(x => x.DealCount),
                        };

                        ///////////////////////////////////////////////

                        var currentMonthlySales =
                        from sales in Model.SalesSummary.CurrentMonthToDate.SalesData
                        group sales by sales.Location into locationGroup
                        select new
                        {
                            Location = locationGroup.Key,
                            Deals = locationGroup.Sum(x => x.DealCount),
                        };

                        var currentMonthlyBrandSales =
                        from makesales in Model.SalesSummary.CurrentMonthToDate.SalesData
                        group makesales by new { makesales.Location, makesales.Make } into locationMakeGroup
                        select new
                        {
                            LocationMake = locationMakeGroup.Key,
                            Deals = locationMakeGroup.Sum(x => x.DealCount),
                        };

                        ///////////////////////////////////////////////

                        var previousYearlySales =
                        from sales in Model.SalesSummary.PreviousYearToDate.SalesData
                        group sales by sales.Location into locationGroup
                        select new
                        {
                            Location = locationGroup.Key,
                            Deals = locationGroup.Sum(x => x.DealCount),
                        };

                        var previousYearlyBrandSales =
                        from makesales in Model.SalesSummary.PreviousYearToDate.SalesData
                        group makesales by new { makesales.Location, makesales.Make } into locationMakeGroup
                        select new
                        {
                            LocationMake = locationMakeGroup.Key,
                            Deals = locationMakeGroup.Sum(x => x.DealCount),
                        };

                        ///////////////////////////////////////////////

                        var currentYearlySales =
                        from sales in Model.SalesSummary.CurrentYearToDate.SalesData
                        group sales by sales.Location into locationGroup
                        select new
                        {
                            Location = locationGroup.Key,
                            Deals = locationGroup.Sum(x => x.DealCount),
                        };


                        var currentYearlyBrandSales =
                        from makesales in Model.SalesSummary.CurrentYearToDate.SalesData
                        group makesales by new { makesales.Location, makesales.Make } into locationMakeGroup
                        select new
                        {
                            LocationMake = locationMakeGroup.Key,
                            Deals = locationMakeGroup.Sum(x => x.DealCount),
                        };


                    }

                    @foreach (var location in locations)
                    {

                        decimal prevDateSales = 0;
                        decimal currDateSales = 0;
                        decimal prevMonthSales = 0;
                        decimal currMonthSales = 0;
                        decimal prevYearSales = 0;
                        decimal currYearSales = 0;

                        try
                        {
                            prevDateSales = previousDateSales.ToList().Find(x => x.Location == location).Deals;
                        }
                        catch
                        {
                            prevDateSales = 0;
                        }

                        try
                        {
                            currDateSales = currentDateSales.ToList().Find(x => x.Location == location).Deals;
                        }
                        catch
                        {
                            currDateSales = 0;
                        }

                        try
                        {
                            prevMonthSales = previousMonthlySales.ToList().Find(x => x.Location == location).Deals;
                        }
                        catch
                        {
                            prevMonthSales = 0;
                        }

                        try
                        {
                            currMonthSales = currentMonthlySales.ToList().Find(x => x.Location == location).Deals;
                        }
                        catch
                        {
                            currMonthSales = 0;
                        }

                        try
                        {
                            prevYearSales = previousYearlySales.ToList().Find(x => x.Location == location).Deals;
                        }
                        catch
                        {
                            prevYearSales = 0;
                        }

                        try
                        {
                            currYearSales = currentYearlySales.ToList().Find(x => x.Location == location).Deals;
                        }
                        catch
                        {
                            currYearSales = 0;
                        }


                        var dateDifference = currDateSales - prevDateSales;
                        decimal datePercentChange = 0;
                        if (prevDateSales > 0)
                        {
                            datePercentChange = dateDifference / prevDateSales;
                        }

                        var monthDifference = currMonthSales - prevMonthSales;
                        decimal monthPercentChange = 0;
                        if (prevMonthSales > 0)
                        {
                            monthPercentChange = monthDifference / prevMonthSales;
                        }

                        var yearDifference = currYearSales - prevYearSales;
                        decimal yearPercentChange = 0;
                        if (prevYearSales > 0)
                        {
                            yearPercentChange = yearDifference / prevYearSales;
                        }

                        var displayLocation = location;
                        switch (location)
                        {
                            case "Annapolis":
                                displayLocation = "Annapolis Cadillac/Volkswagen";
                                break;
                            case "Annapolis(Classic)":
                                displayLocation = "Annapolis Mazda/Mitsubishi";
                                break;
                            case "Chambersburg":
                                displayLocation = "Chambersburg";
                                break;
                            case "Clearwater Chrysler/Jeep":
                                displayLocation = "Clearwater Chrysler/Jeep";
                                break;
                            case "Colonial":
                                displayLocation = "Rockville Hyundai";
                                break;
                            case "Frederick":
                                displayLocation = "Frederick";
                                break;
                            case "Germantown":
                                displayLocation = "Germantown";
                                break;
                            case "Hagerstown(CDJR)":
                                displayLocation = "Hagerstown Chrysler";
                                break;
                            case "Hagerstown(GM)":
                                displayLocation = "Hagerstown GM";
                                break;
                            case "Lakeforest(355)":
                                displayLocation = "Gaitherburg Toyota";
                                break;
                            case "Lakeforest(Russell)":
                                displayLocation = "Gaithersburg Hyundai/Subaru";
                                break;
                            case "LexingtonPark(LexPark)":
                                displayLocation = "Lexington Park";
                                break;
                            case "Nicholson":
                                displayLocation = "Rockville Buick/GMC";
                                break;
                            case "Subaru":
                                displayLocation = "Rockville Subaru";
                                break;
                            case "Wheaton":
                                displayLocation = "Wheaton";
                                break;
                            case "Superstore":
                                displayLocation = "Frederick Rt 85";
                                break;
                        }




                        <tr>
                            <td class="text-right divider-column" style="width:330px"><a data-toggle="collapse" id="deal-brand" style="cursor: pointer;" data-target="#collapse-@location.Replace("(", "").Replace(")", "")-brand">@displayLocation <i class="fa fa-caret-down" aria-hidden="true"></i></a></td>
                            <td class="text-right">@prevDateSales</td>
                            <td class="text-right">@currDateSales</td>
                            <td class="text-right">@dateDifference</td>
                            <td class="text-right divider-column">@datePercentChange.ToString("P")</td>
                            <td class="text-right">@prevMonthSales</td>
                            <td class="text-right">@currMonthSales</td>
                            <td class="text-right">@monthDifference</td>
                            <td class="text-right divider-column">@monthPercentChange.ToString("P")</td>
                            <td class="text-right">@prevYearSales</td>
                            <td class="text-right">@currYearSales</td>
                            <td class="text-right">@yearDifference</td>
                            <td class="text-right divider-column">@yearPercentChange.ToString("P")</td>
                        </tr>
                                            <tr id="collapse-@location.Replace("(", "").Replace(")", "")-brand" class="collapse out" style="background-color:#e2e2e2">
                                                <td colspan="13">
                                                    <table class="table table-bordered">
                                                        <thead>
                                                            <tr style="">
                                                                <th class="text-center divider-column" style="width:330px">Brands</th>
                                                                <th class="text-center">@Model.SalesSummary.PreviousDate.StartDate.ToShortDateString()</th>
                                                                <th class="text-center">@Model.SalesSummary.CurrentDate.StartDate.ToShortDateString()</th>
                                                                <th class="text-center">Difference</th>
                                                                <th class="text-center divider-column">% Change</th>

                                                                <th class="text-center">MTD @System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(@Model.SalesSummary.PreviousMonthToDate.FiscalDate.Month) @Model.SalesSummary.PreviousYearToDate.EndDate.Year</th>
                                                                <th class="text-center">MTD @System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(@Model.SalesSummary.CurrentMonthToDate.FiscalDate.Month) @Model.SalesSummary.CurrentYearToDate.EndDate.Year</th>
                                                                <th class="text-center">Difference</th>
                                                                <th class="text-center divider-column">% Change</th>

                                                                <th class="text-center">YTD @Model.SalesSummary.PreviousYearToDate.EndDate.Year</th>
                                                                <th class="text-center">YTD @Model.SalesSummary.CurrentYearToDate.EndDate.Year</th>
                                                                <th class="text-center">Difference</th>
                                                                <th class="text-center divider-column">% Change</th>

                                                            </tr>
                                                        </thead>
                                                        <tbody>
                                                            @{
                                                                var makes = new List<string>();
                                                                foreach (var item in currentYearlyBrandSales)
                                                                {
                                                                    if (item.LocationMake.Location == location)
                                                                    {
                                                                        makes.Add(item.LocationMake.Make);

                                                                    }
                                                                }
                                                            }
                                                            @foreach (var make in makes)
                                                            {
                                                                decimal currentSales = 0;
                                                                var currBrandSales = currentDateBrandSales.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);
                                                                if (currBrandSales != null)
                                                                {
                                                                    currentSales = currBrandSales.Deals;
                                                                }

                                                                /////////////////

                                                                decimal previousSales = 0;
                                                                var prevBrandSales = previousDateBrandSales.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);
                                                                if (prevBrandSales != null)
                                                                {
                                                                    previousSales = prevBrandSales.Deals;
                                                                }

                                                                //////////////////

                                                                decimal currentMonthSales = 0;
                                                                var currBrandMonthSales = currentMonthlyBrandSales.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);
                                                                if (currBrandMonthSales != null)
                                                                {
                                                                    currentMonthSales = currBrandMonthSales.Deals;
                                                                }

                                                                /////////////////

                                                                decimal previousMonthSales = 0;
                                                                var prevBrandMonthSales = previousMonthlyBrandSales.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);
                                                                if (prevBrandMonthSales != null)
                                                                {
                                                                    previousMonthSales = prevBrandMonthSales.Deals;
                                                                }

                                                                //////////////////

                                                                decimal currentYearSales = 0;
                                                                var currBrandYearSales = currentYearlyBrandSales.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);
                                                                if (currBrandYearSales != null)
                                                                {
                                                                    currentYearSales = currBrandYearSales.Deals;
                                                                }

                                                                /////////////////

                                                                decimal previousYearSales = 0;
                                                                var prevBrandYearSales = previousYearlyBrandSales.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);
                                                                if (prevBrandYearSales != null)
                                                                {
                                                                    previousYearSales = prevBrandYearSales.Deals;
                                                                }

                                                                //////////////////

                                                                var dayDifference = currentSales - previousSales;
                                                                decimal dayPercentChange = 0;
                                                                if (previousSales > 0)
                                                                {
                                                                    dayPercentChange = dayDifference / previousSales;
                                                                }

                                                                var monDifference = currentMonthSales - previousMonthSales;
                                                                decimal monPercentChange = 0;
                                                                if (previousMonthSales > 0)
                                                                {
                                                                    monPercentChange = monDifference / previousMonthSales;
                                                                }

                                                                var yrDifference = currentYearSales - previousYearSales;
                                                                decimal yrPercentChange = 0;
                                                                if (previousYearSales > 0)
                                                                {
                                                                    yrPercentChange = yrDifference / previousYearSales;
                                                                }


                                                                <tr>
                                                                    <td class="text-right divider-column" style="width:330px">@make</td>
                                                                    <td class="text-right">@previousSales</td>
                                                                    <td class="text-right">@currentSales</td>
                                                                    <td class="text-right">@dayDifference</td>
                                                                    <td class="text-right divider-column">@dayPercentChange.ToString("P")</td>
                                                                    <td class="text-right">@previousMonthSales</td>
                                                                    <td class="text-right">@currentMonthSales</td>
                                                                    <td class="text-right">@monDifference</td>
                                                                    <td class="text-right divider-column">@monPercentChange.ToString("P")</td>
                                                                    <td class="text-right">@previousYearSales</td>
                                                                    <td class="text-right">@currentYearSales</td>
                                                                    <td class="text-right">@yrDifference</td>
                                                                    <td class="text-right divider-column">@yrPercentChange.ToString("P")</td>
                                                                </tr>

                                                            }

                                                        </tbody>
                                                    </table>
                                                </td>
                                            </tr>
                                                                }
                </tbody>
            </table>

        </td>

    </tr>

    <tr>
        <td class="text-right divider-column"><a data-toggle="collapse" id="Frontpvr-location" style="cursor: pointer;" data-target="#collapse-Frontpvr-location"><strong>Front PVR <i class="fa fa-caret-down" aria-hidden="true"></i></strong></a></td>

        <td class="text-right">@prevDayFrontPVRAmount.ToString("C",nfi)</td>
        <td class="text-right">@DayFrontPVRAmount.ToString("C", nfi)</td>
        <td class="text-right">@DayFrontPVRDifference.ToString("C", nfi)</td>
        <td class="text-center divider-column">@dayPercentageFrontPVR.ToString("P",nfi)</td>

        <td class="text-right">@prevMonthFrontPVRAmount.ToString("C", nfi)</td>
        <td class="text-right">@MonthFrontPVRAmount.ToString("C", nfi)</td>
        <td class="text-right">@MonthFrontPVRDifference.ToString("C", nfi)</td>
        <td class="text-center divider-column">@monthPercentageFrontPVR.ToString("P", nfi)</td>

        <td class="text-right">@prevYearFrontPVRAmount.ToString("C", nfi)</td>
        <td class="text-right">@YearFrontPVRAmount.ToString("C", nfi)</td>
        <td class="text-right">@YearFrontPVRDifference.ToString("C", nfi)</td>
        <td class="text-center divider-column">@yearPercentageFrontPVR.ToString("P",nfi)</td>

    </tr>

    <tr id="collapse-Frontpvr-location" class="collapse out" style="background-color:#e2e2e2">

        <td colspan="13">
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th class="text-center divider-column" style="width:330px">Locations</th>
                        <th class="text-center">@Model.SalesSummary.PreviousDate.StartDate.ToShortDateString()</th>
                        <th class="text-center">@Model.SalesSummary.CurrentDate.StartDate.ToShortDateString()</th>
                        <th class="text-center">Difference</th>
                        <th class="text-center divider-column">% Change</th>

                        <th class="text-center">MTD @System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(@Model.SalesSummary.PreviousMonthToDate.FiscalDate.Month) @Model.SalesSummary.PreviousYearToDate.EndDate.Year</th>
                        <th class="text-center">MTD @System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(@Model.SalesSummary.CurrentMonthToDate.FiscalDate.Month) @Model.SalesSummary.CurrentYearToDate.EndDate.Year</th>
                        <th class="text-center">Difference</th>
                        <th class="text-center divider-column">% Change</th>

                        <th class="text-center">YTD @Model.SalesSummary.PreviousYearToDate.EndDate.Year</th>
                        <th class="text-center">YTD @Model.SalesSummary.CurrentYearToDate.EndDate.Year</th>
                        <th class="text-center">Difference</th>
                        <th class="text-center divider-column">% Change</th>

                    </tr>
                </thead>
                <tbody>
                    @{
                                            var previousDateFrontPVR =
                                            from sales in Model.SalesSummary.PreviousDate.SalesData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.DealCount),
                                                GrossAmount = locationGroup.Sum(x => x.GrossAmount)
                                            };

                                            var previousDateBrandFrontPVR =
                                            from makesales in Model.SalesSummary.PreviousDate.SalesData
                                            group makesales by new { makesales.Location, makesales.Make } into locationMakeGroup
                                            select new
                                            {
                                                LocationMake = locationMakeGroup.Key,
                                                Deals = locationMakeGroup.Sum(x => x.DealCount),
                                                GrossAmount = locationMakeGroup.Sum(x => x.GrossAmount)
                                            };

                                            ///////////////////////////////////////////////


                                            var currentDateFrontPVR =
                                            from sales in Model.SalesSummary.CurrentDate.SalesData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.DealCount),
                                                GrossAmount = locationGroup.Sum(x => x.GrossAmount)
                                            };

                                            var currentDateBrandFrontPVR =
                                            from makesales in Model.SalesSummary.CurrentDate.SalesData
                                            group makesales by new { makesales.Location, makesales.Make } into locationMakeGroup
                                            select new
                                            {
                                                LocationMake = locationMakeGroup.Key,
                                                Deals = locationMakeGroup.Sum(x => x.DealCount),
                                                GrossAmount = locationMakeGroup.Sum(x => x.GrossAmount)

                                            };

                                            ///////////////////////////////////////////////

                                            var previousMonthlyFrontPVR =
                                            from sales in Model.SalesSummary.PreviousMonthToDate.SalesData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.DealCount),
                                                GrossAmount = locationGroup.Sum(x => x.GrossAmount)
                                            };

                                            var previousMonthlyBrandFrontPVR =
                                            from makesales in Model.SalesSummary.PreviousMonthToDate.SalesData
                                            group makesales by new { makesales.Location, makesales.Make } into locationMakeGroup
                                            select new
                                            {
                                                LocationMake = locationMakeGroup.Key,
                                                Deals = locationMakeGroup.Sum(x => x.DealCount),
                                                GrossAmount = locationMakeGroup.Sum(x => x.GrossAmount)
                                            };

                                            ///////////////////////////////////////////////

                                            var currentMonthlyFrontPVR =
                                            from sales in Model.SalesSummary.CurrentMonthToDate.SalesData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.DealCount),
                                                GrossAmount = locationGroup.Sum(x => x.GrossAmount)
                                            };

                                            var currentMonthlyBrandFrontPVR =
                                            from makesales in Model.SalesSummary.CurrentMonthToDate.SalesData
                                            group makesales by new { makesales.Location, makesales.Make } into locationMakeGroup
                                            select new
                                            {
                                                LocationMake = locationMakeGroup.Key,
                                                Deals = locationMakeGroup.Sum(x => x.DealCount),
                                                GrossAmount = locationMakeGroup.Sum(x => x.GrossAmount)
                                            };

                                            ///////////////////////////////////////////////

                                            var previousYearlyFrontPVR =
                                            from sales in Model.SalesSummary.PreviousYearToDate.SalesData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.DealCount),
                                                GrossAmount = locationGroup.Sum(x => x.GrossAmount)
                                            };

                                            var previousYearlyBrandFrontPVR =
                                            from makesales in Model.SalesSummary.PreviousYearToDate.SalesData
                                            group makesales by new { makesales.Location, makesales.Make } into locationMakeGroup
                                            select new
                                            {
                                                LocationMake = locationMakeGroup.Key,
                                                Deals = locationMakeGroup.Sum(x => x.DealCount),
                                                GrossAmount = locationMakeGroup.Sum(x => x.GrossAmount)

                                            };

                                            ///////////////////////////////////////////////

                                            var currentYearlyFrontPVR =
                                            from sales in Model.SalesSummary.CurrentYearToDate.SalesData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.DealCount),
                                                GrossAmount = locationGroup.Sum(x => x.GrossAmount)
                                            };


                                            var currentYearlyBrandFrontPVR =
                                            from makesales in Model.SalesSummary.CurrentYearToDate.SalesData
                                            group makesales by new { makesales.Location, makesales.Make } into locationMakeGroup
                                            select new
                                            {
                                                LocationMake = locationMakeGroup.Key,
                                                Deals = locationMakeGroup.Sum(x => x.DealCount),
                                                GrossAmount = locationMakeGroup.Sum(x => x.GrossAmount)

                                            };


                    }

                    @foreach (var location in locations)
                                        {

                                            decimal prevDateFrontPVR = 0;
                                            decimal currDateFrontPVR = 0;
                                            decimal prevMonthFrontPVR = 0;
                                            decimal currMonthFrontPVR = 0;
                                            decimal prevYearFrontPVR = 0;
                                            decimal currYearFrontPVR = 0;

                                            try
                                            {
                                                prevDateFrontPVR = previousDateFrontPVR.ToList().Find(x => x.Location == location).GrossAmount / previousDateFrontPVR.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                prevDateFrontPVR = 0;
                                            }

                                            try
                                            {
                                                currDateFrontPVR = currentDateFrontPVR.ToList().Find(x => x.Location == location).GrossAmount / currentDateFrontPVR.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                currDateFrontPVR = 0;
                                            }

                                            try
                                            {
                                                prevMonthFrontPVR = previousMonthlyFrontPVR.ToList().Find(x => x.Location == location).GrossAmount / previousMonthlyFrontPVR.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                prevMonthFrontPVR = 0;
                                            }

                                            try
                                            {
                                                currMonthFrontPVR = currentMonthlyFrontPVR.ToList().Find(x => x.Location == location).GrossAmount / currentMonthlyFrontPVR.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                currMonthFrontPVR = 0;
                                            }

                                            try
                                            {
                                                prevYearFrontPVR = previousYearlyFrontPVR.ToList().Find(x => x.Location == location).GrossAmount / previousYearlyFrontPVR.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                prevYearFrontPVR = 0;
                                            }

                                            try
                                            {
                                                currYearFrontPVR = currentYearlyFrontPVR.ToList().Find(x => x.Location == location).GrossAmount / currentYearlyFrontPVR.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                currYearFrontPVR = 0;
                                            }


                                            var dateDifference = currDateFrontPVR - prevDateFrontPVR;
                                            decimal datePercentChange = 0;
                                            if (prevDateFrontPVR > 0)
                                            {
                                                datePercentChange = dateDifference / prevDateFrontPVR;
                                            }

                                            var monthDifference = currMonthFrontPVR - prevMonthFrontPVR;
                                            decimal monthPercentChange = 0;
                                            if (prevMonthFrontPVR > 0)
                                            {
                                                monthPercentChange = monthDifference / prevMonthFrontPVR;
                                            }

                                            var yearDifference = currYearFrontPVR - prevYearFrontPVR;
                                            decimal yearPercentChange = 0;
                                            if (prevYearFrontPVR > 0)
                                            {
                                                yearPercentChange = yearDifference / prevYearFrontPVR;
                                            }

                                            var displayLocation = location;
                                            switch (location)
                                            {
                                                case "Annapolis":
                                                    displayLocation = "Annapolis Cadillac/Volkswagen";
                                                    break;
                                                case "Annapolis(Classic)":
                                                    displayLocation = "Annapolis Mazda/Mitsubishi";
                                                    break;
                                                case "Chambersburg":
                                                    displayLocation = "Chambersburg";
                                                    break;
                                                case "Clearwater Chrysler/Jeep":
                                                    displayLocation = "Clearwater Chrysler/Jeep";
                                                    break;
                                                case "Colonial":
                                                    displayLocation = "Rockville Hyundai";
                                                    break;
                                                case "Frederick":
                                                    displayLocation = "Frederick";
                                                    break;
                                                case "Germantown":
                                                    displayLocation = "Germantown";
                                                    break;
                                                case "Hagerstown(CDJR)":
                                                    displayLocation = "Hagerstown Chrysler";
                                                    break;
                                                case "Hagerstown(GM)":
                                                    displayLocation = "Hagerstown GM";
                                                    break;
                                                case "Lakeforest(355)":
                                                    displayLocation = "Gaitherburg Toyota";
                                                    break;
                                                case "Lakeforest(Russell)":
                                                    displayLocation = "Gaithersburg Hyundai/Subaru";
                                                    break;
                                                case "LexingtonPark(LexPark)":
                                                    displayLocation = "Lexington Park";
                                                    break;
                                                case "Nicholson":
                                                    displayLocation = "Rockville Buick/GMC";
                                                    break;
                                                case "Subaru":
                                                    displayLocation = "Rockville Subaru";
                                                    break;
                                                case "Wheaton":
                                                    displayLocation = "Wheaton";
                                                    break;
                                                case "Superstore":
                                                    displayLocation = "Frederick Rt 85";
                                                    break;
                                            }




                                        <tr>
                                            <td class="text-right divider-column" style="width:330px"><a data-toggle="collapse" id="deal-brand" style="cursor: pointer;" data-target="#collapse-@location.Replace("(", "").Replace(")", "")-brandfrontpvr">@displayLocation <i class="fa fa-caret-down" aria-hidden="true"></i></a></td>
                                            <td class="text-right">@prevDateFrontPVR.ToString("C",nfi)</td>
                                            <td class="text-right">@currDateFrontPVR.ToString("C", nfi)</td>
                                            <td class="text-right">@dateDifference.ToString("C", nfi)</td>
                                            <td class="text-right divider-column">@datePercentChange.ToString("P")</td>
                                            <td class="text-right">@prevMonthFrontPVR.ToString("C", nfi)</td>
                                            <td class="text-right">@currMonthFrontPVR.ToString("C", nfi)</td>
                                            <td class="text-right">@monthDifference.ToString("C", nfi)</td>
                                            <td class="text-right divider-column">@monthPercentChange.ToString("P")</td>
                                            <td class="text-right">@prevYearFrontPVR.ToString("C", nfi)</td>
                                            <td class="text-right">@currYearFrontPVR.ToString("C", nfi)</td>
                                            <td class="text-right">@yearDifference.ToString("C", nfi)</td>
                                            <td class="text-right divider-column">@yearPercentChange.ToString("P")</td>
                                        </tr>
                                        <tr id="collapse-@location.Replace("(", "").Replace(")", "")-brandfrontpvr" class="collapse out" style="background-color:#e2e2e2">
                                            <td colspan="13">
                                                <table class="table table-bordered">
                                                    <thead>
                                                        <tr style="">
                                                            <th class="text-center divider-column" style="width:330px">Brands</th>
                                                            <th class="text-center">@Model.SalesSummary.PreviousDate.StartDate.ToShortDateString()</th>
                                                            <th class="text-center">@Model.SalesSummary.CurrentDate.StartDate.ToShortDateString()</th>
                                                            <th class="text-center">Difference</th>
                                                            <th class="text-center divider-column">% Change</th>

                                                            <th class="text-center">MTD @System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(@Model.SalesSummary.PreviousMonthToDate.FiscalDate.Month) @Model.SalesSummary.PreviousYearToDate.EndDate.Year</th>
                                                            <th class="text-center">MTD @System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(@Model.SalesSummary.CurrentMonthToDate.FiscalDate.Month) @Model.SalesSummary.CurrentYearToDate.EndDate.Year</th>
                                                            <th class="text-center">Difference</th>
                                                            <th class="text-center divider-column">% Change</th>

                                                            <th class="text-center">YTD @Model.SalesSummary.PreviousYearToDate.EndDate.Year</th>
                                                            <th class="text-center">YTD @Model.SalesSummary.CurrentYearToDate.EndDate.Year</th>
                                                            <th class="text-center">Difference</th>
                                                            <th class="text-center divider-column">% Change</th>

                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @{
                                                                var makes = new List<string>();
                                                                foreach (var item in currentYearlyBrandSales)
                                                                {
                                                                    if (item.LocationMake.Location == location)
                                                                    {
                                                                        makes.Add(item.LocationMake.Make);

                                                                    }
                                                                }
                                                        }
                                                        @foreach (var make in makes)
                                                            {
                                                                decimal currentFrontPVR = 0;
                                                                var currBrandFrontPVR = currentDateBrandFrontPVR.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);
                                                                if (currBrandFrontPVR != null)
                                                                {
                                                                    currentFrontPVR = currBrandFrontPVR.GrossAmount / currBrandFrontPVR.Deals;
                                                                }

                                                                /////////////////

                                                                decimal previousFrontPVR = 0;
                                                                var prevBrandFrontPVR = previousDateBrandFrontPVR.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);
                                                                if (prevBrandFrontPVR != null)
                                                                {
                                                                    previousFrontPVR = prevBrandFrontPVR.GrossAmount / prevBrandFrontPVR.Deals;
                                                                }

                                                                //////////////////

                                                                decimal currentMonthFrontPVR = 0;
                                                                var currBrandMonthFrontPVR = currentMonthlyBrandFrontPVR.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);
                                                                if (currBrandMonthFrontPVR != null)
                                                                {
                                                                    currentMonthFrontPVR = currBrandMonthFrontPVR.GrossAmount / currBrandMonthFrontPVR.Deals;
                                                                }

                                                                /////////////////

                                                                decimal previousMonthFrontPVR = 0;
                                                                var prevBrandMonthFrontPVR = previousMonthlyBrandFrontPVR.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);
                                                                if (prevBrandMonthFrontPVR != null)
                                                                {
                                                                    previousMonthFrontPVR = prevBrandMonthFrontPVR.GrossAmount/ prevBrandMonthFrontPVR.Deals;
                                                                }

                                                                //////////////////

                                                                decimal currentYearFrontPVR = 0;
                                                                var currBrandYearFrontPVR = currentYearlyBrandFrontPVR.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);
                                                                if (currBrandYearFrontPVR != null)
                                                                {
                                                                    currentYearFrontPVR = currBrandYearFrontPVR.GrossAmount / currBrandYearFrontPVR.Deals;
                                                                }

                                                                /////////////////

                                                                decimal previousYearFrontPVR = 0;
                                                                var prevBrandYearFrontPVR = previousYearlyBrandFrontPVR.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);
                                                                if (prevBrandYearFrontPVR != null)
                                                                {
                                                                    previousYearFrontPVR = prevBrandYearFrontPVR.GrossAmount / prevBrandYearFrontPVR.Deals;
                                                                }

                                                                //////////////////

                                                                var dayDifference = currentFrontPVR - previousFrontPVR;
                                                                decimal dayPercentChange = 0;
                                                                if (previousFrontPVR > 0)
                                                                {
                                                                    dayPercentChange = dayDifference / previousFrontPVR;
                                                                }

                                                                var monDifference = currentMonthFrontPVR - previousMonthFrontPVR;
                                                                decimal monPercentChange = 0;
                                                                if (previousMonthFrontPVR > 0)
                                                                {
                                                                    monPercentChange = monDifference / previousMonthFrontPVR;
                                                                }

                                                                var yrDifference = currentYearFrontPVR - previousYearFrontPVR;
                                                                decimal yrPercentChange = 0;
                                                                if (previousYearFrontPVR > 0)
                                                                {
                                                                    yrPercentChange = yrDifference / previousYearFrontPVR;
                                                                }


                                                            <tr>
                                                                <td class="text-right divider-column" style="width:330px">@make</td>
                                                                <td class="text-right">@previousFrontPVR.ToString("C",nfi)</td>
                                                                <td class="text-right">@currentFrontPVR.ToString("C", nfi)</td>
                                                                <td class="text-right">@dayDifference.ToString("C", nfi)</td>
                                                                <td class="text-right divider-column">@dayPercentChange.ToString("P")</td>
                                                                <td class="text-right">@previousMonthFrontPVR.ToString("C", nfi)</td>
                                                                <td class="text-right">@currentMonthFrontPVR.ToString("C", nfi)</td>
                                                                <td class="text-right">@monDifference.ToString("C", nfi)</td>
                                                                <td class="text-right divider-column">@monPercentChange.ToString("P")</td>
                                                                <td class="text-right">@previousYearFrontPVR.ToString("C", nfi)</td>
                                                                <td class="text-right">@currentYearFrontPVR.ToString("C", nfi)</td>
                                                                <td class="text-right">@yrDifference.ToString("C", nfi)</td>
                                                                <td class="text-right divider-column">@yrPercentChange.ToString("P")</td>
                                                            </tr>

                                                            }

                                                    </tbody>
                                                </table>
                                            </td>
                                        </tr>
                                                                }
                </tbody>
            </table>

        </td>

    </tr>


    <tr>
        <td class="text-right divider-column"><a data-toggle="collapse" id="Backpvr-location" style="cursor: pointer;" data-target="#collapse-Backpvr-location"><strong>Back PVR <i class="fa fa-caret-down" aria-hidden="true"></i></strong></a></td>

        <td class="text-right">@prevDayBackPVRAmount.ToString("C", nfi)</td>
        <td class="text-right">@DayBackPVRAmount.ToString("C", nfi)</td>
        <td class="text-right">@DayBackPVRDifference.ToString("C", nfi)</td>
        <td class="text-center divider-column">@dayPercentageBackPVR.ToString("P", nfi)</td>

        <td class="text-right">@prevMonthBackPVRAmount.ToString("C", nfi)</td>
        <td class="text-right">@MonthBackPVRAmount.ToString("C", nfi)</td>
        <td class="text-right">@MonthBackPVRDifference.ToString("C", nfi)</td>
        <td class="text-center divider-column">@monthPercentageBackPVR.ToString("P", nfi)</td>

        <td class="text-right">@prevYearBackPVRAmount.ToString("C", nfi)</td>
        <td class="text-right">@YearBackPVRAmount.ToString("C", nfi)</td>
        <td class="text-right">@YearBackPVRDifference.ToString("C", nfi)</td>
        <td class="text-center divider-column">@yearPercentageBackPVR.ToString("P", nfi)</td>

    </tr>

    <tr id="collapse-Backpvr-location" class="collapse out" style="background-color:#e2e2e2">

        <td colspan="13">
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th class="text-center divider-column" style="width:330px">Locations</th>
                        <th class="text-center">@Model.SalesSummary.PreviousDate.StartDate.ToShortDateString()</th>
                        <th class="text-center">@Model.SalesSummary.CurrentDate.StartDate.ToShortDateString()</th>
                        <th class="text-center">Difference</th>
                        <th class="text-center divider-column">% Change</th>

                        <th class="text-center">MTD @System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(@Model.SalesSummary.PreviousMonthToDate.FiscalDate.Month) @Model.SalesSummary.PreviousYearToDate.EndDate.Year</th>
                        <th class="text-center">MTD @System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(@Model.SalesSummary.CurrentMonthToDate.FiscalDate.Month) @Model.SalesSummary.CurrentYearToDate.EndDate.Year</th>
                        <th class="text-center">Difference</th>
                        <th class="text-center divider-column">% Change</th>

                        <th class="text-center">YTD @Model.SalesSummary.PreviousYearToDate.EndDate.Year</th>
                        <th class="text-center">YTD @Model.SalesSummary.CurrentYearToDate.EndDate.Year</th>
                        <th class="text-center">Difference</th>
                        <th class="text-center divider-column">% Change</th>

                    </tr>
                </thead>
                <tbody>
                    @{
                        

                        var previousDateBackPVR =
                            from sales in Model.SalesSummary.PreviousDate.SalesData
                            group sales by sales.Location into locationGroup
                            select new
                            {
                                Location = locationGroup.Key,
                                Deals = locationGroup.Sum(x => x.DealCount),
                                BackGrossAmount = locationGroup.Sum(x => x.BackGrossAmount),
                                AdditionalBackGrossAmount = locationGroup.Sum(x => x.FinanceAmount + x.ServiceContractAmount + x.GapAmount + x.MaintenanceAmount)
                            };

                        var previousDateBrandBackPVR =
                        from makesales in Model.SalesSummary.PreviousDate.SalesData
                        group makesales by new { makesales.Location, makesales.Make } into locationMakeGroup
                        select new
                        {
                            LocationMake = locationMakeGroup.Key,
                            Deals = locationMakeGroup.Sum(x => x.DealCount),
                            BackGrossAmount = locationMakeGroup.Sum(x => x.BackGrossAmount),
                            AdditionalBackGrossAmount = locationMakeGroup.Sum(x => x.FinanceAmount + x.ServiceContractAmount + x.GapAmount + x.MaintenanceAmount)
                        };

                        ///////////////////////////////////////////////


                        var currentDateBackPVR =
                        from sales in Model.SalesSummary.CurrentDate.SalesData
                        group sales by sales.Location into locationGroup
                        select new
                        {
                            Location = locationGroup.Key,
                            Deals = locationGroup.Sum(x => x.DealCount),
                            BackGrossAmount = locationGroup.Sum(x => x.BackGrossAmount),
                            AdditionalBackGrossAmount = locationGroup.Sum(x => x.FinanceAmount + x.ServiceContractAmount + x.GapAmount + x.MaintenanceAmount)
                        };

                        var currentDateBrandBackPVR =
                        from makesales in Model.SalesSummary.CurrentDate.SalesData
                        group makesales by new { makesales.Location, makesales.Make } into locationMakeGroup
                        select new
                        {
                            LocationMake = locationMakeGroup.Key,
                            Deals = locationMakeGroup.Sum(x => x.DealCount),
                            BackGrossAmount = locationMakeGroup.Sum(x => x.BackGrossAmount),
                            AdditionalBackGrossAmount = locationMakeGroup.Sum(x => x.FinanceAmount + x.ServiceContractAmount + x.GapAmount + x.MaintenanceAmount)
                        };

                        ///////////////////////////////////////////////

                        var previousMonthlyBackPVR =
                        from sales in Model.SalesSummary.PreviousMonthToDate.SalesData
                        group sales by sales.Location into locationGroup
                        select new
                        {
                            Location = locationGroup.Key,
                            Deals = locationGroup.Sum(x => x.DealCount),
                            BackGrossAmount = locationGroup.Sum(x => x.BackGrossAmount),
                            AdditionalBackGrossAmount = locationGroup.Sum(x => x.FinanceAmount + x.ServiceContractAmount + x.GapAmount + x.MaintenanceAmount)
                        };

                        var previousMonthlyBrandBackPVR =
                        from makesales in Model.SalesSummary.PreviousMonthToDate.SalesData
                        group makesales by new { makesales.Location, makesales.Make } into locationMakeGroup
                        select new
                        {
                            LocationMake = locationMakeGroup.Key,
                            Deals = locationMakeGroup.Sum(x => x.DealCount),
                            BackGrossAmount = locationMakeGroup.Sum(x => x.BackGrossAmount),
                            AdditionalBackGrossAmount = locationMakeGroup.Sum(x => x.FinanceAmount + x.ServiceContractAmount + x.GapAmount + x.MaintenanceAmount)

                        };

                        ///////////////////////////////////////////////

                        var currentMonthlyBackPVR =
                        from sales in Model.SalesSummary.CurrentMonthToDate.SalesData
                        group sales by sales.Location into locationGroup
                        select new
                        {
                            Location = locationGroup.Key,
                            Deals = locationGroup.Sum(x => x.DealCount),
                            BackGrossAmount = locationGroup.Sum(x => x.BackGrossAmount),
                            AdditionalBackGrossAmount = locationGroup.Sum(x => x.FinanceAmount + x.ServiceContractAmount + x.GapAmount + x.MaintenanceAmount)
                        };

                        var currentMonthlyBrandBackPVR =
                        from makesales in Model.SalesSummary.CurrentMonthToDate.SalesData
                        group makesales by new { makesales.Location, makesales.Make } into locationMakeGroup
                        select new
                        {
                            LocationMake = locationMakeGroup.Key,
                            Deals = locationMakeGroup.Sum(x => x.DealCount),
                            BackGrossAmount = locationMakeGroup.Sum(x => x.BackGrossAmount),
                            AdditionalBackGrossAmount = locationMakeGroup.Sum(x => x.FinanceAmount + x.ServiceContractAmount + x.GapAmount + x.MaintenanceAmount)
                        };

                        ///////////////////////////////////////////////

                        var previousYearlyBackPVR =
                        from sales in Model.SalesSummary.PreviousYearToDate.SalesData
                        group sales by sales.Location into locationGroup
                        select new
                        {
                            Location = locationGroup.Key,
                            Deals = locationGroup.Sum(x => x.DealCount),
                            BackGrossAmount = locationGroup.Sum(x => x.BackGrossAmount),
                            AdditionalBackGrossAmount = locationGroup.Sum(x => x.FinanceAmount + x.ServiceContractAmount + x.GapAmount + x.MaintenanceAmount)
                        };

                        var previousYearlyBrandBackPVR =
                        from makesales in Model.SalesSummary.PreviousYearToDate.SalesData
                        group makesales by new { makesales.Location, makesales.Make } into locationMakeGroup
                        select new
                        {
                            LocationMake = locationMakeGroup.Key,
                            Deals = locationMakeGroup.Sum(x => x.DealCount),
                            BackGrossAmount = locationMakeGroup.Sum(x => x.BackGrossAmount),
                            AdditionalBackGrossAmount = locationMakeGroup.Sum(x => x.FinanceAmount + x.ServiceContractAmount + x.GapAmount + x.MaintenanceAmount)
                        };

                        ///////////////////////////////////////////////

                        var currentYearlyBackPVR =
                        from sales in Model.SalesSummary.CurrentYearToDate.SalesData
                        group sales by sales.Location into locationGroup
                        select new
                        {
                            Location = locationGroup.Key,
                            Deals = locationGroup.Sum(x => x.DealCount),
                            BackGrossAmount = locationGroup.Sum(x => x.BackGrossAmount),
                            AdditionalBackGrossAmount = locationGroup.Sum(x => x.FinanceAmount + x.ServiceContractAmount + x.GapAmount + x.MaintenanceAmount)
                        };


                        var currentYearlyBrandBackPVR =
                        from makesales in Model.SalesSummary.CurrentYearToDate.SalesData
                        group makesales by new { makesales.Location, makesales.Make } into locationMakeGroup
                        select new
                        {
                            LocationMake = locationMakeGroup.Key,
                            Deals = locationMakeGroup.Sum(x => x.DealCount),
                            BackGrossAmount = locationMakeGroup.Sum(x => x.BackGrossAmount),
                            AdditionalBackGrossAmount = locationMakeGroup.Sum(x => x.FinanceAmount + x.ServiceContractAmount + x.GapAmount + x.MaintenanceAmount)
                        };


                    }

                    @foreach (var location in locations)
                    {

                        decimal prevDateBackPVR = 0;
                        decimal currDateBackPVR = 0;
                        decimal prevMonthBackPVR = 0;
                        decimal currMonthBackPVR = 0;
                        decimal prevYearBackPVR = 0;
                        decimal currYearBackPVR = 0;

                        try
                        {
                            if (Model.SalesSummary.PreviousDate.StartDate < grossChangeDate)
                            {
                                // How do we close out the Finance, Service, Gap and Maintenance for each one?
                                prevDateBackPVR = previousDateBackPVR.ToList().Find(x => x.Location == location).AdditionalBackGrossAmount / previousDateBackPVR.ToList().Find(x => x.Location == location).Deals;

                            }
                            else
                            {
                                prevDateBackPVR = (previousDateBackPVR.ToList().Find(x => x.Location == location).BackGrossAmount + previousDateBackPVR.ToList().Find(x => x.Location == location).AdditionalBackGrossAmount) / previousDateBackPVR.ToList().Find(x => x.Location == location).Deals;

                            }

                        }
                        catch
                        {
                            prevDateBackPVR = 0;
                        }

                        try
                        {

                            if (Model.SalesSummary.CurrentDate.StartDate < grossChangeDate)
                            {
                                // How do we close out the Finance, Service, Gap and Maintenance for each one?
                                currDateBackPVR = currentDateBackPVR.ToList().Find(x => x.Location == location).AdditionalBackGrossAmount / currentDateBackPVR.ToList().Find(x => x.Location == location).Deals;
                            }
                            else
                            {
                                currDateBackPVR = (currentDateBackPVR.ToList().Find(x => x.Location == location).BackGrossAmount + currentDateBackPVR.ToList().Find(x => x.Location == location).AdditionalBackGrossAmount) / currentDateBackPVR.ToList().Find(x => x.Location == location).Deals;
                            }

                            //currDateBackPVR = currentDateBackPVR.ToList().Find(x => x.Location == location).BackGrossAmount / currentDateBackPVR.ToList().Find(x => x.Location == location).Deals;
                        }
                        catch
                        {
                            currDateBackPVR = 0;
                        }

                        try
                        {
                            if (Model.SalesSummary.PreviousMonthToDate.StartDate < grossChangeDate)
                            {
                                // How do we close out the Finance, Service, Gap and Maintenance for each one?
                                prevMonthBackPVR = previousMonthlyBackPVR.ToList().Find(x => x.Location == location).AdditionalBackGrossAmount / previousMonthlyBackPVR.ToList().Find(x => x.Location == location).Deals;
                            }
                            else
                            {
                                prevMonthBackPVR = (previousMonthlyBackPVR.ToList().Find(x => x.Location == location).BackGrossAmount + previousMonthlyBackPVR.ToList().Find(x => x.Location == location).AdditionalBackGrossAmount) / previousMonthlyBackPVR.ToList().Find(x => x.Location == location).Deals;
                            }

                            //prevMonthBackPVR = previousMonthlyBackPVR.ToList().Find(x => x.Location == location).BackGrossAmount / previousMonthlyBackPVR.ToList().Find(x => x.Location == location).Deals;
                        }
                        catch
                        {
                            prevMonthBackPVR = 0;
                        }

                        try
                        {
                            if (Model.SalesSummary.CurrentMonthToDate.StartDate < grossChangeDate)
                            {
                                // How do we close out the Finance, Service, Gap and Maintenance for each one?
                                currMonthBackPVR = currentMonthlyBackPVR.ToList().Find(x => x.Location == location).AdditionalBackGrossAmount / currentMonthlyBackPVR.ToList().Find(x => x.Location == location).Deals;
                            }
                            else
                            {
                                currMonthBackPVR = (currentMonthlyBackPVR.ToList().Find(x => x.Location == location).BackGrossAmount + currentMonthlyBackPVR.ToList().Find(x => x.Location == location).AdditionalBackGrossAmount) / currentMonthlyBackPVR.ToList().Find(x => x.Location == location).Deals;
                            }

                            //currMonthBackPVR = currentMonthlyBackPVR.ToList().Find(x => x.Location == location).BackGrossAmount / currentMonthlyBackPVR.ToList().Find(x => x.Location == location).Deals;
                        }
                        catch
                        {
                            currMonthBackPVR = 0;
                        }

                        try
                        {
                            if (Model.SalesSummary.PreviousYearToDate.StartDate < grossChangeDate)
                            {
                                // How do we close out the Finance, Service, Gap and Maintenance for each one?
                                prevYearBackPVR = previousYearlyBackPVR.ToList().Find(x => x.Location == location).AdditionalBackGrossAmount / previousYearlyBackPVR.ToList().Find(x => x.Location == location).Deals;
                            }
                            else
                            {
                                prevYearBackPVR = (previousYearlyBackPVR.ToList().Find(x => x.Location == location).BackGrossAmount + previousYearlyBackPVR.ToList().Find(x => x.Location == location).AdditionalBackGrossAmount) / previousYearlyBackPVR.ToList().Find(x => x.Location == location).Deals;
                            }

                            //prevYearBackPVR = previousYearlyBackPVR.ToList().Find(x => x.Location == location).BackGrossAmount / previousYearlyBackPVR.ToList().Find(x => x.Location == location).Deals;
                        }
                        catch
                        {
                            prevYearBackPVR = 0;
                        }

                        try
                        {
                            if (Model.SalesSummary.CurrentYearToDate.StartDate < grossChangeDate)
                            {
                                // How do we close out the Finance, Service, Gap and Maintenance for each one?
                                currYearBackPVR = currentYearlyBackPVR.ToList().Find(x => x.Location == location).AdditionalBackGrossAmount / currentYearlyBackPVR.ToList().Find(x => x.Location == location).Deals;
                            }
                            else
                            {
                                currYearBackPVR = (currentYearlyBackPVR.ToList().Find(x => x.Location == location).BackGrossAmount + currentYearlyBackPVR.ToList().Find(x => x.Location == location).AdditionalBackGrossAmount) / currentYearlyBackPVR.ToList().Find(x => x.Location == location).Deals;
                            }

                            //currYearBackPVR = currentYearlyBackPVR.ToList().Find(x => x.Location == location).BackGrossAmount / currentYearlyBackPVR.ToList().Find(x => x.Location == location).Deals;
                        }
                        catch
                        {
                            currYearBackPVR = 0;
                        }


                        var dateDifference = currDateBackPVR - prevDateBackPVR;
                        decimal datePercentChange = 0;
                        if (prevDateBackPVR > 0)
                        {
                            datePercentChange = dateDifference / prevDateBackPVR;
                        }

                        var monthDifference = currMonthBackPVR - prevMonthBackPVR;
                        decimal monthPercentChange = 0;
                        if (prevMonthBackPVR > 0)
                        {
                            monthPercentChange = monthDifference / prevMonthBackPVR;
                        }

                        var yearDifference = currYearBackPVR - prevYearBackPVR;
                        decimal yearPercentChange = 0;
                        if (prevYearBackPVR > 0)
                        {
                            yearPercentChange = yearDifference / prevYearBackPVR;
                        }

                        var displayLocation = location;
                        switch (location)
                        {
                            case "Annapolis":
                                displayLocation = "Annapolis Cadillac/Volkswagen";
                                break;
                            case "Annapolis(Classic)":
                                displayLocation = "Annapolis Mazda/Mitsubishi";
                                break;
                            case "Chambersburg":
                                displayLocation = "Chambersburg";
                                break;
                            case "Clearwater Chrysler/Jeep":
                                displayLocation = "Clearwater Chrysler/Jeep";
                                break;
                            case "Colonial":
                                displayLocation = "Rockville Hyundai";
                                break;
                            case "Frederick":
                                displayLocation = "Frederick";
                                break;
                            case "Germantown":
                                displayLocation = "Germantown";
                                break;
                            case "Hagerstown(CDJR)":
                                displayLocation = "Hagerstown Chrysler";
                                break;
                            case "Hagerstown(GM)":
                                displayLocation = "Hagerstown GM";
                                break;
                            case "Lakeforest(355)":
                                displayLocation = "Gaitherburg Toyota";
                                break;
                            case "Lakeforest(Russell)":
                                displayLocation = "Gaithersburg Hyundai/Subaru";
                                break;
                            case "LexingtonPark(LexPark)":
                                displayLocation = "Lexington Park";
                                break;
                            case "Nicholson":
                                displayLocation = "Rockville Buick/GMC";
                                break;
                            case "Subaru":
                                displayLocation = "Rockville Subaru";
                                break;
                            case "Wheaton":
                                displayLocation = "Wheaton";
                                break;
                            case "Superstore":
                                displayLocation = "Frederick Rt 85";
                                break;
                        }




                        <tr>
                            <td class="text-right divider-column" style="width:330px"><a data-toggle="collapse" id="deal-brand" style="cursor: pointer;" data-target="#collapse-@location.Replace("(", "").Replace(")", "")-brandBackpvr">@displayLocation <i class="fa fa-caret-down" aria-hidden="true"></i></a></td>
                            <td class="text-right">@prevDateBackPVR.ToString("C", nfi)</td>
                            <td class="text-right">@currDateBackPVR.ToString("C", nfi)</td>
                            <td class="text-right">@dateDifference.ToString("C", nfi)</td>
                            <td class="text-right divider-column">@datePercentChange.ToString("P")</td>
                            <td class="text-right">@prevMonthBackPVR.ToString("C", nfi)</td>
                            <td class="text-right">@currMonthBackPVR.ToString("C", nfi)</td>
                            <td class="text-right">@monthDifference.ToString("C", nfi)</td>
                            <td class="text-right divider-column">@monthPercentChange.ToString("P")</td>
                            <td class="text-right">@prevYearBackPVR.ToString("C", nfi)</td>
                            <td class="text-right">@currYearBackPVR.ToString("C", nfi)</td>
                            <td class="text-right">@yearDifference.ToString("C", nfi)</td>
                            <td class="text-right divider-column">@yearPercentChange.ToString("P")</td>
                        </tr>
                                            <tr id="collapse-@location.Replace("(", "").Replace(")", "")-brandBackpvr" class="collapse out" style="background-color:#e2e2e2">
                                                <td colspan="13">
                                                    <table class="table table-bordered">
                                                        <thead>
                                                            <tr style="">
                                                                <th class="text-center divider-column" style="width:330px">Brands</th>
                                                                <th class="text-center">@Model.SalesSummary.PreviousDate.StartDate.ToShortDateString()</th>
                                                                <th class="text-center">@Model.SalesSummary.CurrentDate.StartDate.ToShortDateString()</th>
                                                                <th class="text-center">Difference</th>
                                                                <th class="text-center divider-column">% Change</th>

                                                                <th class="text-center">MTD @System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(@Model.SalesSummary.PreviousMonthToDate.FiscalDate.Month) @Model.SalesSummary.PreviousYearToDate.EndDate.Year</th>
                                                                <th class="text-center">MTD @System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(@Model.SalesSummary.CurrentMonthToDate.FiscalDate.Month) @Model.SalesSummary.CurrentYearToDate.EndDate.Year</th>
                                                                <th class="text-center">Difference</th>
                                                                <th class="text-center divider-column">% Change</th>

                                                                <th class="text-center">YTD @Model.SalesSummary.PreviousYearToDate.EndDate.Year</th>
                                                                <th class="text-center">YTD @Model.SalesSummary.CurrentYearToDate.EndDate.Year</th>
                                                                <th class="text-center">Difference</th>
                                                                <th class="text-center divider-column">% Change</th>

                                                            </tr>
                                                        </thead>
                                                        <tbody>
                                                            @{
                                                                var makes = new List<string>();
                                                                foreach (var item in currentYearlyBrandSales)
                                                                {
                                                                    if (item.LocationMake.Location == location)
                                                                    {
                                                                        makes.Add(item.LocationMake.Make);

                                                                    }
                                                                }
                                                            }
                                                            @foreach (var make in makes)
                                                            {
                                                                decimal currentBackPVR = 0;
                                                                var currBrandBackPVR = currentDateBrandBackPVR.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);
                                                                if (currBrandBackPVR != null)
                                                                {

                                                                    if (Model.SalesSummary.CurrentDate.StartDate < grossChangeDate)
                                                                    {
                                                                        // How do we close out the Finance, Service, Gap and Maintenance for each one?                                                                        
                                                                        currentBackPVR = currBrandBackPVR.AdditionalBackGrossAmount / currBrandBackPVR.Deals;
                                                                    }
                                                                    else
                                                                    {
                                                                        currentBackPVR = (currBrandBackPVR.BackGrossAmount + currBrandBackPVR.AdditionalBackGrossAmount) / currBrandBackPVR.Deals;
                                                                    }


                                                                }

                                                                /////////////////

                                                                decimal previousBackPVR = 0;
                                                                var prevBrandBackPVR = previousDateBrandBackPVR.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);
                                                                if (prevBrandBackPVR != null)
                                                                {
                                                                    if (Model.SalesSummary.PreviousDate.StartDate < grossChangeDate)
                                                                    {
                                                                        // How do we close out the Finance, Service, Gap and Maintenance for each one?                                                                        
                                                                        previousBackPVR = prevBrandBackPVR.AdditionalBackGrossAmount / prevBrandBackPVR.Deals;
                                                                    }
                                                                    else
                                                                    {
                                                                        previousBackPVR = (prevBrandBackPVR.BackGrossAmount + prevBrandBackPVR.AdditionalBackGrossAmount) / prevBrandBackPVR.Deals;
                                                                    }
                                                                }

                                                                //////////////////

                                                                decimal currentMonthBackPVR = 0;
                                                                var currBrandMonthBackPVR = currentMonthlyBrandBackPVR.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);
                                                                if (currBrandMonthBackPVR != null)
                                                                {
                                                                    if (Model.SalesSummary.CurrentMonthToDate.StartDate < grossChangeDate)
                                                                    {
                                                                        // How do we close out the Finance, Service, Gap and Maintenance for each one?                                                                        
                                                                        currentMonthBackPVR = currBrandMonthBackPVR.AdditionalBackGrossAmount / currBrandMonthBackPVR.Deals;
                                                                    }
                                                                    else
                                                                    {
                                                                        currentMonthBackPVR = (currBrandMonthBackPVR.BackGrossAmount + currBrandMonthBackPVR.AdditionalBackGrossAmount) / currBrandMonthBackPVR.Deals;
                                                                    }
                                                                }

                                                                /////////////////

                                                                decimal previousMonthBackPVR = 0;
                                                                var prevBrandMonthBackPVR = previousMonthlyBrandBackPVR.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);
                                                                if (prevBrandMonthBackPVR != null)
                                                                {

                                                                    if (Model.SalesSummary.PreviousMonthToDate.StartDate < grossChangeDate)
                                                                    {
                                                                        // How do we close out the Finance, Service, Gap and Maintenance for each one?                                                                        
                                                                        previousMonthBackPVR = prevBrandMonthBackPVR.AdditionalBackGrossAmount / prevBrandMonthBackPVR.Deals;
                                                                    }
                                                                    else
                                                                    {
                                                                        previousMonthBackPVR = (prevBrandMonthBackPVR.BackGrossAmount + prevBrandMonthBackPVR.AdditionalBackGrossAmount) / prevBrandMonthBackPVR.Deals;
                                                                    }

                                                                }

                                                                //////////////////

                                                                decimal currentYearBackPVR = 0;
                                                                var currBrandYearBackPVR = currentYearlyBrandBackPVR.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);
                                                                if (currBrandYearBackPVR != null)
                                                                {

                                                                    if (Model.SalesSummary.CurrentYearToDate.StartDate < grossChangeDate)
                                                                    {
                                                                        // How do we close out the Finance, Service, Gap and Maintenance for each one?                                                                        
                                                                        currentYearBackPVR = currBrandYearBackPVR.AdditionalBackGrossAmount / currBrandYearBackPVR.Deals;
                                                                    }
                                                                    else
                                                                    {
                                                                        currentYearBackPVR = (currBrandYearBackPVR.BackGrossAmount + currBrandYearBackPVR.AdditionalBackGrossAmount) / currBrandYearBackPVR.Deals;
                                                                    }

                                                                }

                                                                /////////////////

                                                                decimal previousYearBackPVR = 0;
                                                                var prevBrandYearBackPVR = previousYearlyBrandBackPVR.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);
                                                                if (prevBrandYearBackPVR != null)
                                                                {

                                                                    if (Model.SalesSummary.PreviousYearToDate.StartDate < grossChangeDate)
                                                                    {
                                                                        // How do we close out the Finance, Service, Gap and Maintenance for each one?                                                                        
                                                                        previousYearBackPVR = prevBrandYearBackPVR.AdditionalBackGrossAmount / prevBrandYearBackPVR.Deals;
                                                                    }
                                                                    else
                                                                    {
                                                                        previousYearBackPVR = (prevBrandYearBackPVR.BackGrossAmount + prevBrandYearBackPVR.AdditionalBackGrossAmount) / prevBrandYearBackPVR.Deals;
                                                                    }
                                                                }

                                                                //////////////////

                                                                var dayDifference = currentBackPVR - previousBackPVR;
                                                                decimal dayPercentChange = 0;
                                                                if (previousBackPVR > 0)
                                                                {
                                                                    dayPercentChange = dayDifference / previousBackPVR;
                                                                }

                                                                var monDifference = currentMonthBackPVR - previousMonthBackPVR;
                                                                decimal monPercentChange = 0;
                                                                if (previousMonthBackPVR > 0)
                                                                {
                                                                    monPercentChange = monDifference / previousMonthBackPVR;
                                                                }

                                                                var yrDifference = currentYearBackPVR - previousYearBackPVR;
                                                                decimal yrPercentChange = 0;
                                                                if (previousYearBackPVR > 0)
                                                                {
                                                                    yrPercentChange = yrDifference / previousYearBackPVR;
                                                                }


                                                                <tr>
                                                                    <td class="text-right divider-column" style="width:330px">@make</td>
                                                                    <td class="text-right">@previousBackPVR.ToString("C", nfi)</td>
                                                                    <td class="text-right">@currentBackPVR.ToString("C", nfi)</td>
                                                                    <td class="text-right">@dayDifference.ToString("C", nfi)</td>
                                                                    <td class="text-right divider-column">@dayPercentChange.ToString("P")</td>
                                                                    <td class="text-right">@previousMonthBackPVR.ToString("C", nfi)</td>
                                                                    <td class="text-right">@currentMonthBackPVR.ToString("C", nfi)</td>
                                                                    <td class="text-right">@monDifference.ToString("C", nfi)</td>
                                                                    <td class="text-right divider-column">@monPercentChange.ToString("P")</td>
                                                                    <td class="text-right">@previousYearBackPVR.ToString("C", nfi)</td>
                                                                    <td class="text-right">@currentYearBackPVR.ToString("C", nfi)</td>
                                                                    <td class="text-right">@yrDifference.ToString("C", nfi)</td>
                                                                    <td class="text-right divider-column">@yrPercentChange.ToString("P")</td>
                                                                </tr>

                                                            }

                                                        </tbody>
                                                    </table>
                                                </td>
                                            </tr>
                                                                }
                </tbody>
            </table>

        </td>

    </tr>


    <tr>
        <td class="text-right divider-column"><a data-toggle="collapse" id="Totalpvr-location" style="cursor: pointer;" data-target="#collapse-Totalpvr-location"><strong>Total PVR <i class="fa fa-caret-down" aria-hidden="true"></i></strong></a></td>

        <td class="text-right">@prevDayTotalPVRAmount.ToString("C", nfi)</td>
        <td class="text-right">@DayTotalPVRAmount.ToString("C", nfi)</td>
        <td class="text-right">@DayTotalPVRDifference.ToString("C", nfi)</td>
        <td class="text-center divider-column">@dayPercentageTotalPVR.ToString("P", nfi)</td>

        <td class="text-right">@prevMonthTotalPVRAmount.ToString("C", nfi)</td>
        <td class="text-right">@MonthTotalPVRAmount.ToString("C", nfi)</td>
        <td class="text-right">@MonthTotalPVRDifference.ToString("C", nfi)</td>
        <td class="text-center divider-column">@monthPercentageTotalPVR.ToString("P", nfi)</td>

        <td class="text-right">@prevYearTotalPVRAmount.ToString("C", nfi)</td>
        <td class="text-right">@YearTotalPVRAmount.ToString("C", nfi)</td>
        <td class="text-right">@YearTotalPVRDifference.ToString("C", nfi)</td>
        <td class="text-center divider-column">@yearPercentageTotalPVR.ToString("P", nfi)</td>

    </tr>

    <tr id="collapse-Totalpvr-location" class="collapse out" style="background-color:#e2e2e2">

        <td colspan="13">
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th class="text-center divider-column" style="width:330px">Locations</th>
                        <th class="text-center">@Model.SalesSummary.PreviousDate.StartDate.ToShortDateString()</th>
                        <th class="text-center">@Model.SalesSummary.CurrentDate.StartDate.ToShortDateString()</th>
                        <th class="text-center">Difference</th>
                        <th class="text-center divider-column">% Change</th>

                        <th class="text-center">MTD @System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(@Model.SalesSummary.PreviousMonthToDate.FiscalDate.Month) @Model.SalesSummary.PreviousYearToDate.EndDate.Year</th>
                        <th class="text-center">MTD @System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(@Model.SalesSummary.CurrentMonthToDate.FiscalDate.Month) @Model.SalesSummary.CurrentYearToDate.EndDate.Year</th>
                        <th class="text-center">Difference</th>
                        <th class="text-center divider-column">% Change</th>

                        <th class="text-center">YTD @Model.SalesSummary.PreviousYearToDate.EndDate.Year</th>
                        <th class="text-center">YTD @Model.SalesSummary.CurrentYearToDate.EndDate.Year</th>
                        <th class="text-center">Difference</th>
                        <th class="text-center divider-column">% Change</th>

                    </tr>
                </thead>
                <tbody>
                    @{
                                            var previousDateTotalPVR =
                                            from sales in Model.SalesSummary.PreviousDate.SalesData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.DealCount),
                                                TotalGrossAmount = locationGroup.Sum(x => x.GrossAmount + x.FinanceAmount + x.ServiceContractAmount + x.GapAmount + x.MaintenanceAmount),
                                                AdditionalBackGrossAmount = locationGroup.Sum(x => x.BackGrossAmount)
                                            };

                                            var previousDateBrandTotalPVR =
                                            from makesales in Model.SalesSummary.PreviousDate.SalesData
                                            group makesales by new { makesales.Location, makesales.Make } into locationMakeGroup
                                            select new
                                            {
                                                LocationMake = locationMakeGroup.Key,
                                                Deals = locationMakeGroup.Sum(x => x.DealCount),
                                                TotalGrossAmount = locationMakeGroup.Sum(x => x.GrossAmount + x.FinanceAmount + x.ServiceContractAmount + x.GapAmount + x.MaintenanceAmount),
                                                AdditionalBackGrossAmount = locationMakeGroup.Sum(x => x.BackGrossAmount)
                                            };

                                            ///////////////////////////////////////////////


                                            var currentDateTotalPVR =
                                            from sales in Model.SalesSummary.CurrentDate.SalesData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.DealCount),
                                                TotalGrossAmount = locationGroup.Sum(x => x.GrossAmount + x.FinanceAmount + x.ServiceContractAmount + x.GapAmount + x.MaintenanceAmount),
                                                AdditionalBackGrossAmount = locationGroup.Sum(x => x.BackGrossAmount)
                                            };

                                            var currentDateBrandTotalPVR =
                                            from makesales in Model.SalesSummary.CurrentDate.SalesData
                                            group makesales by new { makesales.Location, makesales.Make } into locationMakeGroup
                                            select new
                                            {
                                                LocationMake = locationMakeGroup.Key,
                                                Deals = locationMakeGroup.Sum(x => x.DealCount),
                                                TotalGrossAmount = locationMakeGroup.Sum(x => x.GrossAmount + x.FinanceAmount + x.ServiceContractAmount + x.GapAmount + x.MaintenanceAmount),
                                                AdditionalBackGrossAmount = locationMakeGroup.Sum(x => x.BackGrossAmount)
                                            };

                                            ///////////////////////////////////////////////

                                            var previousMonthlyTotalPVR =
                                            from sales in Model.SalesSummary.PreviousMonthToDate.SalesData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.DealCount),
                                                TotalGrossAmount = locationGroup.Sum(x => x.GrossAmount + x.FinanceAmount + x.ServiceContractAmount + x.GapAmount + x.MaintenanceAmount),
                                                AdditionalBackGrossAmount = locationGroup.Sum(x => x.BackGrossAmount)
                                            };

                                            var previousMonthlyBrandTotalPVR =
                                            from makesales in Model.SalesSummary.PreviousMonthToDate.SalesData
                                            group makesales by new { makesales.Location, makesales.Make } into locationMakeGroup
                                            select new
                                            {
                                                LocationMake = locationMakeGroup.Key,
                                                Deals = locationMakeGroup.Sum(x => x.DealCount),
                                                TotalGrossAmount = locationMakeGroup.Sum(x => x.GrossAmount + x.FinanceAmount + x.ServiceContractAmount + x.GapAmount + x.MaintenanceAmount),
                                                AdditionalBackGrossAmount = locationMakeGroup.Sum(x => x.BackGrossAmount)
                                            };

                                            ///////////////////////////////////////////////

                                            var currentMonthlyTotalPVR =
                                            from sales in Model.SalesSummary.CurrentMonthToDate.SalesData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.DealCount),
                                                TotalGrossAmount = locationGroup.Sum(x => x.GrossAmount + x.FinanceAmount + x.ServiceContractAmount + x.GapAmount + x.MaintenanceAmount),
                                                AdditionalBackGrossAmount = locationGroup.Sum(x => x.BackGrossAmount)
                                            };

                                            var currentMonthlyBrandTotalPVR =
                                            from makesales in Model.SalesSummary.CurrentMonthToDate.SalesData
                                            group makesales by new { makesales.Location, makesales.Make } into locationMakeGroup
                                            select new
                                            {
                                                LocationMake = locationMakeGroup.Key,
                                                Deals = locationMakeGroup.Sum(x => x.DealCount),
                                                TotalGrossAmount = locationMakeGroup.Sum(x => x.GrossAmount + x.FinanceAmount + x.ServiceContractAmount + x.GapAmount + x.MaintenanceAmount),
                                                AdditionalBackGrossAmount = locationMakeGroup.Sum(x => x.BackGrossAmount)
                                            };

                                            ///////////////////////////////////////////////

                                            var previousYearlyTotalPVR =
                                            from sales in Model.SalesSummary.PreviousYearToDate.SalesData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.DealCount),
                                                TotalGrossAmount = locationGroup.Sum(x => x.GrossAmount + x.FinanceAmount + x.ServiceContractAmount + x.GapAmount + x.MaintenanceAmount),
                                                AdditionalBackGrossAmount = locationGroup.Sum(x => x.BackGrossAmount)
                                            };

                                            var previousYearlyBrandTotalPVR =
                                            from makesales in Model.SalesSummary.PreviousYearToDate.SalesData
                                            group makesales by new { makesales.Location, makesales.Make } into locationMakeGroup
                                            select new
                                            {
                                                LocationMake = locationMakeGroup.Key,
                                                Deals = locationMakeGroup.Sum(x => x.DealCount),
                                                TotalGrossAmount = locationMakeGroup.Sum(x => x.GrossAmount + x.FinanceAmount + x.ServiceContractAmount + x.GapAmount + x.MaintenanceAmount),
                                                AdditionalBackGrossAmount = locationMakeGroup.Sum(x => x.BackGrossAmount)

                                            };

                                            ///////////////////////////////////////////////

                                            var currentYearlyTotalPVR =
                                            from sales in Model.SalesSummary.CurrentYearToDate.SalesData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.DealCount),
                                                TotalGrossAmount = locationGroup.Sum(x => x.GrossAmount + x.FinanceAmount + x.ServiceContractAmount + x.GapAmount + x.MaintenanceAmount),
                                                AdditionalBackGrossAmount = locationGroup.Sum(x => x.BackGrossAmount)
                                            };


                                            var currentYearlyBrandTotalPVR =
                                            from makesales in Model.SalesSummary.CurrentYearToDate.SalesData
                                            group makesales by new { makesales.Location, makesales.Make } into locationMakeGroup
                                            select new
                                            {
                                                LocationMake = locationMakeGroup.Key,
                                                Deals = locationMakeGroup.Sum(x => x.DealCount),
                                                TotalGrossAmount = locationMakeGroup.Sum(x => x.GrossAmount + x.FinanceAmount + x.ServiceContractAmount + x.GapAmount + x.MaintenanceAmount),
                                                AdditionalBackGrossAmount = locationMakeGroup.Sum(x => x.BackGrossAmount)
                                            };


                    }

                    @foreach (var location in locations)
                    {

                        decimal prevDateTotalPVR = 0;
                        decimal currDateTotalPVR = 0;
                        decimal prevMonthTotalPVR = 0;
                        decimal currMonthTotalPVR = 0;
                        decimal prevYearTotalPVR = 0;
                        decimal currYearTotalPVR = 0;

                        try
                        {
                            if (Model.SalesSummary.PreviousDate.StartDate < grossChangeDate)
                            {
                                // How do we close out the Finance, Service, Gap and Maintenance for each one?                                                                        
                                prevDateTotalPVR = previousDateTotalPVR.ToList().Find(x => x.Location == location).TotalGrossAmount / previousDateTotalPVR.ToList().Find(x => x.Location == location).Deals;
                            }
                            else
                            {
                                prevDateTotalPVR = (previousDateTotalPVR.ToList().Find(x => x.Location == location).TotalGrossAmount + previousDateTotalPVR.ToList().Find(x => x.Location == location).AdditionalBackGrossAmount) / previousDateTotalPVR.ToList().Find(x => x.Location == location).Deals;
                            }

                        }
                        catch
                        {
                            prevDateTotalPVR = 0;
                        }

                        try
                        {
                            
                            if (Model.SalesSummary.CurrentDate.StartDate < grossChangeDate)
                            {
                                // How do we close out the Finance, Service, Gap and Maintenance for each one?                                                                        
                                currDateTotalPVR = currentDateTotalPVR.ToList().Find(x => x.Location == location).TotalGrossAmount / currentDateTotalPVR.ToList().Find(x => x.Location == location).Deals;
                            }
                            else
                            {
                                currDateTotalPVR = (currentDateTotalPVR.ToList().Find(x => x.Location == location).TotalGrossAmount + currentDateTotalPVR.ToList().Find(x => x.Location == location).AdditionalBackGrossAmount) / currentDateTotalPVR.ToList().Find(x => x.Location == location).Deals;
                            }

                        }
                        catch
                        {
                            currDateTotalPVR = 0;
                        }

                        try
                        {
                            
                            if (Model.SalesSummary.PreviousMonthToDate.StartDate < grossChangeDate)
                            {
                                // How do we close out the Finance, Service, Gap and Maintenance for each one?                                                                        
                                prevMonthTotalPVR = previousMonthlyTotalPVR.ToList().Find(x => x.Location == location).TotalGrossAmount / previousMonthlyTotalPVR.ToList().Find(x => x.Location == location).Deals;
                            }
                            else
                            {                                
                                prevMonthTotalPVR = (previousMonthlyTotalPVR.ToList().Find(x => x.Location == location).TotalGrossAmount + previousMonthlyTotalPVR.ToList().Find(x => x.Location == location).AdditionalBackGrossAmount) / previousMonthlyTotalPVR.ToList().Find(x => x.Location == location).Deals;
                            }
                        }
                        catch
                        {
                            prevMonthTotalPVR = 0;
                        }

                        try
                        {
                            
                            if (Model.SalesSummary.CurrentMonthToDate.StartDate < grossChangeDate)
                            {
                                // How do we close out the Finance, Service, Gap and Maintenance for each one?                                                                        
                                currMonthTotalPVR = currentMonthlyTotalPVR.ToList().Find(x => x.Location == location).TotalGrossAmount / currentMonthlyTotalPVR.ToList().Find(x => x.Location == location).Deals;
                            }
                            else
                            {
                                currMonthTotalPVR = (currentMonthlyTotalPVR.ToList().Find(x => x.Location == location).TotalGrossAmount + currentMonthlyTotalPVR.ToList().Find(x => x.Location == location).AdditionalBackGrossAmount) / currentMonthlyTotalPVR.ToList().Find(x => x.Location == location).Deals;
                            }
                        }
                        catch
                        {
                            currMonthTotalPVR = 0;
                        }

                        try
                        {
                            
                            if (Model.SalesSummary.PreviousYearToDate.StartDate < grossChangeDate)
                            {
                                // How do we close out the Finance, Service, Gap and Maintenance for each one?                                                                        
                                prevYearTotalPVR = previousYearlyTotalPVR.ToList().Find(x => x.Location == location).TotalGrossAmount / previousYearlyTotalPVR.ToList().Find(x => x.Location == location).Deals;
                            }
                            else
                            {
                                prevYearTotalPVR = (previousYearlyTotalPVR.ToList().Find(x => x.Location == location).TotalGrossAmount + previousYearlyTotalPVR.ToList().Find(x => x.Location == location).AdditionalBackGrossAmount) / previousYearlyTotalPVR.ToList().Find(x => x.Location == location).Deals;
                            }
                        }
                        catch
                        {
                            prevYearTotalPVR = 0;
                        }

                        try
                        {
                            if (Model.SalesSummary.CurrentDate.StartDate < grossChangeDate)
                            {
                                // How do we close out the Finance, Service, Gap and Maintenance for each one?                                                                        
                                currYearTotalPVR = currentYearlyTotalPVR.ToList().Find(x => x.Location == location).TotalGrossAmount / currentYearlyTotalPVR.ToList().Find(x => x.Location == location).Deals;
                            }
                            else
                            {
                                currYearTotalPVR = (currentYearlyTotalPVR.ToList().Find(x => x.Location == location).TotalGrossAmount + currentYearlyTotalPVR.ToList().Find(x => x.Location == location).AdditionalBackGrossAmount) / currentYearlyTotalPVR.ToList().Find(x => x.Location == location).Deals;
                            }
                        }
                        catch
                        {
                            currYearTotalPVR = 0;
                        }


                        var dateDifference = currDateTotalPVR - prevDateTotalPVR;
                        decimal datePercentChange = 0;
                        if (prevDateTotalPVR > 0)
                        {
                            datePercentChange = dateDifference / prevDateTotalPVR;
                        }

                        var monthDifference = currMonthTotalPVR - prevMonthTotalPVR;
                        decimal monthPercentChange = 0;
                        if (prevMonthTotalPVR > 0)
                        {
                            monthPercentChange = monthDifference / prevMonthTotalPVR;
                        }

                        var yearDifference = currYearTotalPVR - prevYearTotalPVR;
                        decimal yearPercentChange = 0;
                        if (prevYearTotalPVR > 0)
                        {
                            yearPercentChange = yearDifference / prevYearTotalPVR;
                        }

                        var displayLocation = location;
                        switch (location)
                        {
                            case "Annapolis":
                                displayLocation = "Annapolis Cadillac/Volkswagen";
                                break;
                            case "Annapolis(Classic)":
                                displayLocation = "Annapolis Mazda/Mitsubishi";
                                break;
                            case "Chambersburg":
                                displayLocation = "Chambersburg";
                                break;
                            case "Clearwater Chrysler/Jeep":
                                displayLocation = "Clearwater Chrysler/Jeep";
                                break;
                            case "Colonial":
                                displayLocation = "Rockville Hyundai";
                                break;
                            case "Frederick":
                                displayLocation = "Frederick";
                                break;
                            case "Germantown":
                                displayLocation = "Germantown";
                                break;
                            case "Hagerstown(CDJR)":
                                displayLocation = "Hagerstown Chrysler";
                                break;
                            case "Hagerstown(GM)":
                                displayLocation = "Hagerstown GM";
                                break;
                            case "Lakeforest(355)":
                                displayLocation = "Gaitherburg Toyota";
                                break;
                            case "Lakeforest(Russell)":
                                displayLocation = "Gaithersburg Hyundai/Subaru";
                                break;
                            case "LexingtonPark(LexPark)":
                                displayLocation = "Lexington Park";
                                break;
                            case "Nicholson":
                                displayLocation = "Rockville Buick/GMC";
                                break;
                            case "Subaru":
                                displayLocation = "Rockville Subaru";
                                break;
                            case "Wheaton":
                                displayLocation = "Wheaton";
                                break;
                            case "Superstore":
                                displayLocation = "Frederick Rt 85";
                                break;
                        }




                                        <tr>
                                            <td class="text-right divider-column" style="width:330px"><a data-toggle="collapse" id="deal-brand" style="cursor: pointer;" data-target="#collapse-@location.Replace("(", "").Replace(")", "")-brandTotalpvr">@displayLocation <i class="fa fa-caret-down" aria-hidden="true"></i></a></td>
                                            <td class="text-right">@prevDateTotalPVR.ToString("C", nfi)</td>
                                            <td class="text-right">@currDateTotalPVR.ToString("C", nfi)</td>
                                            <td class="text-right">@dateDifference.ToString("C", nfi)</td>
                                            <td class="text-right divider-column">@datePercentChange.ToString("P")</td>
                                            <td class="text-right">@prevMonthTotalPVR.ToString("C", nfi)</td>
                                            <td class="text-right">@currMonthTotalPVR.ToString("C", nfi)</td>
                                            <td class="text-right">@monthDifference.ToString("C", nfi)</td>
                                            <td class="text-right divider-column">@monthPercentChange.ToString("P")</td>
                                            <td class="text-right">@prevYearTotalPVR.ToString("C", nfi)</td>
                                            <td class="text-right">@currYearTotalPVR.ToString("C", nfi)</td>
                                            <td class="text-right">@yearDifference.ToString("C", nfi)</td>
                                            <td class="text-right divider-column">@yearPercentChange.ToString("P")</td>
                                        </tr>
                                        <tr id="collapse-@location.Replace("(", "").Replace(")", "")-brandTotalpvr" class="collapse out" style="background-color:#e2e2e2">
                                            <td colspan="13">
                                                <table class="table table-bordered">
                                                    <thead>
                                                        <tr style="">
                                                            <th class="text-center divider-column" style="width:330px">Brands</th>
                                                            <th class="text-center">@Model.SalesSummary.PreviousDate.StartDate.ToShortDateString()</th>
                                                            <th class="text-center">@Model.SalesSummary.CurrentDate.StartDate.ToShortDateString()</th>
                                                            <th class="text-center">Difference</th>
                                                            <th class="text-center divider-column">% Change</th>

                                                            <th class="text-center">MTD @System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(@Model.SalesSummary.PreviousMonthToDate.FiscalDate.Month) @Model.SalesSummary.PreviousYearToDate.EndDate.Year</th>
                                                            <th class="text-center">MTD @System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(@Model.SalesSummary.CurrentMonthToDate.FiscalDate.Month) @Model.SalesSummary.CurrentYearToDate.EndDate.Year</th>
                                                            <th class="text-center">Difference</th>
                                                            <th class="text-center divider-column">% Change</th>

                                                            <th class="text-center">YTD @Model.SalesSummary.PreviousYearToDate.EndDate.Year</th>
                                                            <th class="text-center">YTD @Model.SalesSummary.CurrentYearToDate.EndDate.Year</th>
                                                            <th class="text-center">Difference</th>
                                                            <th class="text-center divider-column">% Change</th>

                                                        </tr>
                                                    </thead>
                                                    <tbody>
                                                        @{
                                                                var makes = new List<string>();
                                                                foreach (var item in currentYearlyBrandSales)
                                                                {
                                                                    if (item.LocationMake.Location == location)
                                                                    {
                                                                        makes.Add(item.LocationMake.Make);

                                                                    }
                                                                }
                                                        }
                                                        @foreach (var make in makes)
                                                        {
                                                            decimal currentTotalPVR = 0;
                                                            var currBrandTotalPVR = currentDateBrandTotalPVR.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);
                                                            if (currBrandTotalPVR != null)
                                                            {
                                                                if (Model.SalesSummary.CurrentDate.StartDate < grossChangeDate)
                                                                {
                                                                    // How do we close out the Finance, Service, Gap and Maintenance for each one?                                                                        
                                                                    currentTotalPVR = currBrandTotalPVR.TotalGrossAmount / currBrandTotalPVR.Deals;
                                                                }
                                                                else
                                                                {
                                                                    currentTotalPVR = (currBrandTotalPVR.TotalGrossAmount + currBrandTotalPVR.AdditionalBackGrossAmount) / currBrandTotalPVR.Deals;
                                                                }
                                                            }

                                                            /////////////////

                                                            decimal previousTotalPVR = 0;
                                                            var prevBrandTotalPVR = previousDateBrandTotalPVR.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);
                                                            if (prevBrandTotalPVR != null)
                                                            {

                                                                if (Model.SalesSummary.PreviousDate.StartDate < grossChangeDate)
                                                                {
                                                                    // How do we close out the Finance, Service, Gap and Maintenance for each one?                                                                        
                                                                    previousTotalPVR = prevBrandTotalPVR.TotalGrossAmount / prevBrandTotalPVR.Deals;
                                                                }
                                                                else
                                                                {
                                                                    previousTotalPVR = (prevBrandTotalPVR.TotalGrossAmount + prevBrandTotalPVR.AdditionalBackGrossAmount) / prevBrandTotalPVR.Deals;
                                                                }

                                                            }

                                                            //////////////////

                                                            decimal currentMonthTotalPVR = 0;
                                                            var currBrandMonthTotalPVR = currentMonthlyBrandTotalPVR.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);
                                                            if (currBrandMonthTotalPVR != null)
                                                            {

                                                                if (Model.SalesSummary.CurrentMonthToDate.StartDate < grossChangeDate)
                                                                {
                                                                    // How do we close out the Finance, Service, Gap and Maintenance for each one?                                                                        
                                                                    currentMonthTotalPVR = currBrandMonthTotalPVR.TotalGrossAmount / currBrandMonthTotalPVR.Deals;
                                                                }
                                                                else
                                                                {
                                                                    currentMonthTotalPVR = (currBrandMonthTotalPVR.TotalGrossAmount + currBrandMonthTotalPVR.AdditionalBackGrossAmount) / currBrandMonthTotalPVR.Deals;
                                                                }

                                                            }

                                                            /////////////////

                                                            decimal previousMonthTotalPVR = 0;
                                                            var prevBrandMonthTotalPVR = previousMonthlyBrandTotalPVR.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);
                                                            if (prevBrandMonthTotalPVR != null)
                                                            {

                                                                if (Model.SalesSummary.PreviousMonthToDate.StartDate < grossChangeDate)
                                                                {
                                                                    // How do we close out the Finance, Service, Gap and Maintenance for each one?                                                                        
                                                                    previousMonthTotalPVR = prevBrandMonthTotalPVR.TotalGrossAmount / prevBrandMonthTotalPVR.Deals;
                                                                }
                                                                else
                                                                {
                                                                    previousMonthTotalPVR = (prevBrandMonthTotalPVR.TotalGrossAmount + prevBrandMonthTotalPVR.AdditionalBackGrossAmount) / prevBrandMonthTotalPVR.Deals;
                                                                }

                                                            }

                                                            //////////////////

                                                            decimal currentYearTotalPVR = 0;
                                                            var currBrandYearTotalPVR = currentYearlyBrandTotalPVR.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);
                                                            if (currBrandYearTotalPVR != null)
                                                            {

                                                                if (Model.SalesSummary.CurrentYearToDate.StartDate < grossChangeDate)
                                                                {
                                                                    // How do we close out the Finance, Service, Gap and Maintenance for each one?                                                                        
                                                                    currentYearTotalPVR = currBrandYearTotalPVR.TotalGrossAmount / currBrandYearTotalPVR.Deals;
                                                                }
                                                                else
                                                                {
                                                                    currentYearTotalPVR = (currBrandYearTotalPVR.TotalGrossAmount + currBrandYearTotalPVR.AdditionalBackGrossAmount) / currBrandYearTotalPVR.Deals;
                                                                }

                                                            }

                                                            /////////////////

                                                            decimal previousYearTotalPVR = 0;
                                                            var prevBrandYearTotalPVR = previousYearlyBrandTotalPVR.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);
                                                            if (prevBrandYearTotalPVR != null)
                                                            {

                                                                if (Model.SalesSummary.PreviousYearToDate.StartDate < grossChangeDate)
                                                                {
                                                                    // How do we close out the Finance, Service, Gap and Maintenance for each one?                                                                        
                                                                    previousYearTotalPVR = prevBrandYearTotalPVR.TotalGrossAmount / prevBrandYearTotalPVR.Deals;
                                                                }
                                                                else
                                                                {
                                                                    previousYearTotalPVR = (prevBrandYearTotalPVR.TotalGrossAmount + prevBrandYearTotalPVR.AdditionalBackGrossAmount) / prevBrandYearTotalPVR.Deals;
                                                                }

                                                            }

                                                            //////////////////

                                                            var dayDifference = currentTotalPVR - previousTotalPVR;
                                                            decimal dayPercentChange = 0;
                                                            if (previousTotalPVR > 0)
                                                            {
                                                                dayPercentChange = dayDifference / previousTotalPVR;
                                                            }

                                                            var monDifference = currentMonthTotalPVR - previousMonthTotalPVR;
                                                            decimal monPercentChange = 0;
                                                            if (previousMonthTotalPVR > 0)
                                                            {
                                                                monPercentChange = monDifference / previousMonthTotalPVR;
                                                            }

                                                            var yrDifference = currentYearTotalPVR - previousYearTotalPVR;
                                                            decimal yrPercentChange = 0;
                                                            if (previousYearTotalPVR > 0)
                                                            {
                                                                yrPercentChange = yrDifference / previousYearTotalPVR;
                                                            }


                                                            <tr>
                                                                <td class="text-right divider-column" style="width:330px">@make</td>
                                                                <td class="text-right">@previousTotalPVR.ToString("C", nfi)</td>
                                                                <td class="text-right">@currentTotalPVR.ToString("C", nfi)</td>
                                                                <td class="text-right">@dayDifference.ToString("C", nfi)</td>
                                                                <td class="text-right divider-column">@dayPercentChange.ToString("P")</td>
                                                                <td class="text-right">@previousMonthTotalPVR.ToString("C", nfi)</td>
                                                                <td class="text-right">@currentMonthTotalPVR.ToString("C", nfi)</td>
                                                                <td class="text-right">@monDifference.ToString("C", nfi)</td>
                                                                <td class="text-right divider-column">@monPercentChange.ToString("P")</td>
                                                                <td class="text-right">@previousYearTotalPVR.ToString("C", nfi)</td>
                                                                <td class="text-right">@currentYearTotalPVR.ToString("C", nfi)</td>
                                                                <td class="text-right">@yrDifference.ToString("C", nfi)</td>
                                                                <td class="text-right divider-column">@yrPercentChange.ToString("P")</td>
                                                            </tr>

                                                            }

                                                    </tbody>
                                                </table>
                                            </td>
                                        </tr>
                                                                }
                </tbody>
            </table>

        </td>

    </tr>

    @{


        var currentMonthDate = Model.SalesSummary.CurrentMonthToDate.EndDate;
        var currentMonthID = currentMonthDate.Month;
        var currentYearID = currentMonthDate.Year;

        var currentMEFTD = Model.SalesSummary.FactoryToDealerMoney.FindAll(x => x.MonthId == Model.MonthId && x.YearId == Model.YearId);
        //var newCarSalesData = Model.SalesSummary.CurrentMonthToDate.SalesData.FindAll(x => !x.Make.Contains("Used"));
        var newCarSalesTotal = Model.SalesSummary.CurrentMonthToDate.SalesData.Sum(x => x.DealCount);

        decimal currentMEFTDTotal = 0;
        foreach (var ftdCash in currentMEFTD)
        {
            currentMEFTDTotal += ftdCash.FactoryToDealerAmount + ftdCash.FactoryToDealerAmountUsed;
        }

        decimal MonthMEFTDPVRAmount = 0;

        if (newCarSalesTotal > 0)
        {
            MonthMEFTDPVRAmount = currentMEFTDTotal / newCarSalesTotal;
        }

        var previousMonthDate = Model.SalesSummary.PreviousMonthToDate.EndDate;
        var previousMonthID = previousMonthDate.Month;
        var previousYearID = previousMonthDate.Year;

        var previousMEFTD = Model.SalesSummary.FactoryToDealerMoney.FindAll(x => x.MonthId == previousMonthID && x.YearId == previousYearID);
        //var prevnewCarSalesData = Model.SalesSummary.PreviousMonthToDate.SalesData.FindAll(x => !x.Make.Contains("Used"));
        //var prevnewCarSalesTotal = Model.SalesSummary.PreviousMonthToDate.SalesData.Sum(x => x.DealCount);

        var prevMonthTotalDeals = Model.SalesSummary.PreviousMonthTotalDealCount;

        decimal previousMEFTDTotal = 0;
        foreach (var ftdCash in previousMEFTD)
        {
            previousMEFTDTotal += ftdCash.FactoryToDealerAmount + ftdCash.FactoryToDealerAmountUsed;
        }

        var prevMonthMEFTDPVRAmount = previousMEFTDTotal / prevMonthTotalDeals;



        var previousYearMonthDate = Model.SalesSummary.PreviousYearToDate.EndDate;
        var previousYearMonthID = previousYearMonthDate.Month;
        var previousYearYearID = previousYearMonthDate.Year;

        var previousYearMEFTD = Model.SalesSummary.FactoryToDealerMoney.FindAll(x => (x.MonthId >= 1 && x.MonthId <= previousYearMonthID) && x.YearId == previousYearYearID);
        //var prevYearnewCarSalesData = Model.SalesSummary.PreviousYearToDate.SalesData.FindAll(x => !x.Make.Contains("Used"));
        //var prevYearnewCarSalesTotal = Model.SalesSummary.PreviousYearToDate.SalesData.Sum(x => x.DealCount);

        var prevYearTotalDeals = Model.SalesSummary.PreviousYearTotalDealCount;


        decimal previousYearMEFTDTotal = 0;
        foreach (var ftdCash in previousYearMEFTD)
        {
            previousYearMEFTDTotal += ftdCash.FactoryToDealerAmount + ftdCash.FactoryToDealerAmountUsed;
        }

        decimal prevYearMEFTDPVRAmount = 0;
        if (prevYearTotalDeals > 0)
        {
            prevYearMEFTDPVRAmount = previousYearMEFTDTotal / prevYearTotalDeals;
        }


        var currentYearMonthDate = Model.SalesSummary.CurrentYearToDate.EndDate;
        var currentYearMonthID = currentYearMonthDate.Month;
        var currentYearYearID = currentYearMonthDate.Year;

        var currentYearMEFTD = Model.SalesSummary.FactoryToDealerMoney.FindAll(x => (x.MonthId >= 1 && x.MonthId <= currentYearMonthID) && x.YearId == currentYearYearID);
        //var currYearnewCarSalesData = Model.SalesSummary.CurrentYearToDate.SalesData.FindAll(x => !x.Make.Contains("Used"));
        var currYearnewCarSalesTotal = Model.SalesSummary.CurrentYearToDate.SalesData.Sum(x => x.DealCount);

        decimal currentYearMEFTDTotal = 0;
        foreach (var ftdCash in currentYearMEFTD)
        {
            currentYearMEFTDTotal += ftdCash.FactoryToDealerAmount + ftdCash.FactoryToDealerAmountUsed;
        }

        var YearMEFTDPVRAmount = currentYearMEFTDTotal / currYearnewCarSalesTotal;

        var MonthMEFTDPVRDifference = MonthMEFTDPVRAmount - prevMonthMEFTDPVRAmount;
        var YearMEFTDPVRDifference = YearMEFTDPVRAmount - prevYearMEFTDPVRAmount;

        var monthPercentageMEFTDPVR = MonthMEFTDPVRDifference / prevMonthMEFTDPVRAmount;

        decimal yearPercentageMEFTDPVR = 0;
        if (prevYearMEFTDPVRAmount > 0)
        {
             yearPercentageMEFTDPVR = YearMEFTDPVRDifference / prevYearMEFTDPVRAmount;
        }
        var showMEFTDDate = new DateTime(Model.YearId, Model.MonthId, 28);
    }
                        <tr>
                            <td class="text-right divider-column"><a data-toggle="collapse" id="MEFTDpvr-location" style="cursor: pointer;" data-target="#collapse-MEFTDpvr-location"><strong>ME FTD PVR <i class="fa fa-caret-down" aria-hidden="true"></i></strong></a></td>

                            <td class="text-right">-</td>
                            <td class="text-right">-</td>
                            <td class="text-right">-</td>
                            <td class="text-center divider-column">-</td>

                            <td class="text-right">@prevMonthMEFTDPVRAmount.ToString("C", nfi)</td>
                            @if(DateTime.Now < showMEFTDDate)
                            {
                                <td class="text-right">-</td>
                                <td class="text-right">-</td>
                                <td class="text-center divider-column">-</td>
                            }
                            else
                            {
                                <td class="text-right">@MonthMEFTDPVRAmount.ToString("C", nfi)</td>
                                <td class="text-right">@MonthMEFTDPVRDifference.ToString("C", nfi)</td>
                                <td class="text-center divider-column">@monthPercentageMEFTDPVR.ToString("P", nfi)</td>
                            
                            }
                            <td class="text-right">@prevYearMEFTDPVRAmount.ToString("C", nfi)</td>
                            <td class="text-right">@YearMEFTDPVRAmount.ToString("C", nfi)</td>
                            <td class="text-right">@YearMEFTDPVRDifference.ToString("C", nfi)</td>
                            <td class="text-center divider-column">@yearPercentageMEFTDPVR.ToString("P", nfi)</td>
                            
                        </tr>

                        <tr id="collapse-MEFTDpvr-location" class="collapse out" style="background-color:#e2e2e2">

                            <td colspan="13">
                                <table class="table table-bordered">
                                    <thead>
                                        <tr>
                                            <th class="text-center divider-column" style="width:330px">Locations</th>
                                            <th class="text-center">@Model.SalesSummary.PreviousDate.StartDate.ToShortDateString()</th>
                                            <th class="text-center">@Model.SalesSummary.CurrentDate.StartDate.ToShortDateString()</th>
                                            <th class="text-center">Difference</th>
                                            <th class="text-center divider-column">% Change</th>

                                            <th class="text-center">MTD @System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(@Model.SalesSummary.PreviousMonthToDate.FiscalDate.Month) @Model.SalesSummary.PreviousYearToDate.EndDate.Year</th>
                                            <th class="text-center">MTD @System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(@Model.SalesSummary.CurrentMonthToDate.FiscalDate.Month) @Model.SalesSummary.CurrentYearToDate.EndDate.Year</th>
                                            <th class="text-center">Difference</th>
                                            <th class="text-center divider-column">% Change</th>

                                            <th class="text-center">YTD @Model.SalesSummary.PreviousYearToDate.EndDate.Year</th>
                                            <th class="text-center">YTD @Model.SalesSummary.CurrentYearToDate.EndDate.Year</th>
                                            <th class="text-center">Difference</th>
                                            <th class="text-center divider-column">% Change</th>

                                        </tr>
                                    </thead>
                                    <tbody>
                                        @{


                                            var previousMonthlyMEFTDPVR =
                                            from sales in previousMEFTD
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                MEFTD = locationGroup.Sum(x => x.FactoryToDealerAmount + x.FactoryToDealerAmountUsed),
                                            };

                                            var previousMonthlyBrandMEFTDPVR =
                                            from makesales in previousMEFTD
                                            group makesales by new { makesales.Location, makesales.Brand } into locationMakeGroup
                                            select new
                                            {
                                                LocationMake = locationMakeGroup.Key,
                                                MEFTD = locationMakeGroup.Sum(x => x.FactoryToDealerAmount),
                                                UsedMEFTD = locationMakeGroup.Sum(x => x.FactoryToDealerAmountUsed)
                                            };

                                            ///////////////////////////////////////////////

                                            var currentMonthlyMEFTDPVR =
                                            from sales in currentMEFTD
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                MEFTD = locationGroup.Sum(x => x.FactoryToDealerAmount + x.FactoryToDealerAmountUsed),
                                            };

                                            var currentMonthlyBrandMEFTDPVR =
                                            from makesales in currentMEFTD
                                            group makesales by new { makesales.Location, makesales.Brand } into locationMakeGroup
                                            select new
                                            {
                                                LocationMake = locationMakeGroup.Key,
                                                MEFTD = locationMakeGroup.Sum(x => x.FactoryToDealerAmount),
                                                UsedMEFTD = locationMakeGroup.Sum(x => x.FactoryToDealerAmountUsed)
                                            };

                                            ///////////////////////////////////////////////

                                            var previousYearlyMEFTDPVR =
                                            from sales in previousYearMEFTD
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                MEFTD = locationGroup.Sum(x => x.FactoryToDealerAmount + x.FactoryToDealerAmountUsed),
                                            };

                                            var previousYearlyBrandMEFTDPVR =
                                            from makesales in previousYearMEFTD
                                            group makesales by new { makesales.Location, makesales.Brand } into locationMakeGroup
                                            select new
                                            {
                                                LocationMake = locationMakeGroup.Key,
                                                MEFTD = locationMakeGroup.Sum(x => x.FactoryToDealerAmount),
                                                UsedMEFTD = locationMakeGroup.Sum(x => x.FactoryToDealerAmountUsed)

                                            };

                                            ///////////////////////////////////////////////

                                            var currentYearlyMEFTDPVR =
                                            from sales in currentYearMEFTD
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                MEFTD = locationGroup.Sum(x => x.FactoryToDealerAmount + x.FactoryToDealerAmountUsed),

                                            };


                                            var currentYearlyBrandMEFTDPVR =
                                            from makesales in currentYearMEFTD
                                            group makesales by new { makesales.Location, makesales.Brand } into locationMakeGroup
                                            select new
                                            {
                                                LocationMake = locationMakeGroup.Key,
                                                MEFTD = locationMakeGroup.Sum(x => x.FactoryToDealerAmount),
                                                UsedMEFTD = locationMakeGroup.Sum(x => x.FactoryToDealerAmountUsed)

                                            };


                                        }

                                        @foreach (var location in locations)
                                        {

                                            decimal prevDateMEFTDPVR = 0;
                                            decimal currDateMEFTDPVR = 0;
                                            decimal prevMonthMEFTDPVR = 0;
                                            decimal currMonthMEFTDPVR = 0;
                                            decimal prevYearMEFTDPVR = 0;
                                            decimal currYearMEFTDPVR = 0;

                                            var displayLocation = location;
                                            var ftdLocation = location;
                                            switch (location)
                                            {
                                                case "Annapolis":
                                                    displayLocation = "Annapolis Cadillac/Volkswagen";
                                                    ftdLocation = "FOC";
                                                    break;
                                                case "Annapolis(Classic)":
                                                    displayLocation = "Annapolis Mazda/Mitsubishi";
                                                    ftdLocation = "FMM";
                                                    break;
                                                case "Chambersburg":
                                                    displayLocation = "Chambersburg";
                                                    ftdLocation = "FTN";
                                                    break;
                                                case "Clearwater":
                                                    displayLocation = "Clearwater";
                                                    ftdLocation = "CJE";
                                                    break;
                                                case "Colonial":
                                                    displayLocation = "Rockville Hyundai";
                                                    ftdLocation = "CDO";
                                                    break;
                                                case "Frederick":
                                                    displayLocation = "Frederick";
                                                    ftdLocation = "FAM";
                                                    break;
                                                case "Germantown":
                                                    displayLocation = "Germantown";
                                                    ftdLocation = "LFM";
                                                    break;
                                                case "Hagerstown(CDJR)":
                                                    displayLocation = "Hagerstown Chrysler";
                                                    ftdLocation = "FHT";
                                                    break;
                                                case "Hagerstown(GM)":
                                                    displayLocation = "Hagerstown GM";
                                                    ftdLocation = "FHG";
                                                    break;
                                                case "Lakeforest(355)":
                                                    displayLocation = "Gaitherburg Toyota";
                                                    ftdLocation = "LFT";
                                                    break;
                                                case "Lakeforest(Russell)":
                                                    displayLocation = "Gaithersburg Hyundai/Subaru";
                                                    ftdLocation = "LFO";
                                                    break;
                                                case "LexingtonPark(LexPark)":
                                                    displayLocation = "Lexington Park";
                                                    ftdLocation = "FLP";
                                                    break;
                                                case "Nicholson":
                                                    displayLocation = "Rockville Buick/GMC";
                                                    ftdLocation = "FBN";
                                                    break;
                                                case "Subaru":
                                                    displayLocation = "Rockville Subaru";
                                                    ftdLocation = "FBS";
                                                    break;
                                                case "Wheaton":
                                                    displayLocation = "Wheaton";
                                                    ftdLocation = "WDC";
                                                    break;
                                                case "Superstore":
                                                    displayLocation = "Frederick Rt 85";
                                                    ftdLocation = "FSS";
                                                    break;
                                            }

                                            try
                                            {

                                                var locPrevMonth = Model.SalesSummary.PreviousMonthToDate.SalesData.FindAll(x => x.Location == location).Sum(x => x.DealCount);

                                                prevMonthMEFTDPVR = previousMonthlyMEFTDPVR.ToList().Find(x => x.Location == ftdLocation).MEFTD / locPrevMonth;
                                            }
                                            catch
                                            {
                                                prevMonthMEFTDPVR = 0;
                                            }

                                            try
                                            {
                                                var locCurrentMonth = Model.SalesSummary.CurrentMonthToDate.SalesData.FindAll(x => x.Location == location).Sum(x => x.DealCount);

                                                currMonthMEFTDPVR = currentMonthlyMEFTDPVR.ToList().Find(x => x.Location == ftdLocation).MEFTD / locCurrentMonth;
                                            }
                                            catch
                                            {
                                                currMonthMEFTDPVR = 0;
                                            }

                                            try
                                            {
                                                var locPrevYear = Model.SalesSummary.PreviousYearToDate.SalesData.FindAll(x => x.Location == location).Sum(x => x.DealCount);

                                                prevYearMEFTDPVR = previousYearlyMEFTDPVR.ToList().Find(x => x.Location == ftdLocation).MEFTD / locPrevYear;
                                            }
                                            catch
                                            {
                                                prevYearMEFTDPVR = 0;
                                            }

                                            try
                                            {
                                                var locCurrentYear = Model.SalesSummary.CurrentYearToDate.SalesData.FindAll(x => x.Location == location).Sum(x => x.DealCount);

                                                currYearMEFTDPVR = currentYearlyMEFTDPVR.ToList().Find(x => x.Location == ftdLocation).MEFTD / locCurrentYear;
                                            }
                                            catch
                                            {
                                                currYearMEFTDPVR = 0;
                                            }


                                            var dateDifference = currDateMEFTDPVR - prevDateMEFTDPVR;
                                            decimal datePercentChange = 0;
                                            if (prevDateMEFTDPVR > 0)
                                            {
                                                datePercentChange = dateDifference / prevDateMEFTDPVR;
                                            }

                                            var monthDifference = currMonthMEFTDPVR - prevMonthMEFTDPVR;
                                            decimal monthPercentChange = 0;
                                            if (prevMonthMEFTDPVR > 0)
                                            {
                                                monthPercentChange = monthDifference / prevMonthMEFTDPVR;
                                            }

                                            var yearDifference = currYearMEFTDPVR - prevYearMEFTDPVR;
                                            decimal yearPercentChange = 0;
                                            if (prevYearMEFTDPVR > 0)
                                            {
                                                yearPercentChange = yearDifference / prevYearMEFTDPVR;
                                            }

                                            <tr>
                                                <td class="text-right divider-column" style="width:330px"><a data-toggle="collapse" id="deal-brand" style="cursor: pointer;" data-target="#collapse-@location.Replace("(", "").Replace(")", "")-brandMEFTDpvr">@displayLocation <i class="fa fa-caret-down" aria-hidden="true"></i></a></td>
                                                <td class="text-right">-</td>
                                                <td class="text-right">-</td>
                                                <td class="text-right">-</td>
                                                <td class="text-right divider-column">-</td>
                                                <td class="text-right">@prevMonthMEFTDPVR.ToString("C", nfi)</td>
                                                <td class="text-right">@currMonthMEFTDPVR.ToString("C", nfi)</td>
                                                <td class="text-right">@monthDifference.ToString("C", nfi)</td>
                                                <td class="text-right divider-column">@monthPercentChange.ToString("P")</td>
                                                <td class="text-right">@prevYearMEFTDPVR.ToString("C", nfi)</td>
                                                <td class="text-right">@currYearMEFTDPVR.ToString("C", nfi)</td>
                                                <td class="text-right">@yearDifference.ToString("C", nfi)</td>
                                                <td class="text-right divider-column">@yearPercentChange.ToString("P")</td>
                                            </tr>
                                            <tr id="collapse-@location.Replace("(", "").Replace(")", "")-brandMEFTDpvr" class="collapse out" style="background-color:#e2e2e2">
                                                <td colspan="13">
                                                    <table class="table table-bordered">
                                                        <thead>
                                                            <tr style="">
                                                                <th class="text-center divider-column" style="width:330px">Brands</th>
                                                                <th class="text-center">@Model.SalesSummary.PreviousDate.StartDate.ToShortDateString()</th>
                                                                <th class="text-center">@Model.SalesSummary.CurrentDate.StartDate.ToShortDateString()</th>
                                                                <th class="text-center">Difference</th>
                                                                <th class="text-center divider-column">% Change</th>

                                                                <th class="text-center">MTD @System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(@Model.SalesSummary.PreviousMonthToDate.FiscalDate.Month) @Model.SalesSummary.PreviousYearToDate.EndDate.Year</th>
                                                                <th class="text-center">MTD @System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(@Model.SalesSummary.CurrentMonthToDate.FiscalDate.Month) @Model.SalesSummary.CurrentYearToDate.EndDate.Year</th>
                                                                <th class="text-center">Difference</th>
                                                                <th class="text-center divider-column">% Change</th>

                                                                <th class="text-center">YTD @Model.SalesSummary.PreviousYearToDate.EndDate.Year</th>
                                                                <th class="text-center">YTD @Model.SalesSummary.CurrentYearToDate.EndDate.Year</th>
                                                                <th class="text-center">Difference</th>
                                                                <th class="text-center divider-column">% Change</th>

                                                            </tr>
                                                        </thead>
                                                        <tbody>
                                                            @{
                                                                var makes = new List<string>();
                                                                foreach (var item in currentYearlyBrandSales)
                                                                {
                                                                    if (item.LocationMake.Location == location)
                                                                    {
                                                                        makes.Add(item.LocationMake.Make);

                                                                    }
                                                                }
                                                            }
                                                            @foreach (var make in makes)
                                                            {
                                                                var ftdMake = make;
                                                                switch(make)
                                                                {
                                                                    case "Cadillac":
                                                                        ftdMake = "CD";
                                                                        break;
                                                                    case "Chevrolet":
                                                                        ftdMake = "CV";
                                                                        break;
                                                                    case "Buick":
                                                                        ftdMake = "BU";
                                                                        break;
                                                                    case "GMC":
                                                                        ftdMake = "GC";
                                                                        break;
                                                                    case "Volkswagen":
                                                                        ftdMake = "VW";
                                                                        break;
                                                                    case "Mazda":
                                                                        ftdMake = "MA";
                                                                        break;
                                                                    case "Mitsubishi":
                                                                        ftdMake = "MI";
                                                                        break;
                                                                    case "Chrysler":
                                                                        ftdMake = "CH";
                                                                        break;
                                                                    case "Dodge":
                                                                        ftdMake = "DO";
                                                                        break;
                                                                    case "Jeep":
                                                                        ftdMake = "JE";
                                                                        break;
                                                                    case "RAM":
                                                                        ftdMake = "RA";
                                                                        break;
                                                                    case "Toyota":
                                                                        ftdMake = "TO";
                                                                        break;
                                                                    case "Nissan":
                                                                        ftdMake = "NI";
                                                                        break;
                                                                    case "Subaru":
                                                                        ftdMake = "SU";
                                                                        break;
                                                                    case "Hyundai":
                                                                        ftdMake = "HY";
                                                                        break;
                                                                    case "Genesis":
                                                                        ftdMake = "XG";
                                                                        break;
                                                                }

                                                                //////////////////

                                                                decimal currentMonthMEFTDPVR = 0;
                                                                decimal previousMonthMEFTDPVR = 0;
                                                                decimal currentYearMEFTDPVR = 0;
                                                                decimal previousYearMEFTDPVR = 0;

                                                                if (make == "Used")
                                                                {
                                                                    var currBrandMonthMEFTDPVR = currentMonthlyBrandMEFTDPVR.ToList().FindAll(x => x.LocationMake.Location == ftdLocation).Sum(x =>x.UsedMEFTD);
                                                                    var locMakeCurrentMonth = Model.SalesSummary.CurrentMonthToDate.SalesData.FindAll(x => x.Location == location && x.Make == make).Sum(x => x.DealCount);

                                                                    if (locMakeCurrentMonth > 0)
                                                                    {
                                                                        currentMonthMEFTDPVR = currBrandMonthMEFTDPVR / locMakeCurrentMonth;
                                                                    }

                                                                    var prevBrandMonthMEFTDPVR = previousMonthlyBrandMEFTDPVR.ToList().FindAll(x => x.LocationMake.Location == ftdLocation).Sum(x => x.UsedMEFTD);
                                                                    var locMakePreviousMonth = Model.SalesSummary.PreviousMonthToDate.SalesData.FindAll(x => x.Location == location && x.Make == make).Sum(x => x.DealCount);

                                                                    if (locMakePreviousMonth > 0)
                                                                    {
                                                                        previousMonthMEFTDPVR = prevBrandMonthMEFTDPVR / locMakePreviousMonth;
                                                                    }

                                                                    //////////////////
                                                                    var currBrandYearMEFTDPVR = currentYearlyBrandMEFTDPVR.ToList().FindAll(x => x.LocationMake.Location == ftdLocation).Sum(x => x.UsedMEFTD);
                                                                    var locMakeCurrentYear = Model.SalesSummary.CurrentYearToDate.SalesData.FindAll(x => x.Location == location && x.Make == make).Sum(x => x.DealCount);

                                                                    if (locMakeCurrentYear > 0)
                                                                    {
                                                                        currentYearMEFTDPVR = currBrandYearMEFTDPVR / locMakeCurrentYear;
                                                                    }

                                                                    /////////////////

                                                                    var prevBrandYearMEFTDPVR = previousYearlyBrandMEFTDPVR.ToList().FindAll(x => x.LocationMake.Location == ftdLocation).Sum(x => x.UsedMEFTD);
                                                                    var locMakePreviousYear = Model.SalesSummary.PreviousYearToDate.SalesData.FindAll(x => x.Location == location && x.Make == make).Sum(x => x.DealCount);

                                                                    if (locMakePreviousYear > 0)
                                                                    {
                                                                        previousYearMEFTDPVR = prevBrandYearMEFTDPVR / locMakePreviousYear;
                                                                    }

                                                                }
                                                                else
                                                                {
                                                                    var currBrandMonthMEFTDPVR = currentMonthlyBrandMEFTDPVR.ToList().Find(x => x.LocationMake.Location == ftdLocation && x.LocationMake.Brand == ftdMake);
                                                                    var locMakeCurrentMonth = Model.SalesSummary.CurrentMonthToDate.SalesData.FindAll(x => x.Location == location && x.Make == make).Sum(x => x.DealCount);

                                                                    if (currBrandMonthMEFTDPVR != null && locMakeCurrentMonth > 0)
                                                                    {
                                                                        currentMonthMEFTDPVR = currBrandMonthMEFTDPVR.MEFTD / locMakeCurrentMonth;
                                                                    }

                                                                    /////////////////


                                                                    var prevBrandMonthMEFTDPVR = previousMonthlyBrandMEFTDPVR.ToList().Find(x => x.LocationMake.Location == ftdLocation && x.LocationMake.Brand == ftdMake);
                                                                    var locMakePreviousMonth = Model.SalesSummary.PreviousMonthToDate.SalesData.FindAll(x => x.Location == location && x.Make == make).Sum(x => x.DealCount);

                                                                    if (prevBrandMonthMEFTDPVR != null && locMakePreviousMonth > 0)
                                                                    {
                                                                        previousMonthMEFTDPVR = prevBrandMonthMEFTDPVR.MEFTD / locMakePreviousMonth;
                                                                    }

                                                                    //////////////////
                                                                    var currBrandYearMEFTDPVR = currentYearlyBrandMEFTDPVR.ToList().Find(x => x.LocationMake.Location == ftdLocation && x.LocationMake.Brand == ftdMake);
                                                                    var locMakeCurrentYear = Model.SalesSummary.CurrentYearToDate.SalesData.FindAll(x => x.Location == location && x.Make == make).Sum(x => x.DealCount);

                                                                    if (currBrandYearMEFTDPVR != null && locMakeCurrentYear > 0)
                                                                    {
                                                                        currentYearMEFTDPVR = currBrandYearMEFTDPVR.MEFTD / locMakeCurrentYear;
                                                                    }

                                                                    /////////////////

                                                                    var prevBrandYearMEFTDPVR = previousYearlyBrandMEFTDPVR.ToList().Find(x => x.LocationMake.Location == ftdLocation && x.LocationMake.Brand == ftdMake);
                                                                    var locMakePreviousYear = Model.SalesSummary.PreviousYearToDate.SalesData.FindAll(x => x.Location == location && x.Make == make).Sum(x => x.DealCount);

                                                                    if (prevBrandYearMEFTDPVR != null && locMakePreviousYear > 0)
                                                                    {
                                                                        previousYearMEFTDPVR = prevBrandYearMEFTDPVR.MEFTD / locMakePreviousYear;
                                                                    }
                                                                }
                                                                //////////////////

                                                                //var dayDifference = currentMEFTDPVR - previousMEFTDPVR;
                                                                //decimal dayPercentChange = 0;
                                                                //if (previousMEFTDPVR > 0)
                                                                //{
                                                                //    dayPercentChange = dayDifference / previousMEFTDPVR;
                                                                //}

                                                                var monDifference = currentMonthMEFTDPVR - previousMonthMEFTDPVR;
                                                                decimal monPercentChange = 0;
                                                                if (previousMonthMEFTDPVR > 0)
                                                                {
                                                                    monPercentChange = monDifference / previousMonthMEFTDPVR;
                                                                }

                                                                var yrDifference = currentYearMEFTDPVR - previousYearMEFTDPVR;
                                                                decimal yrPercentChange = 0;
                                                                if (previousYearMEFTDPVR > 0)
                                                                {
                                                                    yrPercentChange = yrDifference / previousYearMEFTDPVR;
                                                                }


                                                                <tr>
                                                                    <td class="text-right divider-column" style="width:330px">@make</td>
                                                                    <td class="text-right">-</td>
                                                                    <td class="text-right">-</td>
                                                                    <td class="text-right">-</td>
                                                                    <td class="text-right divider-column">-</td>
                                                                    <td class="text-right">@previousMonthMEFTDPVR.ToString("C", nfi)</td>
                                                                    <td class="text-right">@currentMonthMEFTDPVR.ToString("C", nfi)</td>
                                                                    <td class="text-right">@monDifference.ToString("C", nfi)</td>
                                                                    <td class="text-right divider-column">@monPercentChange.ToString("P")</td>
                                                                    <td class="text-right">@previousYearMEFTDPVR.ToString("C", nfi)</td>
                                                                    <td class="text-right">@currentYearMEFTDPVR.ToString("C", nfi)</td>
                                                                    <td class="text-right">@yrDifference.ToString("C", nfi)</td>
                                                                    <td class="text-right divider-column">@yrPercentChange.ToString("P")</td>
                                                                </tr>

                                                            }

                                                        </tbody>
                                                    </table>
                                                </td>
                                            </tr>
                                                                }
                                    </tbody>
                                </table>

                            </td>

                        </tr>

                        <tr>
                            <td class="text-right divider-column"><a data-toggle="collapse" id="Financepvr-location" style="cursor: pointer;" data-target="#collapse-Financepvr-location"><strong>Finance PPS <i class="fa fa-caret-down" aria-hidden="true"></i></strong></a></td>

                            <td class="text-right">@prevDayFinancePVRAmount.ToString("C", nfi)</td>
                            <td class="text-right">@DayFinancePVRAmount.ToString("C", nfi)</td>
                            <td class="text-right">@DayFinancePVRDifference.ToString("C", nfi)</td>
                            <td class="text-center divider-column">@dayPercentageFinancePVR.ToString("P", nfi)</td>

                            <td class="text-right">@prevMonthFinancePVRAmount.ToString("C", nfi)</td>
                            <td class="text-right">@MonthFinancePVRAmount.ToString("C", nfi)</td>
                            <td class="text-right">@MonthFinancePVRDifference.ToString("C", nfi)</td>
                            <td class="text-center divider-column">@monthPercentageFinancePVR.ToString("P", nfi)</td>

                            <td class="text-right">@prevYearFinancePVRAmount.ToString("C", nfi)</td>
                            <td class="text-right">@YearFinancePVRAmount.ToString("C", nfi)</td>
                            <td class="text-right">@YearFinancePVRDifference.ToString("C", nfi)</td>
                            <td class="text-center divider-column">@yearPercentageFinancePVR.ToString("P", nfi)</td>

                        </tr>

                        <tr id="collapse-Financepvr-location" class="collapse out" style="background-color:#e2e2e2">

                            <td colspan="13">
                                <table class="table table-bordered">
                                    <thead>
                                        <tr>
                                            <th class="text-center divider-column" style="width:330px">Locations</th>
                                            <th class="text-center">@Model.SalesSummary.PreviousDate.StartDate.ToShortDateString()</th>
                                            <th class="text-center">@Model.SalesSummary.CurrentDate.StartDate.ToShortDateString()</th>
                                            <th class="text-center">Difference</th>
                                            <th class="text-center divider-column">% Change</th>

                                            <th class="text-center">MTD @System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(@Model.SalesSummary.PreviousMonthToDate.FiscalDate.Month) @Model.SalesSummary.PreviousYearToDate.EndDate.Year</th>
                                            <th class="text-center">MTD @System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(@Model.SalesSummary.CurrentMonthToDate.FiscalDate.Month) @Model.SalesSummary.CurrentYearToDate.EndDate.Year</th>
                                            <th class="text-center">Difference</th>
                                            <th class="text-center divider-column">% Change</th>

                                            <th class="text-center">YTD @Model.SalesSummary.PreviousYearToDate.EndDate.Year</th>
                                            <th class="text-center">YTD @Model.SalesSummary.CurrentYearToDate.EndDate.Year</th>
                                            <th class="text-center">Difference</th>
                                            <th class="text-center divider-column">% Change</th>

                                        </tr>
                                    </thead>
                                    <tbody>
                                        @{
                                            var previousDateFinancePVR =
                                            from sales in Model.SalesSummary.PreviousDate.SalesData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.DealCount),
                                                FinanceAmount = locationGroup.Sum(x => x.FinanceAmount),
                                                FinanceCount = locationGroup.Sum(x => x.FinanceCount)

                                            };

                                                            var previousDateBrandFinancePVR =
                                                            from makesales in Model.SalesSummary.PreviousDate.SalesData
                                                            group makesales by new { makesales.Location, makesales.Make } into locationMakeGroup
                                                            select new
                                                            {
                                                                LocationMake = locationMakeGroup.Key,
                                                                Deals = locationMakeGroup.Sum(x => x.DealCount),
                                                                FinanceAmount = locationMakeGroup.Sum(x => x.FinanceAmount),
                                                                FinanceCount = locationMakeGroup.Sum(x => x.FinanceCount)
                                                            };

                                                            ///////////////////////////////////////////////


                                                            var currentDateFinancePVR =
                                                            from sales in Model.SalesSummary.CurrentDate.SalesData
                                                            group sales by sales.Location into locationGroup
                                                            select new
                                                            {
                                                                Location = locationGroup.Key,
                                                                Deals = locationGroup.Sum(x => x.DealCount),
                                                                FinanceAmount = locationGroup.Sum(x => x.FinanceAmount),
                                                                FinanceCount = locationGroup.Sum(x => x.FinanceCount)
                                                            };

                                                            var currentDateBrandFinancePVR =
                                                            from makesales in Model.SalesSummary.CurrentDate.SalesData
                                                            group makesales by new { makesales.Location, makesales.Make } into locationMakeGroup
                                                            select new
                                                            {
                                                                LocationMake = locationMakeGroup.Key,
                                                                Deals = locationMakeGroup.Sum(x => x.DealCount),
                                                                FinanceAmount = locationMakeGroup.Sum(x => x.FinanceAmount),
                                                                FinanceCount = locationMakeGroup.Sum(x => x.FinanceCount)

                                                            };

                                                            ///////////////////////////////////////////////

                                                            var previousMonthlyFinancePVR =
                                                            from sales in Model.SalesSummary.PreviousMonthToDate.SalesData
                                                            group sales by sales.Location into locationGroup
                                                            select new
                                                            {
                                                                Location = locationGroup.Key,
                                                                Deals = locationGroup.Sum(x => x.DealCount),
                                                                FinanceAmount = locationGroup.Sum(x => x.FinanceAmount),
                                                                FinanceCount = locationGroup.Sum(x => x.FinanceCount)
                                                            };

                                                            var previousMonthlyBrandFinancePVR =
                                                            from makesales in Model.SalesSummary.PreviousMonthToDate.SalesData
                                                            group makesales by new { makesales.Location, makesales.Make } into locationMakeGroup
                                                            select new
                                                            {
                                                                LocationMake = locationMakeGroup.Key,
                                                                Deals = locationMakeGroup.Sum(x => x.DealCount),
                                                                FinanceAmount = locationMakeGroup.Sum(x => x.FinanceAmount),
                                                                FinanceCount = locationMakeGroup.Sum(x => x.FinanceCount)
                                                            };

                                                            ///////////////////////////////////////////////

                                                            var currentMonthlyFinancePVR =
                                                            from sales in Model.SalesSummary.CurrentMonthToDate.SalesData
                                                            group sales by sales.Location into locationGroup
                                                            select new
                                                            {
                                                                Location = locationGroup.Key,
                                                                Deals = locationGroup.Sum(x => x.DealCount),
                                                                FinanceAmount = locationGroup.Sum(x => x.FinanceAmount),
                                                                FinanceCount = locationGroup.Sum(x => x.FinanceCount)
                                                            };

                                                            var currentMonthlyBrandFinancePVR =
                                                            from makesales in Model.SalesSummary.CurrentMonthToDate.SalesData
                                                            group makesales by new { makesales.Location, makesales.Make } into locationMakeGroup
                                                            select new
                                                            {
                                                                LocationMake = locationMakeGroup.Key,
                                                                Deals = locationMakeGroup.Sum(x => x.DealCount),
                                                                FinanceAmount = locationMakeGroup.Sum(x => x.FinanceAmount),
                                                                FinanceCount = locationMakeGroup.Sum(x => x.FinanceCount)
                                                            };

                                                            ///////////////////////////////////////////////

                                                            var previousYearlyFinancePVR =
                                                            from sales in Model.SalesSummary.PreviousYearToDate.SalesData
                                                            group sales by sales.Location into locationGroup
                                                            select new
                                                            {
                                                                Location = locationGroup.Key,
                                                                Deals = locationGroup.Sum(x => x.DealCount),
                                                                FinanceAmount = locationGroup.Sum(x => x.FinanceAmount),
                                                                FinanceCount = locationGroup.Sum(x => x.FinanceCount)
                                                            };

                                                            var previousYearlyBrandFinancePVR =
                                                            from makesales in Model.SalesSummary.PreviousYearToDate.SalesData
                                                            group makesales by new { makesales.Location, makesales.Make } into locationMakeGroup
                                                            select new
                                                            {
                                                                LocationMake = locationMakeGroup.Key,
                                                                Deals = locationMakeGroup.Sum(x => x.DealCount),
                                                                FinanceAmount = locationMakeGroup.Sum(x => x.FinanceAmount),
                                                                FinanceCount = locationMakeGroup.Sum(x => x.FinanceCount)

                                                            };

                                                            ///////////////////////////////////////////////

                                                            var currentYearlyFinancePVR =
                                                            from sales in Model.SalesSummary.CurrentYearToDate.SalesData
                                                            group sales by sales.Location into locationGroup
                                                            select new
                                                            {
                                                                Location = locationGroup.Key,
                                                                Deals = locationGroup.Sum(x => x.DealCount),
                                                                FinanceAmount = locationGroup.Sum(x => x.FinanceAmount),
                                                                FinanceCount = locationGroup.Sum(x => x.FinanceCount)
                                                            };


                                                            var currentYearlyBrandFinancePVR =
                                                            from makesales in Model.SalesSummary.CurrentYearToDate.SalesData
                                                            group makesales by new { makesales.Location, makesales.Make } into locationMakeGroup
                                                            select new
                                                            {
                                                                LocationMake = locationMakeGroup.Key,
                                                                Deals = locationMakeGroup.Sum(x => x.DealCount),
                                                                FinanceAmount = locationMakeGroup.Sum(x => x.FinanceAmount),
                                                                FinanceCount = locationMakeGroup.Sum(x => x.FinanceCount)

                                                            };


                                        }

                                        @foreach (var location in locations)
                                                            {

                                                                decimal prevDateFinancePVR = 0;
                                                                decimal currDateFinancePVR = 0;
                                                                decimal prevMonthFinancePVR = 0;
                                                                decimal currMonthFinancePVR = 0;
                                                                decimal prevYearFinancePVR = 0;
                                                                decimal currYearFinancePVR = 0;

                                                                try
                                                                {
                                                                    prevDateFinancePVR = previousDateFinancePVR.ToList().Find(x => x.Location == location).FinanceAmount / previousDateFinancePVR.ToList().Find(x => x.Location == location).FinanceCount ;
                                                                }
                                                                catch
                                                                {
                                                                    prevDateFinancePVR = 0;
                                                                }

                                                                try
                                                                {
                                                                    currDateFinancePVR = currentDateFinancePVR.ToList().Find(x => x.Location == location).FinanceAmount / currentDateFinancePVR.ToList().Find(x => x.Location == location).FinanceCount;
                                                                }
                                                                catch
                                                                {
                                                                    currDateFinancePVR = 0;
                                                                }

                                                                try
                                                                {
                                                                    prevMonthFinancePVR = previousMonthlyFinancePVR.ToList().Find(x => x.Location == location).FinanceAmount / previousMonthlyFinancePVR.ToList().Find(x => x.Location == location).FinanceCount;
                                                                }
                                                                catch
                                                                {
                                                                    prevMonthFinancePVR = 0;
                                                                }

                                                                try
                                                                {
                                                                    currMonthFinancePVR = currentMonthlyFinancePVR.ToList().Find(x => x.Location == location).FinanceAmount / currentMonthlyFinancePVR.ToList().Find(x => x.Location == location).FinanceCount;
                                                                }
                                                                catch
                                                                {
                                                                    currMonthFinancePVR = 0;
                                                                }

                                                                try
                                                                {
                                                                    prevYearFinancePVR = previousYearlyFinancePVR.ToList().Find(x => x.Location == location).FinanceAmount / previousYearlyFinancePVR.ToList().Find(x => x.Location == location).FinanceCount;
                                                                }
                                                                catch
                                                                {
                                                                    prevYearFinancePVR = 0;
                                                                }

                                                                try
                                                                {
                                                                    currYearFinancePVR = currentYearlyFinancePVR.ToList().Find(x => x.Location == location).FinanceAmount / currentYearlyFinancePVR.ToList().Find(x => x.Location == location).FinanceCount;
                                                                }
                                                                catch
                                                                {
                                                                    currYearFinancePVR = 0;
                                                                }


                                                                var dateDifference = currDateFinancePVR - prevDateFinancePVR;
                                                                decimal datePercentChange = 0;
                                                                if (prevDateFinancePVR > 0)
                                                                {
                                                                    datePercentChange = dateDifference / prevDateFinancePVR;
                                                                }

                                                                var monthDifference = currMonthFinancePVR - prevMonthFinancePVR;
                                                                decimal monthPercentChange = 0;
                                                                if (prevMonthFinancePVR > 0)
                                                                {
                                                                    monthPercentChange = monthDifference / prevMonthFinancePVR;
                                                                }

                                                                var yearDifference = currYearFinancePVR - prevYearFinancePVR;
                                                                decimal yearPercentChange = 0;
                                                                if (prevYearFinancePVR > 0)
                                                                {
                                                                    yearPercentChange = yearDifference / prevYearFinancePVR;
                                                                }

                                                                var displayLocation = location;
                                                                switch (location)
                                                                {
                                                                    case "Annapolis":
                                                                        displayLocation = "Annapolis Cadillac/Volkswagen";
                                                                        break;
                                                                    case "Annapolis(Classic)":
                                                                        displayLocation = "Annapolis Mazda/Mitsubishi";
                                                                        break;
                                                                    case "Chambersburg":
                                                                        displayLocation = "Chambersburg";
                                                                        break;
                                                                    case "Clearwater Chrysler/Jeep":
                                                                        displayLocation = "Clearwater Chrysler/Jeep";
                                                                        break;
                                                                    case "Colonial":
                                                                        displayLocation = "Rockville Hyundai";
                                                                        break;
                                                                    case "Frederick":
                                                                        displayLocation = "Frederick";
                                                                        break;
                                                                    case "Germantown":
                                                                        displayLocation = "Germantown";
                                                                        break;
                                                                    case "Hagerstown(CDJR)":
                                                                        displayLocation = "Hagerstown Chrysler";
                                                                        break;
                                                                    case "Hagerstown(GM)":
                                                                        displayLocation = "Hagerstown GM";
                                                                        break;
                                                                    case "Lakeforest(355)":
                                                                        displayLocation = "Gaitherburg Toyota";
                                                                        break;
                                                                    case "Lakeforest(Russell)":
                                                                        displayLocation = "Gaithersburg Hyundai/Subaru";
                                                                        break;
                                                                    case "LexingtonPark(LexPark)":
                                                                        displayLocation = "Lexington Park";
                                                                        break;
                                                                    case "Nicholson":
                                                                        displayLocation = "Rockville Buick/GMC";
                                                                        break;
                                                                    case "Subaru":
                                                                        displayLocation = "Rockville Subaru";
                                                                        break;
                                                                    case "Wheaton":
                                                                        displayLocation = "Wheaton";
                                                                        break;
                                                                    case "Superstore":
                                                                        displayLocation = "Frederick Rt 85";
                                                                        break;
                                                                }




                                            <tr>
                                                <td class="text-right divider-column" style="width:330px"><a data-toggle="collapse" id="deal-brand" style="cursor: pointer;" data-target="#collapse-@location.Replace("(", "").Replace(")", "")-brandFinancepvr">@displayLocation <i class="fa fa-caret-down" aria-hidden="true"></i></a></td>
                                                <td class="text-right">@prevDateFinancePVR.ToString("C", nfi)</td>
                                                <td class="text-right">@currDateFinancePVR.ToString("C", nfi)</td>
                                                <td class="text-right">@dateDifference.ToString("C", nfi)</td>
                                                <td class="text-right divider-column">@datePercentChange.ToString("P")</td>
                                                <td class="text-right">@prevMonthFinancePVR.ToString("C", nfi)</td>
                                                <td class="text-right">@currMonthFinancePVR.ToString("C", nfi)</td>
                                                <td class="text-right">@monthDifference.ToString("C", nfi)</td>
                                                <td class="text-right divider-column">@monthPercentChange.ToString("P")</td>
                                                <td class="text-right">@prevYearFinancePVR.ToString("C", nfi)</td>
                                                <td class="text-right">@currYearFinancePVR.ToString("C", nfi)</td>
                                                <td class="text-right">@yearDifference.ToString("C", nfi)</td>
                                                <td class="text-right divider-column">@yearPercentChange.ToString("P")</td>
                                            </tr>
                                            <tr id="collapse-@location.Replace("(", "").Replace(")", "")-brandFinancepvr" class="collapse out" style="background-color:#e2e2e2">
                                                <td colspan="13">
                                                    <table class="table table-bordered">
                                                        <thead>
                                                            <tr style="">
                                                                <th class="text-center divider-column" style="width:330px">Brands</th>
                                                                <th class="text-center">@Model.SalesSummary.PreviousDate.StartDate.ToShortDateString()</th>
                                                                <th class="text-center">@Model.SalesSummary.CurrentDate.StartDate.ToShortDateString()</th>
                                                                <th class="text-center">Difference</th>
                                                                <th class="text-center divider-column">% Change</th>

                                                                <th class="text-center">MTD @System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(@Model.SalesSummary.PreviousMonthToDate.FiscalDate.Month) @Model.SalesSummary.PreviousYearToDate.EndDate.Year</th>
                                                                <th class="text-center">MTD @System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(@Model.SalesSummary.CurrentMonthToDate.FiscalDate.Month) @Model.SalesSummary.CurrentYearToDate.EndDate.Year</th>
                                                                <th class="text-center">Difference</th>
                                                                <th class="text-center divider-column">% Change</th>

                                                                <th class="text-center">YTD @Model.SalesSummary.PreviousYearToDate.EndDate.Year</th>
                                                                <th class="text-center">YTD @Model.SalesSummary.CurrentYearToDate.EndDate.Year</th>
                                                                <th class="text-center">Difference</th>
                                                                <th class="text-center divider-column">% Change</th>

                                                            </tr>
                                                        </thead>
                                                        <tbody>
                                                            @{
                                                                var makes = new List<string>();
                                                                foreach (var item in currentYearlyBrandSales)
                                                                {
                                                                    if (item.LocationMake.Location == location)
                                                                    {
                                                                        makes.Add(item.LocationMake.Make);

                                                                    }
                                                                }
                                                            }
                                                            @foreach (var make in makes)
                                                            {
                                                                decimal currentFinancePVR = 0;
                                                                var currBrandFinancePVR = currentDateBrandFinancePVR.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);

                                                                if (currBrandFinancePVR != null && currBrandFinancePVR.FinanceCount > 0)
                                                                {
                                                                    currentFinancePVR = currBrandFinancePVR.FinanceAmount / currBrandFinancePVR.FinanceCount;
                                                                }

                                                                /////////////////

                                                                decimal previousFinancePVR = 0;
                                                                var prevBrandFinancePVR = previousDateBrandFinancePVR.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);
                                                                if (prevBrandFinancePVR != null && prevBrandFinancePVR.FinanceCount > 0)
                                                                {
                                                                    previousFinancePVR = prevBrandFinancePVR.FinanceAmount / prevBrandFinancePVR.FinanceCount;
                                                                }

                                                                //////////////////

                                                                decimal currentMonthFinancePVR = 0;
                                                                var currBrandMonthFinancePVR = currentMonthlyBrandFinancePVR.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);
                                                                if (currBrandMonthFinancePVR != null && currBrandMonthFinancePVR.FinanceCount > 0)
                                                                {
                                                                    currentMonthFinancePVR = currBrandMonthFinancePVR.FinanceAmount / currBrandMonthFinancePVR.FinanceCount;
                                                                }

                                                                /////////////////

                                                                decimal previousMonthFinancePVR = 0;
                                                                var prevBrandMonthFinancePVR = previousMonthlyBrandFinancePVR.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);
                                                                if (prevBrandMonthFinancePVR != null && prevBrandMonthFinancePVR.FinanceCount > 0)
                                                                {
                                                                    previousMonthFinancePVR = prevBrandMonthFinancePVR.FinanceAmount / prevBrandMonthFinancePVR.FinanceCount;
                                                                }

                                                                //////////////////

                                                                decimal currentYearFinancePVR = 0;
                                                                var currBrandYearFinancePVR = currentYearlyBrandFinancePVR.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);
                                                                if (currBrandYearFinancePVR != null && currBrandYearFinancePVR.FinanceCount > 0)
                                                                {
                                                                    currentYearFinancePVR = currBrandYearFinancePVR.FinanceAmount / currBrandYearFinancePVR.FinanceCount;
                                                                }

                                                                /////////////////

                                                                decimal previousYearFinancePVR = 0;
                                                                var prevBrandYearFinancePVR = previousYearlyBrandFinancePVR.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);
                                                                if (prevBrandYearFinancePVR != null && prevBrandYearFinancePVR.FinanceCount > 0)
                                                                {
                                                                    previousYearFinancePVR = prevBrandYearFinancePVR.FinanceAmount / prevBrandYearFinancePVR.FinanceCount;
                                                                }

                                                                //////////////////

                                                                var dayDifference = currentFinancePVR - previousFinancePVR;
                                                                decimal dayPercentChange = 0;
                                                                if (previousFinancePVR > 0)
                                                                {
                                                                    dayPercentChange = dayDifference / previousFinancePVR;
                                                                }

                                                                var monDifference = currentMonthFinancePVR - previousMonthFinancePVR;
                                                                decimal monPercentChange = 0;
                                                                if (previousMonthFinancePVR > 0)
                                                                {
                                                                    monPercentChange = monDifference / previousMonthFinancePVR;
                                                                }

                                                                var yrDifference = currentYearFinancePVR - previousYearFinancePVR;
                                                                decimal yrPercentChange = 0;
                                                                if (previousYearFinancePVR > 0)
                                                                {
                                                                    yrPercentChange = yrDifference / previousYearFinancePVR;
                                                                }


                                                                <tr>
                                                                    <td class="text-right divider-column" style="width:330px">@make</td>
                                                                    <td class="text-right">@previousFinancePVR.ToString("C", nfi)</td>
                                                                    <td class="text-right">@currentFinancePVR.ToString("C", nfi)</td>
                                                                    <td class="text-right">@dayDifference.ToString("C", nfi)</td>
                                                                    <td class="text-right divider-column">@dayPercentChange.ToString("P")</td>
                                                                    <td class="text-right">@previousMonthFinancePVR.ToString("C", nfi)</td>
                                                                    <td class="text-right">@currentMonthFinancePVR.ToString("C", nfi)</td>
                                                                    <td class="text-right">@monDifference.ToString("C", nfi)</td>
                                                                    <td class="text-right divider-column">@monPercentChange.ToString("P")</td>
                                                                    <td class="text-right">@previousYearFinancePVR.ToString("C", nfi)</td>
                                                                    <td class="text-right">@currentYearFinancePVR.ToString("C", nfi)</td>
                                                                    <td class="text-right">@yrDifference.ToString("C", nfi)</td>
                                                                    <td class="text-right divider-column">@yrPercentChange.ToString("P")</td>
                                                                </tr>

                                                            }

                                                        </tbody>
                                                    </table>
                                                </td>
                                            </tr>
                                                                }
                                    </tbody>
                                </table>

                            </td>

                        </tr>
                        
                        <tr>
                            <td class="text-right divider-column"><a data-toggle="collapse" id="Financepercent-location" style="cursor: pointer;" data-target="#collapse-Financepercent-location"><strong>Finance % <i class="fa fa-caret-down" aria-hidden="true"></i></strong></a></td>

                            <td class="text-right">@prevDayFinancePercent.ToString("P", nfi)</td>
                            <td class="text-right">@DayFinancePercent.ToString("P", nfi)</td>
                            <td class="text-right">@DayFinancePercentDifference.ToString("P", nfi)</td>
                            <td class="text-center divider-column">-</td>

                            <td class="text-right">@prevMonthFinancePercent.ToString("P", nfi)</td>
                            <td class="text-right">@MonthFinancePercent.ToString("P", nfi)</td>
                            <td class="text-right">@MonthFinancePercentDifference.ToString("P", nfi)</td>
                            <td class="text-center divider-column">-</td>

                            <td class="text-right">@prevYearFinancePercent.ToString("P", nfi)</td>
                            <td class="text-right">@YearFinancePercent.ToString("P", nfi)</td>
                            <td class="text-right">@YearFinancePercentDifference.ToString("P", nfi)</td>
                            <td class="text-center divider-column">-</td>

                        </tr>

                        <tr id="collapse-Financepercent-location" class="collapse out" style="background-color:#e2e2e2">

                            <td colspan="13">
                                <table class="table table-bordered">
                                    <thead>
                                        <tr>
                                            <th class="text-center divider-column" style="width:330px">Locations</th>
                                            <th class="text-center">@Model.SalesSummary.PreviousDate.StartDate.ToShortDateString()</th>
                                            <th class="text-center">@Model.SalesSummary.CurrentDate.StartDate.ToShortDateString()</th>
                                            <th class="text-center">Difference</th>
                                            <th class="text-center divider-column">% Change</th>

                                            <th class="text-center">MTD @System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(@Model.SalesSummary.PreviousMonthToDate.FiscalDate.Month) @Model.SalesSummary.PreviousYearToDate.EndDate.Year</th>
                                            <th class="text-center">MTD @System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(@Model.SalesSummary.CurrentMonthToDate.FiscalDate.Month) @Model.SalesSummary.CurrentYearToDate.EndDate.Year</th>
                                            <th class="text-center">Difference</th>
                                            <th class="text-center divider-column">% Change</th>

                                            <th class="text-center">YTD @Model.SalesSummary.PreviousYearToDate.EndDate.Year</th>
                                            <th class="text-center">YTD @Model.SalesSummary.CurrentYearToDate.EndDate.Year</th>
                                            <th class="text-center">Difference</th>
                                            <th class="text-center divider-column">% Change</th>

                                        </tr>
                                    </thead>
                                    <tbody>


                                        @foreach (var location in locations)
                                        {

                                            decimal prevDateFinancePercentage = 0;
                                            decimal currDateFinancePercentage = 0;
                                            decimal prevMonthFinancePercentage = 0;
                                            decimal currMonthFinancePercentage = 0;
                                            decimal prevYearFinancePercentage = 0;
                                            decimal currYearFinancePercentage = 0;

                                            try
                                            {
                                                prevDateFinancePercentage = previousDateFinancePVR.ToList().Find(x => x.Location == location).FinanceCount  / previousDateFinancePVR.ToList().Find(x => x.Location == location).Deals ;
                                            }
                                            catch
                                            {
                                                prevDateFinancePercentage = 0;
                                            }

                                            try
                                            {
                                                currDateFinancePercentage = currentDateFinancePVR.ToList().Find(x => x.Location == location).FinanceCount / currentDateFinancePVR.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                currDateFinancePercentage = 0;
                                            }

                                            try
                                            {
                                                prevMonthFinancePercentage = previousMonthlyFinancePVR.ToList().Find(x => x.Location == location).FinanceCount / previousMonthlyFinancePVR.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                prevMonthFinancePercentage = 0;
                                            }

                                            try
                                            {
                                                currMonthFinancePercentage = currentMonthlyFinancePVR.ToList().Find(x => x.Location == location).FinanceCount / currentMonthlyFinancePVR.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                currMonthFinancePercentage = 0;
                                            }

                                            try
                                            {
                                                prevYearFinancePercentage = previousYearlyFinancePVR.ToList().Find(x => x.Location == location).FinanceCount / previousYearlyFinancePVR.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                prevYearFinancePercentage = 0;
                                            }

                                            try
                                            {
                                                currYearFinancePercentage = currentYearlyFinancePVR.ToList().Find(x => x.Location == location).FinanceCount / currentYearlyFinancePVR.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                currYearFinancePercentage = 0;
                                            }


                                            var dateDifference = currDateFinancePercentage - prevDateFinancePercentage;
                                            decimal datePercentChange = 0;
                                            if (prevDateFinancePercentage > 0)
                                            {
                                                datePercentChange = dateDifference / prevDateFinancePercentage;
                                            }

                                            var monthDifference = currMonthFinancePercentage - prevMonthFinancePercentage;
                                            decimal monthPercentChange = 0;
                                            if (prevMonthFinancePercentage > 0)
                                            {
                                                monthPercentChange = monthDifference / prevMonthFinancePercentage;
                                            }

                                            var yearDifference = currYearFinancePercentage - prevYearFinancePercentage;
                                            decimal yearPercentChange = 0;
                                            if (prevYearFinancePercentage > 0)
                                            {
                                                yearPercentChange = yearDifference / prevYearFinancePercentage;
                                            }

                                            var displayLocation = location;
                                            switch (location)
                                            {
                                                case "Annapolis":
                                                    displayLocation = "Annapolis Cadillac/Volkswagen";
                                                    break;
                                                case "Annapolis(Classic)":
                                                    displayLocation = "Annapolis Mazda/Mitsubishi";
                                                    break;
                                                case "Chambersburg":
                                                    displayLocation = "Chambersburg";
                                                    break;
                                                case "Clearwater Chrysler/Jeep":
                                                    displayLocation = "Clearwater Chrysler/Jeep";
                                                    break;
                                                case "Colonial":
                                                    displayLocation = "Rockville Hyundai";
                                                    break;
                                                case "Frederick":
                                                    displayLocation = "Frederick";
                                                    break;
                                                case "Germantown":
                                                    displayLocation = "Germantown";
                                                    break;
                                                case "Hagerstown(CDJR)":
                                                    displayLocation = "Hagerstown Chrysler";
                                                    break;
                                                case "Hagerstown(GM)":
                                                    displayLocation = "Hagerstown GM";
                                                    break;
                                                case "Lakeforest(355)":
                                                    displayLocation = "Gaitherburg Toyota";
                                                    break;
                                                case "Lakeforest(Russell)":
                                                    displayLocation = "Gaithersburg Hyundai/Subaru";
                                                    break;
                                                case "LexingtonPark(LexPark)":
                                                    displayLocation = "Lexington Park";
                                                    break;
                                                case "Nicholson":
                                                    displayLocation = "Rockville Buick/GMC";
                                                    break;
                                                case "Subaru":
                                                    displayLocation = "Rockville Subaru";
                                                    break;
                                                case "Wheaton":
                                                    displayLocation = "Wheaton";
                                                    break;
                                                case "Superstore":
                                                    displayLocation = "Frederick Rt 85";
                                                    break;
                                            }




                                            <tr>
                                                <td class="text-right divider-column" style="width:330px"><a data-toggle="collapse" id="deal-brand" style="cursor: pointer;" data-target="#collapse-@location.Replace("(", "").Replace(")", "")-brandFinancePercent">@displayLocation <i class="fa fa-caret-down" aria-hidden="true"></i></a></td>
                                                <td class="text-right">@prevDateFinancePercentage.ToString("P", nfi)</td>
                                                <td class="text-right">@currDateFinancePercentage.ToString("P", nfi)</td>
                                                <td class="text-right">@dateDifference.ToString("P", nfi)</td>
                                                <td class="text-right divider-column">-</td>
                                                <td class="text-right">@prevMonthFinancePercentage.ToString("P", nfi)</td>
                                                <td class="text-right">@currMonthFinancePercentage.ToString("P", nfi)</td>
                                                <td class="text-right">@monthDifference.ToString("P", nfi)</td>
                                                <td class="text-right divider-column">-</td>
                                                <td class="text-right">@prevYearFinancePercentage.ToString("P", nfi)</td>
                                                <td class="text-right">@currYearFinancePercentage.ToString("P", nfi)</td>
                                                <td class="text-right">@yearDifference.ToString("P", nfi)</td>
                                                <td class="text-right divider-column">-</td>
                                            </tr>
                                            <tr id="collapse-@location.Replace("(", "").Replace(")", "")-brandFinancePercent" class="collapse out" style="background-color:#e2e2e2">
                                                <td colspan="13">
                                                    <table class="table table-bordered">
                                                        <thead>
                                                            <tr style="">
                                                                <th class="text-center divider-column" style="width:330px">Brands</th>
                                                                <th class="text-center">@Model.SalesSummary.PreviousDate.StartDate.ToShortDateString()</th>
                                                                <th class="text-center">@Model.SalesSummary.CurrentDate.StartDate.ToShortDateString()</th>
                                                                <th class="text-center">Difference</th>
                                                                <th class="text-center divider-column">% Change</th>

                                                                <th class="text-center">MTD @System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(@Model.SalesSummary.PreviousMonthToDate.FiscalDate.Month) @Model.SalesSummary.PreviousYearToDate.EndDate.Year</th>
                                                                <th class="text-center">MTD @System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(@Model.SalesSummary.CurrentMonthToDate.FiscalDate.Month) @Model.SalesSummary.CurrentYearToDate.EndDate.Year</th>
                                                                <th class="text-center">Difference</th>
                                                                <th class="text-center divider-column">% Change</th>

                                                                <th class="text-center">YTD @Model.SalesSummary.PreviousYearToDate.EndDate.Year</th>
                                                                <th class="text-center">YTD @Model.SalesSummary.CurrentYearToDate.EndDate.Year</th>
                                                                <th class="text-center">Difference</th>
                                                                <th class="text-center divider-column">% Change</th>

                                                            </tr>
                                                        </thead>
                                                        <tbody>
                                                            @{
                                                                var makes = new List<string>();
                                                                foreach (var item in currentYearlyBrandSales)
                                                                {
                                                                    if (item.LocationMake.Location == location)
                                                                    {
                                                                        makes.Add(item.LocationMake.Make);

                                                                    }
                                                                }
                                                            }
                                                            @foreach (var make in makes)
                                                            {
                                                                decimal currentFinancePercent = 0;
                                                                var currBrandFinancePercent = currentDateBrandFinancePVR.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);

                                                                if (currBrandFinancePercent != null && currBrandFinancePercent.Deals > 0)
                                                                {
                                                                    currentFinancePercent = currBrandFinancePercent.FinanceCount / currBrandFinancePercent.Deals;
                                                                }

                                                                /////////////////

                                                                decimal previousFinancePercent = 0;
                                                                var prevBrandFinancePercent = previousDateBrandFinancePVR.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);
                                                                if (prevBrandFinancePercent != null && prevBrandFinancePercent.Deals > 0)
                                                                {
                                                                    previousFinancePercent = prevBrandFinancePercent.FinanceCount / prevBrandFinancePercent.Deals;
                                                                }

                                                                //////////////////

                                                                decimal currentMonthFinancePercent = 0;
                                                                var currBrandMonthFinancePercent = currentMonthlyBrandFinancePVR.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);
                                                                if (currBrandMonthFinancePercent != null && currBrandMonthFinancePercent.Deals > 0)
                                                                {
                                                                    currentMonthFinancePercent = currBrandMonthFinancePercent.FinanceCount / currBrandMonthFinancePercent.Deals;
                                                                }

                                                                /////////////////

                                                                decimal previousMonthFinancePercent = 0;
                                                                var prevBrandMonthFinancePercent = previousMonthlyBrandFinancePVR.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);
                                                                if (prevBrandMonthFinancePercent != null && prevBrandMonthFinancePercent.Deals > 0)
                                                                {
                                                                    previousMonthFinancePercent = prevBrandMonthFinancePercent.FinanceCount / prevBrandMonthFinancePercent.Deals;
                                                                }

                                                                //////////////////

                                                                decimal currentYearFinancePercent = 0;
                                                                var currBrandYearFinancePercent = currentYearlyBrandFinancePVR.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);
                                                                if (currBrandYearFinancePercent != null && currBrandYearFinancePercent.Deals > 0)
                                                                {
                                                                    currentYearFinancePercent = currBrandYearFinancePercent.FinanceCount / currBrandYearFinancePercent.Deals;
                                                                }

                                                                /////////////////

                                                                decimal previousYearFinancePercent = 0;
                                                                var prevBrandYearFinancePercent = previousYearlyBrandFinancePVR.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);
                                                                if (prevBrandYearFinancePercent != null && prevBrandYearFinancePercent.Deals > 0)
                                                                {
                                                                    previousYearFinancePercent = prevBrandYearFinancePercent.FinanceCount / prevBrandYearFinancePercent.Deals;
                                                                }

                                                                //////////////////

                                                                var dayDifference = currentFinancePercent - previousFinancePercent;
                                                                decimal dayPercentChange = 0;
                                                                if (previousFinancePercent > 0)
                                                                {
                                                                    dayPercentChange = dayDifference / previousFinancePercent;
                                                                }

                                                                var monDifference = currentMonthFinancePercent - previousMonthFinancePercent;
                                                                decimal monPercentChange = 0;
                                                                if (previousMonthFinancePercent > 0)
                                                                {
                                                                    monPercentChange = monDifference / previousMonthFinancePercent;
                                                                }

                                                                var yrDifference = currentYearFinancePercent - previousYearFinancePercent;
                                                                decimal yrPercentChange = 0;
                                                                if (previousYearFinancePercent > 0)
                                                                {
                                                                    yrPercentChange = yrDifference / previousYearFinancePercent;
                                                                }


                                                                <tr>
                                                                    <td class="text-right divider-column" style="width:330px">@make</td>
                                                                    <td class="text-right">@previousFinancePercent.ToString("P", nfi)</td>
                                                                    <td class="text-right">@currentFinancePercent.ToString("P", nfi)</td>
                                                                    <td class="text-right">@dayDifference.ToString("P", nfi)</td>
                                                                    <td class="text-right divider-column">-</td>
                                                                    <td class="text-right">@previousMonthFinancePercent.ToString("P", nfi)</td>
                                                                    <td class="text-right">@currentMonthFinancePercent.ToString("P", nfi)</td>
                                                                    <td class="text-right">@monDifference.ToString("P", nfi)</td>
                                                                    <td class="text-right divider-column">-</td>
                                                                    <td class="text-right">@previousYearFinancePercent.ToString("P", nfi)</td>
                                                                    <td class="text-right">@currentYearFinancePercent.ToString("P", nfi)</td>
                                                                    <td class="text-right">@yrDifference.ToString("P", nfi)</td>
                                                                    <td class="text-right divider-column">-</td>
                                                                </tr>

                                                            }

                                                        </tbody>
                                                    </table>
                                                </td>
                                            </tr>
                                                                }
                                    </tbody>
                                </table>

                            </td>

                        </tr>


                        <tr>
                            <td class="text-right divider-column"><a data-toggle="collapse" id="BPPpvr-location" style="cursor: pointer;" data-target="#collapse-BPPpvr-location"><strong>BPP PPS <i class="fa fa-caret-down" aria-hidden="true"></i></strong></a></td>

                            <td class="text-right">@prevDayBPPPVRAmount.ToString("C", nfi)</td>
                            <td class="text-right">@DayBPPPVRAmount.ToString("C", nfi)</td>
                            <td class="text-right">@DayBPPPVRDifference.ToString("C", nfi)</td>
                            <td class="text-center divider-column">@dayPercentageBPPPVR.ToString("P", nfi)</td>

                            <td class="text-right">@prevMonthBPPPVRAmount.ToString("C", nfi)</td>
                            <td class="text-right">@MonthBPPPVRAmount.ToString("C", nfi)</td>
                            <td class="text-right">@MonthBPPPVRDifference.ToString("C", nfi)</td>
                            <td class="text-center divider-column">@monthPercentageBPPPVR.ToString("P", nfi)</td>

                            <td class="text-right">@prevYearBPPPVRAmount.ToString("C", nfi)</td>
                            <td class="text-right">@YearBPPPVRAmount.ToString("C", nfi)</td>
                            <td class="text-right">@YearBPPPVRDifference.ToString("C", nfi)</td>
                            <td class="text-center divider-column">@yearPercentageBPPPVR.ToString("P", nfi)</td>

                        </tr>

                        <tr id="collapse-BPPpvr-location" class="collapse out" style="background-color:#e2e2e2">

                            <td colspan="13">
                                <table class="table table-bordered">
                                    <thead>
                                        <tr>
                                            <th class="text-center divider-column" style="width:330px">Locations</th>
                                            <th class="text-center">@Model.SalesSummary.PreviousDate.StartDate.ToShortDateString()</th>
                                            <th class="text-center">@Model.SalesSummary.CurrentDate.StartDate.ToShortDateString()</th>
                                            <th class="text-center">Difference</th>
                                            <th class="text-center divider-column">% Change</th>

                                            <th class="text-center">MTD @System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(@Model.SalesSummary.PreviousMonthToDate.FiscalDate.Month) @Model.SalesSummary.PreviousYearToDate.EndDate.Year</th>
                                            <th class="text-center">MTD @System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(@Model.SalesSummary.CurrentMonthToDate.FiscalDate.Month) @Model.SalesSummary.CurrentYearToDate.EndDate.Year</th>
                                            <th class="text-center">Difference</th>
                                            <th class="text-center divider-column">% Change</th>

                                            <th class="text-center">YTD @Model.SalesSummary.PreviousYearToDate.EndDate.Year</th>
                                            <th class="text-center">YTD @Model.SalesSummary.CurrentYearToDate.EndDate.Year</th>
                                            <th class="text-center">Difference</th>
                                            <th class="text-center divider-column">% Change</th>

                                        </tr>
                                    </thead>
                                    <tbody>
                                        @{
                                            var previousDateBPPPVR =
                                            from sales in Model.SalesSummary.PreviousDate.SalesData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.DealCount),
                                                BPPAmount = locationGroup.Sum(x => x.BPPAmount),
                                                BPPCount = locationGroup.Sum(x => x.BPPCount)

                                            };

                                            var previousDateBrandBPPPVR =
                                            from makesales in Model.SalesSummary.PreviousDate.SalesData
                                            group makesales by new { makesales.Location, makesales.Make } into locationMakeGroup
                                            select new
                                            {
                                                LocationMake = locationMakeGroup.Key,
                                                Deals = locationMakeGroup.Sum(x => x.DealCount),
                                                BPPAmount = locationMakeGroup.Sum(x => x.BPPAmount),
                                                BPPCount = locationMakeGroup.Sum(x => x.BPPCount)
                                            };

                                            ///////////////////////////////////////////////


                                            var currentDateBPPPVR =
                                            from sales in Model.SalesSummary.CurrentDate.SalesData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.DealCount),
                                                BPPAmount = locationGroup.Sum(x => x.BPPAmount),
                                                BPPCount = locationGroup.Sum(x => x.BPPCount)
                                            };

                                            var currentDateBrandBPPPVR =
                                            from makesales in Model.SalesSummary.CurrentDate.SalesData
                                            group makesales by new { makesales.Location, makesales.Make } into locationMakeGroup
                                            select new
                                            {
                                                LocationMake = locationMakeGroup.Key,
                                                Deals = locationMakeGroup.Sum(x => x.DealCount),
                                                BPPAmount = locationMakeGroup.Sum(x => x.BPPAmount),
                                                BPPCount = locationMakeGroup.Sum(x => x.BPPCount)

                                            };

                                            ///////////////////////////////////////////////

                                            var previousMonthlyBPPPVR =
                                            from sales in Model.SalesSummary.PreviousMonthToDate.SalesData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.DealCount),
                                                BPPAmount = locationGroup.Sum(x => x.BPPAmount),
                                                BPPCount = locationGroup.Sum(x => x.BPPCount)
                                            };

                                            var previousMonthlyBrandBPPPVR =
                                            from makesales in Model.SalesSummary.PreviousMonthToDate.SalesData
                                            group makesales by new { makesales.Location, makesales.Make } into locationMakeGroup
                                            select new
                                            {
                                                LocationMake = locationMakeGroup.Key,
                                                Deals = locationMakeGroup.Sum(x => x.DealCount),
                                                BPPAmount = locationMakeGroup.Sum(x => x.BPPAmount),
                                                BPPCount = locationMakeGroup.Sum(x => x.BPPCount)
                                            };

                                            ///////////////////////////////////////////////

                                            var currentMonthlyBPPPVR =
                                            from sales in Model.SalesSummary.CurrentMonthToDate.SalesData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.DealCount),
                                                BPPAmount = locationGroup.Sum(x => x.BPPAmount),
                                                BPPCount = locationGroup.Sum(x => x.BPPCount)
                                            };

                                            var currentMonthlyBrandBPPPVR =
                                            from makesales in Model.SalesSummary.CurrentMonthToDate.SalesData
                                            group makesales by new { makesales.Location, makesales.Make } into locationMakeGroup
                                            select new
                                            {
                                                LocationMake = locationMakeGroup.Key,
                                                Deals = locationMakeGroup.Sum(x => x.DealCount),
                                                BPPAmount = locationMakeGroup.Sum(x => x.BPPAmount),
                                                BPPCount = locationMakeGroup.Sum(x => x.BPPCount)
                                            };

                                            ///////////////////////////////////////////////

                                            var previousYearlyBPPPVR =
                                            from sales in Model.SalesSummary.PreviousYearToDate.SalesData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.DealCount),
                                                BPPAmount = locationGroup.Sum(x => x.BPPAmount),
                                                BPPCount = locationGroup.Sum(x => x.BPPCount)
                                            };

                                            var previousYearlyBrandBPPPVR =
                                            from makesales in Model.SalesSummary.PreviousYearToDate.SalesData
                                            group makesales by new { makesales.Location, makesales.Make } into locationMakeGroup
                                            select new
                                            {
                                                LocationMake = locationMakeGroup.Key,
                                                Deals = locationMakeGroup.Sum(x => x.DealCount),
                                                BPPAmount = locationMakeGroup.Sum(x => x.BPPAmount),
                                                BPPCount = locationMakeGroup.Sum(x => x.BPPCount)

                                            };

                                            ///////////////////////////////////////////////

                                            var currentYearlyBPPPVR =
                                            from sales in Model.SalesSummary.CurrentYearToDate.SalesData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.DealCount),
                                                BPPAmount = locationGroup.Sum(x => x.BPPAmount),
                                                BPPCount = locationGroup.Sum(x => x.BPPCount)
                                            };


                                            var currentYearlyBrandBPPPVR =
                                            from makesales in Model.SalesSummary.CurrentYearToDate.SalesData
                                            group makesales by new { makesales.Location, makesales.Make } into locationMakeGroup
                                            select new
                                            {
                                                LocationMake = locationMakeGroup.Key,
                                                Deals = locationMakeGroup.Sum(x => x.DealCount),
                                                BPPAmount = locationMakeGroup.Sum(x => x.BPPAmount),
                                                BPPCount = locationMakeGroup.Sum(x => x.BPPCount)

                                            };


                                        }

                                        @foreach (var location in locations)
                                        {

                                            decimal prevDateBPPPVR = 0;
                                            decimal currDateBPPPVR = 0;
                                            decimal prevMonthBPPPVR = 0;
                                            decimal currMonthBPPPVR = 0;
                                            decimal prevYearBPPPVR = 0;
                                            decimal currYearBPPPVR = 0;

                                            try
                                            {
                                                prevDateBPPPVR = previousDateBPPPVR.ToList().Find(x => x.Location == location).BPPAmount / previousDateBPPPVR.ToList().Find(x => x.Location == location).BPPCount;
                                            }
                                            catch
                                            {
                                                prevDateBPPPVR = 0;
                                            }

                                            try
                                            {
                                                currDateBPPPVR = currentDateBPPPVR.ToList().Find(x => x.Location == location).BPPAmount / currentDateBPPPVR.ToList().Find(x => x.Location == location).BPPCount;
                                            }
                                            catch
                                            {
                                                currDateBPPPVR = 0;
                                            }

                                            try
                                            {
                                                prevMonthBPPPVR = previousMonthlyBPPPVR.ToList().Find(x => x.Location == location).BPPAmount / previousMonthlyBPPPVR.ToList().Find(x => x.Location == location).BPPCount;
                                            }
                                            catch
                                            {
                                                prevMonthBPPPVR = 0;
                                            }

                                            try
                                            {
                                                currMonthBPPPVR = currentMonthlyBPPPVR.ToList().Find(x => x.Location == location).BPPAmount / currentMonthlyBPPPVR.ToList().Find(x => x.Location == location).BPPCount;
                                            }
                                            catch
                                            {
                                                currMonthBPPPVR = 0;
                                            }

                                            try
                                            {
                                                prevYearBPPPVR = previousYearlyBPPPVR.ToList().Find(x => x.Location == location).BPPAmount / previousYearlyBPPPVR.ToList().Find(x => x.Location == location).BPPCount;
                                            }
                                            catch
                                            {
                                                prevYearBPPPVR = 0;
                                            }

                                            try
                                            {
                                                currYearBPPPVR = currentYearlyBPPPVR.ToList().Find(x => x.Location == location).BPPAmount / currentYearlyBPPPVR.ToList().Find(x => x.Location == location).BPPCount;
                                            }
                                            catch
                                            {
                                                currYearBPPPVR = 0;
                                            }


                                            var dateDifference = currDateBPPPVR - prevDateBPPPVR;
                                            decimal datePercentChange = 0;
                                            if (prevDateBPPPVR > 0)
                                            {
                                                datePercentChange = dateDifference / prevDateBPPPVR;
                                            }

                                            var monthDifference = currMonthBPPPVR - prevMonthBPPPVR;
                                            decimal monthPercentChange = 0;
                                            if (prevMonthBPPPVR > 0)
                                            {
                                                monthPercentChange = monthDifference / prevMonthBPPPVR;
                                            }

                                            var yearDifference = currYearBPPPVR - prevYearBPPPVR;
                                            decimal yearPercentChange = 0;
                                            if (prevYearBPPPVR > 0)
                                            {
                                                yearPercentChange = yearDifference / prevYearBPPPVR;
                                            }

                                            var displayLocation = location;
                                            switch (location)
                                            {
                                                case "Annapolis":
                                                    displayLocation = "Annapolis Cadillac/Volkswagen";
                                                    break;
                                                case "Annapolis(Classic)":
                                                    displayLocation = "Annapolis Mazda/Mitsubishi";
                                                    break;
                                                case "Chambersburg":
                                                    displayLocation = "Chambersburg";
                                                    break;
                                                case "Clearwater Chrysler/Jeep":
                                                    displayLocation = "Clearwater Chrysler/Jeep";
                                                    break;
                                                case "Colonial":
                                                    displayLocation = "Rockville Hyundai";
                                                    break;
                                                case "Frederick":
                                                    displayLocation = "Frederick";
                                                    break;
                                                case "Germantown":
                                                    displayLocation = "Germantown";
                                                    break;
                                                case "Hagerstown(CDJR)":
                                                    displayLocation = "Hagerstown Chrysler";
                                                    break;
                                                case "Hagerstown(GM)":
                                                    displayLocation = "Hagerstown GM";
                                                    break;
                                                case "Lakeforest(355)":
                                                    displayLocation = "Gaitherburg Toyota";
                                                    break;
                                                case "Lakeforest(Russell)":
                                                    displayLocation = "Gaithersburg Hyundai/Subaru";
                                                    break;
                                                case "LexingtonPark(LexPark)":
                                                    displayLocation = "Lexington Park";
                                                    break;
                                                case "Nicholson":
                                                    displayLocation = "Rockville Buick/GMC";
                                                    break;
                                                case "Subaru":
                                                    displayLocation = "Rockville Subaru";
                                                    break;
                                                case "Wheaton":
                                                    displayLocation = "Wheaton";
                                                    break;
                                                case "Superstore":
                                                    displayLocation = "Frederick Rt 85";
                                                    break;
                                            }




                                            <tr>
                                                <td class="text-right divider-column" style="width:330px"><a data-toggle="collapse" id="deal-brand" style="cursor: pointer;" data-target="#collapse-@location.Replace("(", "").Replace(")", "")-brandBPPpvr">@displayLocation <i class="fa fa-caret-down" aria-hidden="true"></i></a></td>
                                                <td class="text-right">@prevDateBPPPVR.ToString("C", nfi)</td>
                                                <td class="text-right">@currDateBPPPVR.ToString("C", nfi)</td>
                                                <td class="text-right">@dateDifference.ToString("C", nfi)</td>
                                                <td class="text-right divider-column">@datePercentChange.ToString("P")</td>
                                                <td class="text-right">@prevMonthBPPPVR.ToString("C", nfi)</td>
                                                <td class="text-right">@currMonthBPPPVR.ToString("C", nfi)</td>
                                                <td class="text-right">@monthDifference.ToString("C", nfi)</td>
                                                <td class="text-right divider-column">@monthPercentChange.ToString("P")</td>
                                                <td class="text-right">@prevYearBPPPVR.ToString("C", nfi)</td>
                                                <td class="text-right">@currYearBPPPVR.ToString("C", nfi)</td>
                                                <td class="text-right">@yearDifference.ToString("C", nfi)</td>
                                                <td class="text-right divider-column">@yearPercentChange.ToString("P")</td>
                                            </tr>
                                            <tr id="collapse-@location.Replace("(", "").Replace(")", "")-brandBPPpvr" class="collapse out" style="background-color:#e2e2e2">
                                                <td colspan="13">
                                                    <table class="table table-bordered">
                                                        <thead>
                                                            <tr style="">
                                                                <th class="text-center divider-column" style="width:330px">Brands</th>
                                                                <th class="text-center">@Model.SalesSummary.PreviousDate.StartDate.ToShortDateString()</th>
                                                                <th class="text-center">@Model.SalesSummary.CurrentDate.StartDate.ToShortDateString()</th>
                                                                <th class="text-center">Difference</th>
                                                                <th class="text-center divider-column">% Change</th>

                                                                <th class="text-center">MTD @System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(@Model.SalesSummary.PreviousMonthToDate.FiscalDate.Month) @Model.SalesSummary.PreviousYearToDate.EndDate.Year</th>
                                                                <th class="text-center">MTD @System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(@Model.SalesSummary.CurrentMonthToDate.FiscalDate.Month) @Model.SalesSummary.CurrentYearToDate.EndDate.Year</th>
                                                                <th class="text-center">Difference</th>
                                                                <th class="text-center divider-column">% Change</th>

                                                                <th class="text-center">YTD @Model.SalesSummary.PreviousYearToDate.EndDate.Year</th>
                                                                <th class="text-center">YTD @Model.SalesSummary.CurrentYearToDate.EndDate.Year</th>
                                                                <th class="text-center">Difference</th>
                                                                <th class="text-center divider-column">% Change</th>

                                                            </tr>
                                                        </thead>
                                                        <tbody>
                                                            @{
                                                                var makes = new List<string>();
                                                                foreach (var item in currentYearlyBrandSales)
                                                                {
                                                                    if (item.LocationMake.Location == location)
                                                                    {
                                                                        makes.Add(item.LocationMake.Make);

                                                                    }
                                                                }
                                                            }
                                                            @foreach (var make in makes)
                                                            {
                                                                decimal currentBPPPVR = 0;
                                                                var currBrandBPPPVR = currentDateBrandBPPPVR.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);

                                                                if (currBrandBPPPVR != null && currBrandBPPPVR.BPPCount > 0)
                                                                {
                                                                    currentBPPPVR = currBrandBPPPVR.BPPAmount / currBrandBPPPVR.BPPCount;
                                                                }

                                                                /////////////////

                                                                decimal previousBPPPVR = 0;
                                                                var prevBrandBPPPVR = previousDateBrandBPPPVR.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);
                                                                if (prevBrandBPPPVR != null && prevBrandBPPPVR.BPPCount > 0)
                                                                {
                                                                    previousBPPPVR = prevBrandBPPPVR.BPPAmount / prevBrandBPPPVR.BPPCount;
                                                                }

                                                                //////////////////

                                                                decimal currentMonthBPPPVR = 0;
                                                                var currBrandMonthBPPPVR = currentMonthlyBrandBPPPVR.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);
                                                                if (currBrandMonthBPPPVR != null && currBrandMonthBPPPVR.BPPCount > 0)
                                                                {
                                                                    currentMonthBPPPVR = currBrandMonthBPPPVR.BPPAmount / currBrandMonthBPPPVR.BPPCount;
                                                                }

                                                                /////////////////

                                                                decimal previousMonthBPPPVR = 0;
                                                                var prevBrandMonthBPPPVR = previousMonthlyBrandBPPPVR.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);
                                                                if (prevBrandMonthBPPPVR != null && prevBrandMonthBPPPVR.BPPCount > 0)
                                                                {
                                                                    previousMonthBPPPVR = prevBrandMonthBPPPVR.BPPAmount / prevBrandMonthBPPPVR.BPPCount;
                                                                }

                                                                //////////////////

                                                                decimal currentYearBPPPVR = 0;
                                                                var currBrandYearBPPPVR = currentYearlyBrandBPPPVR.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);
                                                                if (currBrandYearBPPPVR != null && currBrandYearBPPPVR.BPPCount > 0)
                                                                {
                                                                    currentYearBPPPVR = currBrandYearBPPPVR.BPPAmount / currBrandYearBPPPVR.BPPCount;
                                                                }

                                                                /////////////////

                                                                decimal previousYearBPPPVR = 0;
                                                                var prevBrandYearBPPPVR = previousYearlyBrandBPPPVR.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);
                                                                if (prevBrandYearBPPPVR != null && prevBrandYearBPPPVR.BPPCount > 0)
                                                                {
                                                                    previousYearBPPPVR = prevBrandYearBPPPVR.BPPAmount / prevBrandYearBPPPVR.BPPCount;
                                                                }

                                                                //////////////////

                                                                var dayDifference = currentBPPPVR - previousBPPPVR;
                                                                decimal dayPercentChange = 0;
                                                                if (previousBPPPVR > 0)
                                                                {
                                                                    dayPercentChange = dayDifference / previousBPPPVR;
                                                                }

                                                                var monDifference = currentMonthBPPPVR - previousMonthBPPPVR;
                                                                decimal monPercentChange = 0;
                                                                if (previousMonthBPPPVR > 0)
                                                                {
                                                                    monPercentChange = monDifference / previousMonthBPPPVR;
                                                                }

                                                                var yrDifference = currentYearBPPPVR - previousYearBPPPVR;
                                                                decimal yrPercentChange = 0;
                                                                if (previousYearBPPPVR > 0)
                                                                {
                                                                    yrPercentChange = yrDifference / previousYearBPPPVR;
                                                                }


                                                                <tr>
                                                                    <td class="text-right divider-column" style="width:330px">@make</td>
                                                                    <td class="text-right">@previousBPPPVR.ToString("C", nfi)</td>
                                                                    <td class="text-right">@currentBPPPVR.ToString("C", nfi)</td>
                                                                    <td class="text-right">@dayDifference.ToString("C", nfi)</td>
                                                                    <td class="text-right divider-column">@dayPercentChange.ToString("P")</td>
                                                                    <td class="text-right">@previousMonthBPPPVR.ToString("C", nfi)</td>
                                                                    <td class="text-right">@currentMonthBPPPVR.ToString("C", nfi)</td>
                                                                    <td class="text-right">@monDifference.ToString("C", nfi)</td>
                                                                    <td class="text-right divider-column">@monPercentChange.ToString("P")</td>
                                                                    <td class="text-right">@previousYearBPPPVR.ToString("C", nfi)</td>
                                                                    <td class="text-right">@currentYearBPPPVR.ToString("C", nfi)</td>
                                                                    <td class="text-right">@yrDifference.ToString("C", nfi)</td>
                                                                    <td class="text-right divider-column">@yrPercentChange.ToString("P")</td>
                                                                </tr>

                                                            }

                                                        </tbody>
                                                    </table>
                                                </td>
                                            </tr>
                                                                }
                                    </tbody>
                                </table>

                            </td>

                        </tr>

                        <tr>
                            <td class="text-right divider-column"><a data-toggle="collapse" id="BPPpercent-location" style="cursor: pointer;" data-target="#collapse-BPPpercent-location"><strong>BPP % <i class="fa fa-caret-down" aria-hidden="true"></i></strong></a></td>

                            <td class="text-right">@prevDayBPPPercent.ToString("P", nfi)</td>
                            <td class="text-right">@DayBPPPercent.ToString("P", nfi)</td>
                            <td class="text-right">@DayBPPPercentDifference.ToString("P", nfi)</td>
                            <td class="text-center divider-column">-</td>

                            <td class="text-right">@prevMonthBPPPercent.ToString("P", nfi)</td>
                            <td class="text-right">@MonthBPPPercent.ToString("P", nfi)</td>
                            <td class="text-right">@MonthBPPPercentDifference.ToString("P", nfi)</td>
                            <td class="text-center divider-column">-</td>

                            <td class="text-right">@prevYearBPPPercent.ToString("P", nfi)</td>
                            <td class="text-right">@YearBPPPercent.ToString("P", nfi)</td>
                            <td class="text-right">@YearBPPPercentDifference.ToString("P", nfi)</td>
                            <td class="text-center divider-column">-</td>

                        </tr>

                        <tr id="collapse-BPPpercent-location" class="collapse out" style="background-color:#e2e2e2">

                            <td colspan="13">
                                <table class="table table-bordered">
                                    <thead>
                                        <tr>
                                            <th class="text-center divider-column" style="width:330px">Locations</th>
                                            <th class="text-center">@Model.SalesSummary.PreviousDate.StartDate.ToShortDateString()</th>
                                            <th class="text-center">@Model.SalesSummary.CurrentDate.StartDate.ToShortDateString()</th>
                                            <th class="text-center">Difference</th>
                                            <th class="text-center divider-column">% Change</th>

                                            <th class="text-center">MTD @System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(@Model.SalesSummary.PreviousMonthToDate.FiscalDate.Month) @Model.SalesSummary.PreviousYearToDate.EndDate.Year</th>
                                            <th class="text-center">MTD @System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(@Model.SalesSummary.CurrentMonthToDate.FiscalDate.Month) @Model.SalesSummary.CurrentYearToDate.EndDate.Year</th>
                                            <th class="text-center">Difference</th>
                                            <th class="text-center divider-column">% Change</th>

                                            <th class="text-center">YTD @Model.SalesSummary.PreviousYearToDate.EndDate.Year</th>
                                            <th class="text-center">YTD @Model.SalesSummary.CurrentYearToDate.EndDate.Year</th>
                                            <th class="text-center">Difference</th>
                                            <th class="text-center divider-column">% Change</th>

                                        </tr>
                                    </thead>
                                    <tbody>


                                        @foreach (var location in locations)
                                        {

                                            decimal prevDateBPPPercentage = 0;
                                            decimal currDateBPPPercentage = 0;
                                            decimal prevMonthBPPPercentage = 0;
                                            decimal currMonthBPPPercentage = 0;
                                            decimal prevYearBPPPercentage = 0;
                                            decimal currYearBPPPercentage = 0;

                                            try
                                            {
                                                prevDateBPPPercentage = previousDateBPPPVR.ToList().Find(x => x.Location == location).BPPCount / previousDateBPPPVR.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                prevDateBPPPercentage = 0;
                                            }

                                            try
                                            {
                                                currDateBPPPercentage = currentDateBPPPVR.ToList().Find(x => x.Location == location).BPPCount / currentDateBPPPVR.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                currDateBPPPercentage = 0;
                                            }

                                            try
                                            {
                                                prevMonthBPPPercentage = previousMonthlyBPPPVR.ToList().Find(x => x.Location == location).BPPCount / previousMonthlyBPPPVR.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                prevMonthBPPPercentage = 0;
                                            }

                                            try
                                            {
                                                currMonthBPPPercentage = currentMonthlyBPPPVR.ToList().Find(x => x.Location == location).BPPCount / currentMonthlyBPPPVR.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                currMonthBPPPercentage = 0;
                                            }

                                            try
                                            {
                                                prevYearBPPPercentage = previousYearlyBPPPVR.ToList().Find(x => x.Location == location).BPPCount / previousYearlyBPPPVR.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                prevYearBPPPercentage = 0;
                                            }

                                            try
                                            {
                                                currYearBPPPercentage = currentYearlyBPPPVR.ToList().Find(x => x.Location == location).BPPCount / currentYearlyBPPPVR.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                currYearBPPPercentage = 0;
                                            }


                                            var dateDifference = currDateBPPPercentage - prevDateBPPPercentage;
                                            decimal datePercentChange = 0;
                                            if (prevDateBPPPercentage > 0)
                                            {
                                                datePercentChange = dateDifference / prevDateBPPPercentage;
                                            }

                                            var monthDifference = currMonthBPPPercentage - prevMonthBPPPercentage;
                                            decimal monthPercentChange = 0;
                                            if (prevMonthBPPPercentage > 0)
                                            {
                                                monthPercentChange = monthDifference / prevMonthBPPPercentage;
                                            }

                                            var yearDifference = currYearBPPPercentage - prevYearBPPPercentage;
                                            decimal yearPercentChange = 0;
                                            if (prevYearBPPPercentage > 0)
                                            {
                                                yearPercentChange = yearDifference / prevYearBPPPercentage;
                                            }

                                            var displayLocation = location;
                                            switch (location)
                                            {
                                                case "Annapolis":
                                                    displayLocation = "Annapolis Cadillac/Volkswagen";
                                                    break;
                                                case "Annapolis(Classic)":
                                                    displayLocation = "Annapolis Mazda/Mitsubishi";
                                                    break;
                                                case "Chambersburg":
                                                    displayLocation = "Chambersburg";
                                                    break;
                                                case "Clearwater Chrysler/Jeep":
                                                    displayLocation = "Clearwater Chrysler/Jeep";
                                                    break;
                                                case "Colonial":
                                                    displayLocation = "Rockville Hyundai";
                                                    break;
                                                case "Frederick":
                                                    displayLocation = "Frederick";
                                                    break;
                                                case "Germantown":
                                                    displayLocation = "Germantown";
                                                    break;
                                                case "Hagerstown(CDJR)":
                                                    displayLocation = "Hagerstown Chrysler";
                                                    break;
                                                case "Hagerstown(GM)":
                                                    displayLocation = "Hagerstown GM";
                                                    break;
                                                case "Lakeforest(355)":
                                                    displayLocation = "Gaitherburg Toyota";
                                                    break;
                                                case "Lakeforest(Russell)":
                                                    displayLocation = "Gaithersburg Hyundai/Subaru";
                                                    break;
                                                case "LexingtonPark(LexPark)":
                                                    displayLocation = "Lexington Park";
                                                    break;
                                                case "Nicholson":
                                                    displayLocation = "Rockville Buick/GMC";
                                                    break;
                                                case "Subaru":
                                                    displayLocation = "Rockville Subaru";
                                                    break;
                                                case "Wheaton":
                                                    displayLocation = "Wheaton";
                                                    break;
                                                case "Superstore":
                                                    displayLocation = "Frederick Rt 85";
                                                    break;
                                            }




                                            <tr>
                                                <td class="text-right divider-column" style="width:330px"><a data-toggle="collapse" id="deal-brand" style="cursor: pointer;" data-target="#collapse-@location.Replace("(", "").Replace(")", "")-brandBPPPercent">@displayLocation <i class="fa fa-caret-down" aria-hidden="true"></i></a></td>
                                                <td class="text-right">@prevDateBPPPercentage.ToString("P", nfi)</td>
                                                <td class="text-right">@currDateBPPPercentage.ToString("P", nfi)</td>
                                                <td class="text-right">@dateDifference.ToString("P", nfi)</td>
                                                <td class="text-right divider-column">-</td>
                                                <td class="text-right">@prevMonthBPPPercentage.ToString("P", nfi)</td>
                                                <td class="text-right">@currMonthBPPPercentage.ToString("P", nfi)</td>
                                                <td class="text-right">@monthDifference.ToString("P", nfi)</td>
                                                <td class="text-right divider-column">-</td>
                                                <td class="text-right">@prevYearBPPPercentage.ToString("P", nfi)</td>
                                                <td class="text-right">@currYearBPPPercentage.ToString("P", nfi)</td>
                                                <td class="text-right">@yearDifference.ToString("P", nfi)</td>
                                                <td class="text-right divider-column">-</td>
                                            </tr>
                                            <tr id="collapse-@location.Replace("(", "").Replace(")", "")-brandBPPPercent" class="collapse out" style="background-color:#e2e2e2">
                                                <td colspan="13">
                                                    <table class="table table-bordered">
                                                        <thead>
                                                            <tr style="">
                                                                <th class="text-center divider-column" style="width:330px">Brands</th>
                                                                <th class="text-center">@Model.SalesSummary.PreviousDate.StartDate.ToShortDateString()</th>
                                                                <th class="text-center">@Model.SalesSummary.CurrentDate.StartDate.ToShortDateString()</th>
                                                                <th class="text-center">Difference</th>
                                                                <th class="text-center divider-column">% Change</th>

                                                                <th class="text-center">MTD @System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(@Model.SalesSummary.PreviousMonthToDate.FiscalDate.Month) @Model.SalesSummary.PreviousYearToDate.EndDate.Year</th>
                                                                <th class="text-center">MTD @System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(@Model.SalesSummary.CurrentMonthToDate.FiscalDate.Month) @Model.SalesSummary.CurrentYearToDate.EndDate.Year</th>
                                                                <th class="text-center">Difference</th>
                                                                <th class="text-center divider-column">% Change</th>

                                                                <th class="text-center">YTD @Model.SalesSummary.PreviousYearToDate.EndDate.Year</th>
                                                                <th class="text-center">YTD @Model.SalesSummary.CurrentYearToDate.EndDate.Year</th>
                                                                <th class="text-center">Difference</th>
                                                                <th class="text-center divider-column">% Change</th>

                                                            </tr>
                                                        </thead>
                                                        <tbody>
                                                            @{
                                                                var makes = new List<string>();
                                                                foreach (var item in currentYearlyBrandSales)
                                                                {
                                                                    if (item.LocationMake.Location == location)
                                                                    {
                                                                        makes.Add(item.LocationMake.Make);

                                                                    }
                                                                }
                                                            }
                                                            @foreach (var make in makes)
                                                            {
                                                                decimal currentBPPPercent = 0;
                                                                var currBrandBPPPercent = currentDateBrandBPPPVR.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);

                                                                if (currBrandBPPPercent != null && currBrandBPPPercent.Deals > 0)
                                                                {
                                                                    currentBPPPercent = currBrandBPPPercent.BPPCount / currBrandBPPPercent.Deals;
                                                                }

                                                                /////////////////

                                                                decimal previousBPPPercent = 0;
                                                                var prevBrandBPPPercent = previousDateBrandBPPPVR.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);
                                                                if (prevBrandBPPPercent != null && prevBrandBPPPercent.Deals > 0)
                                                                {
                                                                    previousBPPPercent = prevBrandBPPPercent.BPPCount / prevBrandBPPPercent.Deals;
                                                                }

                                                                //////////////////

                                                                decimal currentMonthBPPPercent = 0;
                                                                var currBrandMonthBPPPercent = currentMonthlyBrandBPPPVR.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);
                                                                if (currBrandMonthBPPPercent != null && currBrandMonthBPPPercent.Deals > 0)
                                                                {
                                                                    currentMonthBPPPercent = currBrandMonthBPPPercent.BPPCount / currBrandMonthBPPPercent.Deals;
                                                                }

                                                                /////////////////

                                                                decimal previousMonthBPPPercent = 0;
                                                                var prevBrandMonthBPPPercent = previousMonthlyBrandBPPPVR.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);
                                                                if (prevBrandMonthBPPPercent != null && prevBrandMonthBPPPercent.Deals > 0)
                                                                {
                                                                    previousMonthBPPPercent = prevBrandMonthBPPPercent.BPPCount / prevBrandMonthBPPPercent.Deals;
                                                                }

                                                                //////////////////

                                                                decimal currentYearBPPPercent = 0;
                                                                var currBrandYearBPPPercent = currentYearlyBrandBPPPVR.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);
                                                                if (currBrandYearBPPPercent != null && currBrandYearBPPPercent.Deals > 0)
                                                                {
                                                                    currentYearBPPPercent = currBrandYearBPPPercent.BPPCount / currBrandYearBPPPercent.Deals;
                                                                }

                                                                /////////////////

                                                                decimal previousYearBPPPercent = 0;
                                                                var prevBrandYearBPPPercent = previousYearlyBrandBPPPVR.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);
                                                                if (prevBrandYearBPPPercent != null && prevBrandYearBPPPercent.Deals > 0)
                                                                {
                                                                    previousYearBPPPercent = prevBrandYearBPPPercent.BPPCount / prevBrandYearBPPPercent.Deals;
                                                                }

                                                                //////////////////

                                                                var dayDifference = currentBPPPercent - previousBPPPercent;
                                                                decimal dayPercentChange = 0;
                                                                if (previousBPPPercent > 0)
                                                                {
                                                                    dayPercentChange = dayDifference / previousBPPPercent;
                                                                }

                                                                var monDifference = currentMonthBPPPercent - previousMonthBPPPercent;
                                                                decimal monPercentChange = 0;
                                                                if (previousMonthBPPPercent > 0)
                                                                {
                                                                    monPercentChange = monDifference / previousMonthBPPPercent;
                                                                }

                                                                var yrDifference = currentYearBPPPercent - previousYearBPPPercent;
                                                                decimal yrPercentChange = 0;
                                                                if (previousYearBPPPercent > 0)
                                                                {
                                                                    yrPercentChange = yrDifference / previousYearBPPPercent;
                                                                }


                                                                <tr>
                                                                    <td class="text-right divider-column" style="width:330px">@make</td>
                                                                    <td class="text-right">@previousBPPPercent.ToString("P", nfi)</td>
                                                                    <td class="text-right">@currentBPPPercent.ToString("P", nfi)</td>
                                                                    <td class="text-right">@dayDifference.ToString("P", nfi)</td>
                                                                    <td class="text-right divider-column">-</td>
                                                                    <td class="text-right">@previousMonthBPPPercent.ToString("P", nfi)</td>
                                                                    <td class="text-right">@currentMonthBPPPercent.ToString("P", nfi)</td>
                                                                    <td class="text-right">@monDifference.ToString("P", nfi)</td>
                                                                    <td class="text-right divider-column">-</td>
                                                                    <td class="text-right">@previousYearBPPPercent.ToString("P", nfi)</td>
                                                                    <td class="text-right">@currentYearBPPPercent.ToString("P", nfi)</td>
                                                                    <td class="text-right">@yrDifference.ToString("P", nfi)</td>
                                                                    <td class="text-right divider-column">-</td>
                                                                </tr>

                                                            }

                                                        </tbody>
                                                    </table>
                                                </td>
                                            </tr>
                                                                }
                                    </tbody>
                                </table>

                            </td>

                        </tr>




                        <tr>
                            <td class="text-right divider-column"><a data-toggle="collapse" id="ServiceContractpvr-location" style="cursor: pointer;" data-target="#collapse-ServiceContractpvr-location"><strong>Service Contract PPS <i class="fa fa-caret-down" aria-hidden="true"></i></strong></a></td>

                            <td class="text-right">@prevDayServiceContractPVRAmount.ToString("C", nfi)</td>
                            <td class="text-right">@DayServiceContractPVRAmount.ToString("C", nfi)</td>
                            <td class="text-right">@DayServiceContractPVRDifference.ToString("C", nfi)</td>
                            <td class="text-center divider-column">@dayPercentageServiceContractPVR.ToString("P", nfi)</td>

                            <td class="text-right">@prevMonthServiceContractPVRAmount.ToString("C", nfi)</td>
                            <td class="text-right">@MonthServiceContractPVRAmount.ToString("C", nfi)</td>
                            <td class="text-right">@MonthServiceContractPVRDifference.ToString("C", nfi)</td>
                            <td class="text-center divider-column">@monthPercentageServiceContractPVR.ToString("P", nfi)</td>

                            <td class="text-right">@prevYearServiceContractPVRAmount.ToString("C", nfi)</td>
                            <td class="text-right">@YearServiceContractPVRAmount.ToString("C", nfi)</td>
                            <td class="text-right">@YearServiceContractPVRDifference.ToString("C", nfi)</td>
                            <td class="text-center divider-column">@yearPercentageServiceContractPVR.ToString("P", nfi)</td>

                        </tr>

                        <tr id="collapse-ServiceContractpvr-location" class="collapse out" style="background-color:#e2e2e2">

                            <td colspan="13">
                                <table class="table table-bordered">
                                    <thead>
                                        <tr>
                                            <th class="text-center divider-column" style="width:330px">Locations</th>
                                            <th class="text-center">@Model.SalesSummary.PreviousDate.StartDate.ToShortDateString()</th>
                                            <th class="text-center">@Model.SalesSummary.CurrentDate.StartDate.ToShortDateString()</th>
                                            <th class="text-center">Difference</th>
                                            <th class="text-center divider-column">% Change</th>

                                            <th class="text-center">MTD @System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(@Model.SalesSummary.PreviousMonthToDate.FiscalDate.Month) @Model.SalesSummary.PreviousYearToDate.EndDate.Year</th>
                                            <th class="text-center">MTD @System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(@Model.SalesSummary.CurrentMonthToDate.FiscalDate.Month) @Model.SalesSummary.CurrentYearToDate.EndDate.Year</th>
                                            <th class="text-center">Difference</th>
                                            <th class="text-center divider-column">% Change</th>

                                            <th class="text-center">YTD @Model.SalesSummary.PreviousYearToDate.EndDate.Year</th>
                                            <th class="text-center">YTD @Model.SalesSummary.CurrentYearToDate.EndDate.Year</th>
                                            <th class="text-center">Difference</th>
                                            <th class="text-center divider-column">% Change</th>

                                        </tr>
                                    </thead>
                                    <tbody>
                                        @{
                                            var previousDateServiceContractPVR =
                                            from sales in Model.SalesSummary.PreviousDate.SalesData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.DealCount),
                                                ServiceContractAmount = locationGroup.Sum(x => x.ServiceContractAmount),
                                                ServiceContractCount = locationGroup.Sum(x => x.ServiceContractCount)

                                            };

                                            var previousDateBrandServiceContractPVR =
                                            from makesales in Model.SalesSummary.PreviousDate.SalesData
                                            group makesales by new { makesales.Location, makesales.Make } into locationMakeGroup
                                            select new
                                            {
                                                LocationMake = locationMakeGroup.Key,
                                                Deals = locationMakeGroup.Sum(x => x.DealCount),
                                                ServiceContractAmount = locationMakeGroup.Sum(x => x.ServiceContractAmount),
                                                ServiceContractCount = locationMakeGroup.Sum(x => x.ServiceContractCount)
                                            };

                                            ///////////////////////////////////////////////


                                            var currentDateServiceContractPVR =
                                            from sales in Model.SalesSummary.CurrentDate.SalesData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.DealCount),
                                                ServiceContractAmount = locationGroup.Sum(x => x.ServiceContractAmount),
                                                ServiceContractCount = locationGroup.Sum(x => x.ServiceContractCount)
                                            };

                                            var currentDateBrandServiceContractPVR =
                                            from makesales in Model.SalesSummary.CurrentDate.SalesData
                                            group makesales by new { makesales.Location, makesales.Make } into locationMakeGroup
                                            select new
                                            {
                                                LocationMake = locationMakeGroup.Key,
                                                Deals = locationMakeGroup.Sum(x => x.DealCount),
                                                ServiceContractAmount = locationMakeGroup.Sum(x => x.ServiceContractAmount),
                                                ServiceContractCount = locationMakeGroup.Sum(x => x.ServiceContractCount)

                                            };

                                            ///////////////////////////////////////////////

                                            var previousMonthlyServiceContractPVR =
                                            from sales in Model.SalesSummary.PreviousMonthToDate.SalesData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.DealCount),
                                                ServiceContractAmount = locationGroup.Sum(x => x.ServiceContractAmount),
                                                ServiceContractCount = locationGroup.Sum(x => x.ServiceContractCount)
                                            };

                                            var previousMonthlyBrandServiceContractPVR =
                                            from makesales in Model.SalesSummary.PreviousMonthToDate.SalesData
                                            group makesales by new { makesales.Location, makesales.Make } into locationMakeGroup
                                            select new
                                            {
                                                LocationMake = locationMakeGroup.Key,
                                                Deals = locationMakeGroup.Sum(x => x.DealCount),
                                                ServiceContractAmount = locationMakeGroup.Sum(x => x.ServiceContractAmount),
                                                ServiceContractCount = locationMakeGroup.Sum(x => x.ServiceContractCount)
                                            };

                                            ///////////////////////////////////////////////

                                            var currentMonthlyServiceContractPVR =
                                            from sales in Model.SalesSummary.CurrentMonthToDate.SalesData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.DealCount),
                                                ServiceContractAmount = locationGroup.Sum(x => x.ServiceContractAmount),
                                                ServiceContractCount = locationGroup.Sum(x => x.ServiceContractCount)
                                            };

                                            var currentMonthlyBrandServiceContractPVR =
                                            from makesales in Model.SalesSummary.CurrentMonthToDate.SalesData
                                            group makesales by new { makesales.Location, makesales.Make } into locationMakeGroup
                                            select new
                                            {
                                                LocationMake = locationMakeGroup.Key,
                                                Deals = locationMakeGroup.Sum(x => x.DealCount),
                                                ServiceContractAmount = locationMakeGroup.Sum(x => x.ServiceContractAmount),
                                                ServiceContractCount = locationMakeGroup.Sum(x => x.ServiceContractCount)
                                            };

                                            ///////////////////////////////////////////////

                                            var previousYearlyServiceContractPVR =
                                            from sales in Model.SalesSummary.PreviousYearToDate.SalesData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.DealCount),
                                                ServiceContractAmount = locationGroup.Sum(x => x.ServiceContractAmount),
                                                ServiceContractCount = locationGroup.Sum(x => x.ServiceContractCount)
                                            };

                                            var previousYearlyBrandServiceContractPVR =
                                            from makesales in Model.SalesSummary.PreviousYearToDate.SalesData
                                            group makesales by new { makesales.Location, makesales.Make } into locationMakeGroup
                                            select new
                                            {
                                                LocationMake = locationMakeGroup.Key,
                                                Deals = locationMakeGroup.Sum(x => x.DealCount),
                                                ServiceContractAmount = locationMakeGroup.Sum(x => x.ServiceContractAmount),
                                                ServiceContractCount = locationMakeGroup.Sum(x => x.ServiceContractCount)

                                            };

                                            ///////////////////////////////////////////////

                                            var currentYearlyServiceContractPVR =
                                            from sales in Model.SalesSummary.CurrentYearToDate.SalesData
                                            group sales by sales.Location into locationGroup
                                            select new
                                            {
                                                Location = locationGroup.Key,
                                                Deals = locationGroup.Sum(x => x.DealCount),
                                                ServiceContractAmount = locationGroup.Sum(x => x.ServiceContractAmount),
                                                ServiceContractCount = locationGroup.Sum(x => x.ServiceContractCount)
                                            };


                                            var currentYearlyBrandServiceContractPVR =
                                            from makesales in Model.SalesSummary.CurrentYearToDate.SalesData
                                            group makesales by new { makesales.Location, makesales.Make } into locationMakeGroup
                                            select new
                                            {
                                                LocationMake = locationMakeGroup.Key,
                                                Deals = locationMakeGroup.Sum(x => x.DealCount),
                                                ServiceContractAmount = locationMakeGroup.Sum(x => x.ServiceContractAmount),
                                                ServiceContractCount = locationMakeGroup.Sum(x => x.ServiceContractCount)

                                            };


                                        }

                                        @foreach (var location in locations)
                                        {

                                            decimal prevDateServiceContractPVR = 0;
                                            decimal currDateServiceContractPVR = 0;
                                            decimal prevMonthServiceContractPVR = 0;
                                            decimal currMonthServiceContractPVR = 0;
                                            decimal prevYearServiceContractPVR = 0;
                                            decimal currYearServiceContractPVR = 0;

                                            try
                                            {
                                                prevDateServiceContractPVR = previousDateServiceContractPVR.ToList().Find(x => x.Location == location).ServiceContractAmount / previousDateServiceContractPVR.ToList().Find(x => x.Location == location).ServiceContractCount;
                                            }
                                            catch
                                            {
                                                prevDateServiceContractPVR = 0;
                                            }

                                            try
                                            {
                                                currDateServiceContractPVR = currentDateServiceContractPVR.ToList().Find(x => x.Location == location).ServiceContractAmount / currentDateServiceContractPVR.ToList().Find(x => x.Location == location).ServiceContractCount;
                                            }
                                            catch
                                            {
                                                currDateServiceContractPVR = 0;
                                            }

                                            try
                                            {
                                                prevMonthServiceContractPVR = previousMonthlyServiceContractPVR.ToList().Find(x => x.Location == location).ServiceContractAmount / previousMonthlyServiceContractPVR.ToList().Find(x => x.Location == location).ServiceContractCount;
                                            }
                                            catch
                                            {
                                                prevMonthServiceContractPVR = 0;
                                            }

                                            try
                                            {
                                                currMonthServiceContractPVR = currentMonthlyServiceContractPVR.ToList().Find(x => x.Location == location).ServiceContractAmount / currentMonthlyServiceContractPVR.ToList().Find(x => x.Location == location).ServiceContractCount;
                                            }
                                            catch
                                            {
                                                currMonthServiceContractPVR = 0;
                                            }

                                            try
                                            {
                                                prevYearServiceContractPVR = previousYearlyServiceContractPVR.ToList().Find(x => x.Location == location).ServiceContractAmount / previousYearlyServiceContractPVR.ToList().Find(x => x.Location == location).ServiceContractCount;
                                            }
                                            catch
                                            {
                                                prevYearServiceContractPVR = 0;
                                            }

                                            try
                                            {
                                                currYearServiceContractPVR = currentYearlyServiceContractPVR.ToList().Find(x => x.Location == location).ServiceContractAmount / currentYearlyServiceContractPVR.ToList().Find(x => x.Location == location).ServiceContractCount;
                                            }
                                            catch
                                            {
                                                currYearServiceContractPVR = 0;
                                            }


                                            var dateDifference = currDateServiceContractPVR - prevDateServiceContractPVR;
                                            decimal datePercentChange = 0;
                                            if (prevDateServiceContractPVR > 0)
                                            {
                                                datePercentChange = dateDifference / prevDateServiceContractPVR;
                                            }

                                            var monthDifference = currMonthServiceContractPVR - prevMonthServiceContractPVR;
                                            decimal monthPercentChange = 0;
                                            if (prevMonthServiceContractPVR > 0)
                                            {
                                                monthPercentChange = monthDifference / prevMonthServiceContractPVR;
                                            }

                                            var yearDifference = currYearServiceContractPVR - prevYearServiceContractPVR;
                                            decimal yearPercentChange = 0;
                                            if (prevYearServiceContractPVR > 0)
                                            {
                                                yearPercentChange = yearDifference / prevYearServiceContractPVR;
                                            }

                                            var displayLocation = location;
                                            switch (location)
                                            {
                                                case "Annapolis":
                                                    displayLocation = "Annapolis Cadillac/Volkswagen";
                                                    break;
                                                case "Annapolis(Classic)":
                                                    displayLocation = "Annapolis Mazda/Mitsubishi";
                                                    break;
                                                case "Chambersburg":
                                                    displayLocation = "Chambersburg";
                                                    break;
                                                case "Clearwater Chrysler/Jeep":
                                                    displayLocation = "Clearwater Chrysler/Jeep";
                                                    break;
                                                case "Colonial":
                                                    displayLocation = "Rockville Hyundai";
                                                    break;
                                                case "Frederick":
                                                    displayLocation = "Frederick";
                                                    break;
                                                case "Germantown":
                                                    displayLocation = "Germantown";
                                                    break;
                                                case "Hagerstown(CDJR)":
                                                    displayLocation = "Hagerstown Chrysler";
                                                    break;
                                                case "Hagerstown(GM)":
                                                    displayLocation = "Hagerstown GM";
                                                    break;
                                                case "Lakeforest(355)":
                                                    displayLocation = "Gaitherburg Toyota";
                                                    break;
                                                case "Lakeforest(Russell)":
                                                    displayLocation = "Gaithersburg Hyundai/Subaru";
                                                    break;
                                                case "LexingtonPark(LexPark)":
                                                    displayLocation = "Lexington Park";
                                                    break;
                                                case "Nicholson":
                                                    displayLocation = "Rockville Buick/GMC";
                                                    break;
                                                case "Subaru":
                                                    displayLocation = "Rockville Subaru";
                                                    break;
                                                case "Wheaton":
                                                    displayLocation = "Wheaton";
                                                    break;
                                                case "Superstore":
                                                    displayLocation = "Frederick Rt 85";
                                                    break;
                                            }




                                            <tr>
                                                <td class="text-right divider-column" style="width:330px"><a data-toggle="collapse" id="deal-brand" style="cursor: pointer;" data-target="#collapse-@location.Replace("(", "").Replace(")", "")-brandServiceContractpvr">@displayLocation <i class="fa fa-caret-down" aria-hidden="true"></i></a></td>
                                                <td class="text-right">@prevDateServiceContractPVR.ToString("C", nfi)</td>
                                                <td class="text-right">@currDateServiceContractPVR.ToString("C", nfi)</td>
                                                <td class="text-right">@dateDifference.ToString("C", nfi)</td>
                                                <td class="text-right divider-column">@datePercentChange.ToString("P")</td>
                                                <td class="text-right">@prevMonthServiceContractPVR.ToString("C", nfi)</td>
                                                <td class="text-right">@currMonthServiceContractPVR.ToString("C", nfi)</td>
                                                <td class="text-right">@monthDifference.ToString("C", nfi)</td>
                                                <td class="text-right divider-column">@monthPercentChange.ToString("P")</td>
                                                <td class="text-right">@prevYearServiceContractPVR.ToString("C", nfi)</td>
                                                <td class="text-right">@currYearServiceContractPVR.ToString("C", nfi)</td>
                                                <td class="text-right">@yearDifference.ToString("C", nfi)</td>
                                                <td class="text-right divider-column">@yearPercentChange.ToString("P")</td>
                                            </tr>
                                            <tr id="collapse-@location.Replace("(", "").Replace(")", "")-brandServiceContractpvr" class="collapse out" style="background-color:#e2e2e2">
                                                <td colspan="13">
                                                    <table class="table table-bordered">
                                                        <thead>
                                                            <tr style="">
                                                                <th class="text-center divider-column" style="width:330px">Brands</th>
                                                                <th class="text-center">@Model.SalesSummary.PreviousDate.StartDate.ToShortDateString()</th>
                                                                <th class="text-center">@Model.SalesSummary.CurrentDate.StartDate.ToShortDateString()</th>
                                                                <th class="text-center">Difference</th>
                                                                <th class="text-center divider-column">% Change</th>

                                                                <th class="text-center">MTD @System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(@Model.SalesSummary.PreviousMonthToDate.FiscalDate.Month) @Model.SalesSummary.PreviousYearToDate.EndDate.Year</th>
                                                                <th class="text-center">MTD @System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(@Model.SalesSummary.CurrentMonthToDate.FiscalDate.Month) @Model.SalesSummary.CurrentYearToDate.EndDate.Year</th>
                                                                <th class="text-center">Difference</th>
                                                                <th class="text-center divider-column">% Change</th>

                                                                <th class="text-center">YTD @Model.SalesSummary.PreviousYearToDate.EndDate.Year</th>
                                                                <th class="text-center">YTD @Model.SalesSummary.CurrentYearToDate.EndDate.Year</th>
                                                                <th class="text-center">Difference</th>
                                                                <th class="text-center divider-column">% Change</th>

                                                            </tr>
                                                        </thead>
                                                        <tbody>
                                                            @{
                                                                var makes = new List<string>();
                                                                foreach (var item in currentYearlyBrandSales)
                                                                {
                                                                    if (item.LocationMake.Location == location)
                                                                    {
                                                                        makes.Add(item.LocationMake.Make);

                                                                    }
                                                                }
                                                            }
                                                            @foreach (var make in makes)
                                                            {
                                                                decimal currentServiceContractPVR = 0;
                                                                var currBrandServiceContractPVR = currentDateBrandServiceContractPVR.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);

                                                                if (currBrandServiceContractPVR != null && currBrandServiceContractPVR.ServiceContractCount > 0)
                                                                {
                                                                    currentServiceContractPVR = currBrandServiceContractPVR.ServiceContractAmount / currBrandServiceContractPVR.ServiceContractCount;
                                                                }

                                                                /////////////////

                                                                decimal previousServiceContractPVR = 0;
                                                                var prevBrandServiceContractPVR = previousDateBrandServiceContractPVR.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);
                                                                if (prevBrandServiceContractPVR != null && prevBrandServiceContractPVR.ServiceContractCount > 0)
                                                                {
                                                                    previousServiceContractPVR = prevBrandServiceContractPVR.ServiceContractAmount / prevBrandServiceContractPVR.ServiceContractCount;
                                                                }

                                                                //////////////////

                                                                decimal currentMonthServiceContractPVR = 0;
                                                                var currBrandMonthServiceContractPVR = currentMonthlyBrandServiceContractPVR.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);
                                                                if (currBrandMonthServiceContractPVR != null && currBrandMonthServiceContractPVR.ServiceContractCount > 0)
                                                                {
                                                                    currentMonthServiceContractPVR = currBrandMonthServiceContractPVR.ServiceContractAmount / currBrandMonthServiceContractPVR.ServiceContractCount;
                                                                }

                                                                /////////////////

                                                                decimal previousMonthServiceContractPVR = 0;
                                                                var prevBrandMonthServiceContractPVR = previousMonthlyBrandServiceContractPVR.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);
                                                                if (prevBrandMonthServiceContractPVR != null && prevBrandMonthServiceContractPVR.ServiceContractCount > 0)
                                                                {
                                                                    previousMonthServiceContractPVR = prevBrandMonthServiceContractPVR.ServiceContractAmount / prevBrandMonthServiceContractPVR.ServiceContractCount;
                                                                }

                                                                //////////////////

                                                                decimal currentYearServiceContractPVR = 0;
                                                                var currBrandYearServiceContractPVR = currentYearlyBrandServiceContractPVR.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);
                                                                if (currBrandYearServiceContractPVR != null && currBrandYearServiceContractPVR.ServiceContractCount > 0)
                                                                {
                                                                    currentYearServiceContractPVR = currBrandYearServiceContractPVR.ServiceContractAmount / currBrandYearServiceContractPVR.ServiceContractCount;
                                                                }

                                                                /////////////////

                                                                decimal previousYearServiceContractPVR = 0;
                                                                var prevBrandYearServiceContractPVR = previousYearlyBrandServiceContractPVR.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);
                                                                if (prevBrandYearServiceContractPVR != null && prevBrandYearServiceContractPVR.ServiceContractCount > 0)
                                                                {
                                                                    previousYearServiceContractPVR = prevBrandYearServiceContractPVR.ServiceContractAmount / prevBrandYearServiceContractPVR.ServiceContractCount;
                                                                }

                                                                //////////////////

                                                                var dayDifference = currentServiceContractPVR - previousServiceContractPVR;
                                                                decimal dayPercentChange = 0;
                                                                if (previousServiceContractPVR > 0)
                                                                {
                                                                    dayPercentChange = dayDifference / previousServiceContractPVR;
                                                                }

                                                                var monDifference = currentMonthServiceContractPVR - previousMonthServiceContractPVR;
                                                                decimal monPercentChange = 0;
                                                                if (previousMonthServiceContractPVR > 0)
                                                                {
                                                                    monPercentChange = monDifference / previousMonthServiceContractPVR;
                                                                }

                                                                var yrDifference = currentYearServiceContractPVR - previousYearServiceContractPVR;
                                                                decimal yrPercentChange = 0;
                                                                if (previousYearServiceContractPVR > 0)
                                                                {
                                                                    yrPercentChange = yrDifference / previousYearServiceContractPVR;
                                                                }


                                                                <tr>
                                                                    <td class="text-right divider-column" style="width:330px">@make</td>
                                                                    <td class="text-right">@previousServiceContractPVR.ToString("C", nfi)</td>
                                                                    <td class="text-right">@currentServiceContractPVR.ToString("C", nfi)</td>
                                                                    <td class="text-right">@dayDifference.ToString("C", nfi)</td>
                                                                    <td class="text-right divider-column">@dayPercentChange.ToString("P")</td>
                                                                    <td class="text-right">@previousMonthServiceContractPVR.ToString("C", nfi)</td>
                                                                    <td class="text-right">@currentMonthServiceContractPVR.ToString("C", nfi)</td>
                                                                    <td class="text-right">@monDifference.ToString("C", nfi)</td>
                                                                    <td class="text-right divider-column">@monPercentChange.ToString("P")</td>
                                                                    <td class="text-right">@previousYearServiceContractPVR.ToString("C", nfi)</td>
                                                                    <td class="text-right">@currentYearServiceContractPVR.ToString("C", nfi)</td>
                                                                    <td class="text-right">@yrDifference.ToString("C", nfi)</td>
                                                                    <td class="text-right divider-column">@yrPercentChange.ToString("P")</td>
                                                                </tr>

                                                            }

                                                        </tbody>
                                                    </table>
                                                </td>
                                            </tr>
                                                                }
                                    </tbody>
                                </table>

                            </td>

                        </tr>

                        <tr>
                            <td class="text-right divider-column"><a data-toggle="collapse" id="ServiceContractpercent-location" style="cursor: pointer;" data-target="#collapse-ServiceContractpercent-location"><strong>Service Contract % <i class="fa fa-caret-down" aria-hidden="true"></i></strong></a></td>

                            <td class="text-right">@prevDayServiceContractPercent.ToString("P", nfi)</td>
                            <td class="text-right">@DayServiceContractPercent.ToString("P", nfi)</td>
                            <td class="text-right">@DayServiceContractPercentDifference.ToString("P", nfi)</td>
                            <td class="text-center divider-column">-</td>

                            <td class="text-right">@prevMonthServiceContractPercent.ToString("P", nfi)</td>
                            <td class="text-right">@MonthServiceContractPercent.ToString("P", nfi)</td>
                            <td class="text-right">@MonthServiceContractPercentDifference.ToString("P", nfi)</td>
                            <td class="text-center divider-column">-</td>

                            <td class="text-right">@prevYearServiceContractPercent.ToString("P", nfi)</td>
                            <td class="text-right">@YearServiceContractPercent.ToString("P", nfi)</td>
                            <td class="text-right">@YearServiceContractPercentDifference.ToString("P", nfi)</td>
                            <td class="text-center divider-column">-</td>

                        </tr>

                        <tr id="collapse-ServiceContractpercent-location" class="collapse out" style="background-color:#e2e2e2">

                            <td colspan="13">
                                <table class="table table-bordered">
                                    <thead>
                                        <tr>
                                            <th class="text-center divider-column" style="width:330px">Locations</th>
                                            <th class="text-center">@Model.SalesSummary.PreviousDate.StartDate.ToShortDateString()</th>
                                            <th class="text-center">@Model.SalesSummary.CurrentDate.StartDate.ToShortDateString()</th>
                                            <th class="text-center">Difference</th>
                                            <th class="text-center divider-column">% Change</th>

                                            <th class="text-center">MTD @System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(@Model.SalesSummary.PreviousMonthToDate.FiscalDate.Month) @Model.SalesSummary.PreviousYearToDate.EndDate.Year</th>
                                            <th class="text-center">MTD @System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(@Model.SalesSummary.CurrentMonthToDate.FiscalDate.Month) @Model.SalesSummary.CurrentYearToDate.EndDate.Year</th>
                                            <th class="text-center">Difference</th>
                                            <th class="text-center divider-column">% Change</th>

                                            <th class="text-center">YTD @Model.SalesSummary.PreviousYearToDate.EndDate.Year</th>
                                            <th class="text-center">YTD @Model.SalesSummary.CurrentYearToDate.EndDate.Year</th>
                                            <th class="text-center">Difference</th>
                                            <th class="text-center divider-column">% Change</th>

                                        </tr>
                                    </thead>
                                    <tbody>


                                        @foreach (var location in locations)
                                        {

                                            decimal prevDateServiceContractPercentage = 0;
                                            decimal currDateServiceContractPercentage = 0;
                                            decimal prevMonthServiceContractPercentage = 0;
                                            decimal currMonthServiceContractPercentage = 0;
                                            decimal prevYearServiceContractPercentage = 0;
                                            decimal currYearServiceContractPercentage = 0;

                                            try
                                            {
                                                prevDateServiceContractPercentage = previousDateServiceContractPVR.ToList().Find(x => x.Location == location).ServiceContractCount / previousDateServiceContractPVR.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                prevDateServiceContractPercentage = 0;
                                            }

                                            try
                                            {
                                                currDateServiceContractPercentage = currentDateServiceContractPVR.ToList().Find(x => x.Location == location).ServiceContractCount / currentDateServiceContractPVR.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                currDateServiceContractPercentage = 0;
                                            }

                                            try
                                            {
                                                prevMonthServiceContractPercentage = previousMonthlyServiceContractPVR.ToList().Find(x => x.Location == location).ServiceContractCount / previousMonthlyServiceContractPVR.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                prevMonthServiceContractPercentage = 0;
                                            }

                                            try
                                            {
                                                currMonthServiceContractPercentage = currentMonthlyServiceContractPVR.ToList().Find(x => x.Location == location).ServiceContractCount / currentMonthlyServiceContractPVR.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                currMonthServiceContractPercentage = 0;
                                            }

                                            try
                                            {
                                                prevYearServiceContractPercentage = previousYearlyServiceContractPVR.ToList().Find(x => x.Location == location).ServiceContractCount / previousYearlyServiceContractPVR.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                prevYearServiceContractPercentage = 0;
                                            }

                                            try
                                            {
                                                currYearServiceContractPercentage = currentYearlyServiceContractPVR.ToList().Find(x => x.Location == location).ServiceContractCount / currentYearlyServiceContractPVR.ToList().Find(x => x.Location == location).Deals;
                                            }
                                            catch
                                            {
                                                currYearServiceContractPercentage = 0;
                                            }


                                            var dateDifference = currDateServiceContractPercentage - prevDateServiceContractPercentage;
                                            decimal datePercentChange = 0;
                                            if (prevDateServiceContractPercentage > 0)
                                            {
                                                datePercentChange = dateDifference / prevDateServiceContractPercentage;
                                            }

                                            var monthDifference = currMonthServiceContractPercentage - prevMonthServiceContractPercentage;
                                            decimal monthPercentChange = 0;
                                            if (prevMonthServiceContractPercentage > 0)
                                            {
                                                monthPercentChange = monthDifference / prevMonthServiceContractPercentage;
                                            }

                                            var yearDifference = currYearServiceContractPercentage - prevYearServiceContractPercentage;
                                            decimal yearPercentChange = 0;
                                            if (prevYearServiceContractPercentage > 0)
                                            {
                                                yearPercentChange = yearDifference / prevYearServiceContractPercentage;
                                            }

                                            var displayLocation = location;
                                            switch (location)
                                            {
                                                case "Annapolis":
                                                    displayLocation = "Annapolis Cadillac/Volkswagen";
                                                    break;
                                                case "Annapolis(Classic)":
                                                    displayLocation = "Annapolis Mazda/Mitsubishi";
                                                    break;
                                                case "Chambersburg":
                                                    displayLocation = "Chambersburg";
                                                    break;
                                                case "Clearwater Chrysler/Jeep":
                                                    displayLocation = "Clearwater Chrysler/Jeep";
                                                    break;
                                                case "Colonial":
                                                    displayLocation = "Rockville Hyundai";
                                                    break;
                                                case "Frederick":
                                                    displayLocation = "Frederick";
                                                    break;
                                                case "Germantown":
                                                    displayLocation = "Germantown";
                                                    break;
                                                case "Hagerstown(CDJR)":
                                                    displayLocation = "Hagerstown Chrysler";
                                                    break;
                                                case "Hagerstown(GM)":
                                                    displayLocation = "Hagerstown GM";
                                                    break;
                                                case "Lakeforest(355)":
                                                    displayLocation = "Gaitherburg Toyota";
                                                    break;
                                                case "Lakeforest(Russell)":
                                                    displayLocation = "Gaithersburg Hyundai/Subaru";
                                                    break;
                                                case "LexingtonPark(LexPark)":
                                                    displayLocation = "Lexington Park";
                                                    break;
                                                case "Nicholson":
                                                    displayLocation = "Rockville Buick/GMC";
                                                    break;
                                                case "Subaru":
                                                    displayLocation = "Rockville Subaru";
                                                    break;
                                                case "Wheaton":
                                                    displayLocation = "Wheaton";
                                                    break;
                                                case "Superstore":
                                                    displayLocation = "Frederick Rt 85";
                                                    break;
                                            }




                                            <tr>
                                                <td class="text-right divider-column" style="width:330px"><a data-toggle="collapse" id="deal-brand" style="cursor: pointer;" data-target="#collapse-@location.Replace("(", "").Replace(")", "")-brandServiceContractPercent">@displayLocation <i class="fa fa-caret-down" aria-hidden="true"></i></a></td>
                                                <td class="text-right">@prevDateServiceContractPercentage.ToString("P", nfi)</td>
                                                <td class="text-right">@currDateServiceContractPercentage.ToString("P", nfi)</td>
                                                <td class="text-right">@dateDifference.ToString("P", nfi)</td>
                                                <td class="text-right divider-column">-</td>
                                                <td class="text-right">@prevMonthServiceContractPercentage.ToString("P", nfi)</td>
                                                <td class="text-right">@currMonthServiceContractPercentage.ToString("P", nfi)</td>
                                                <td class="text-right">@monthDifference.ToString("P", nfi)</td>
                                                <td class="text-right divider-column">-</td>
                                                <td class="text-right">@prevYearServiceContractPercentage.ToString("P", nfi)</td>
                                                <td class="text-right">@currYearServiceContractPercentage.ToString("P", nfi)</td>
                                                <td class="text-right">@yearDifference.ToString("P", nfi)</td>
                                                <td class="text-right divider-column">-</td>
                                            </tr>
                                            <tr id="collapse-@location.Replace("(", "").Replace(")", "")-brandServiceContractPercent" class="collapse out" style="background-color:#e2e2e2">
                                                <td colspan="13">
                                                    <table class="table table-bordered">
                                                        <thead>
                                                            <tr style="">
                                                                <th class="text-center divider-column" style="width:330px">Brands</th>
                                                                <th class="text-center">@Model.SalesSummary.PreviousDate.StartDate.ToShortDateString()</th>
                                                                <th class="text-center">@Model.SalesSummary.CurrentDate.StartDate.ToShortDateString()</th>
                                                                <th class="text-center">Difference</th>
                                                                <th class="text-center divider-column">% Change</th>

                                                                <th class="text-center">MTD @System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(@Model.SalesSummary.PreviousMonthToDate.FiscalDate.Month) @Model.SalesSummary.PreviousYearToDate.EndDate.Year</th>
                                                                <th class="text-center">MTD @System.Globalization.CultureInfo.CurrentCulture.DateTimeFormat.GetMonthName(@Model.SalesSummary.CurrentMonthToDate.FiscalDate.Month) @Model.SalesSummary.CurrentYearToDate.EndDate.Year</th>
                                                                <th class="text-center">Difference</th>
                                                                <th class="text-center divider-column">% Change</th>

                                                                <th class="text-center">YTD @Model.SalesSummary.PreviousYearToDate.EndDate.Year</th>
                                                                <th class="text-center">YTD @Model.SalesSummary.CurrentYearToDate.EndDate.Year</th>
                                                                <th class="text-center">Difference</th>
                                                                <th class="text-center divider-column">% Change</th>

                                                            </tr>
                                                        </thead>
                                                        <tbody>
                                                            @{
                                                                var makes = new List<string>();
                                                                foreach (var item in currentYearlyBrandSales)
                                                                {
                                                                    if (item.LocationMake.Location == location)
                                                                    {
                                                                        makes.Add(item.LocationMake.Make);

                                                                    }
                                                                }
                                                            }
                                                            @foreach (var make in makes)
                                                            {
                                                                decimal currentServiceContractPercent = 0;
                                                                var currBrandServiceContractPercent = currentDateBrandServiceContractPVR.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);

                                                                if (currBrandServiceContractPercent != null && currBrandServiceContractPercent.Deals > 0)
                                                                {
                                                                    currentServiceContractPercent = currBrandServiceContractPercent.ServiceContractCount / currBrandServiceContractPercent.Deals;
                                                                }

                                                                /////////////////

                                                                decimal previousServiceContractPercent = 0;
                                                                var prevBrandServiceContractPercent = previousDateBrandServiceContractPVR.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);
                                                                if (prevBrandServiceContractPercent != null && prevBrandServiceContractPercent.Deals > 0)
                                                                {
                                                                    previousServiceContractPercent = prevBrandServiceContractPercent.ServiceContractCount / prevBrandServiceContractPercent.Deals;
                                                                }

                                                                //////////////////

                                                                decimal currentMonthServiceContractPercent = 0;
                                                                var currBrandMonthServiceContractPercent = currentMonthlyBrandServiceContractPVR.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);
                                                                if (currBrandMonthServiceContractPercent != null && currBrandMonthServiceContractPercent.Deals > 0)
                                                                {
                                                                    currentMonthServiceContractPercent = currBrandMonthServiceContractPercent.ServiceContractCount / currBrandMonthServiceContractPercent.Deals;
                                                                }

                                                                /////////////////

                                                                decimal previousMonthServiceContractPercent = 0;
                                                                var prevBrandMonthServiceContractPercent = previousMonthlyBrandServiceContractPVR.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);
                                                                if (prevBrandMonthServiceContractPercent != null && prevBrandMonthServiceContractPercent.Deals > 0)
                                                                {
                                                                    previousMonthServiceContractPercent = prevBrandMonthServiceContractPercent.ServiceContractCount / prevBrandMonthServiceContractPercent.Deals;
                                                                }

                                                                //////////////////

                                                                decimal currentYearServiceContractPercent = 0;
                                                                var currBrandYearServiceContractPercent = currentYearlyBrandServiceContractPVR.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);
                                                                if (currBrandYearServiceContractPercent != null && currBrandYearServiceContractPercent.Deals > 0)
                                                                {
                                                                    currentYearServiceContractPercent = currBrandYearServiceContractPercent.ServiceContractCount / currBrandYearServiceContractPercent.Deals;
                                                                }

                                                                /////////////////

                                                                decimal previousYearServiceContractPercent = 0;
                                                                var prevBrandYearServiceContractPercent = previousYearlyBrandServiceContractPVR.ToList().Find(x => x.LocationMake.Location == location && x.LocationMake.Make == make);
                                                                if (prevBrandYearServiceContractPercent != null && prevBrandYearServiceContractPercent.Deals > 0)
                                                                {
                                                                    previousYearServiceContractPercent = prevBrandYearServiceContractPercent.ServiceContractCount / prevBrandYearServiceContractPercent.Deals;
                                                                }

                                                                //////////////////

                                                                var dayDifference = currentServiceContractPercent - previousServiceContractPercent;
                                                                decimal dayPercentChange = 0;
                                                                if (previousServiceContractPercent > 0)
                                                                {
                                                                    dayPercentChange = dayDifference / previousServiceContractPercent;
                                                                }

                                                                var monDifference = currentMonthServiceContractPercent - previousMonthServiceContractPercent;
                                                                decimal monPercentChange = 0;
                                                                if (previousMonthServiceContractPercent > 0)
                                                                {
                                                                    monPercentChange = monDifference / previousMonthServiceContractPercent;
                                                                }

                                                                var yrDifference = currentYearServiceContractPercent - previousYearServiceContractPercent;
                                                                decimal yrPercentChange = 0;
                                                                if (previousYearServiceContractPercent > 0)
                                                                {
                                                                    yrPercentChange = yrDifference / previousYearServiceContractPercent;
                                                                }


                                                                <tr>
                                                                    <td class="text-right divider-column" style="width:330px">@make</td>
                                                                    <td class="text-right">@previousServiceContractPercent.ToString("P", nfi)</td>
                                                                    <td class="text-right">@currentServiceContractPercent.ToString("P", nfi)</td>
                                                                    <td class="text-right">@dayDifference.ToString("P", nfi)</td>
                                                                    <td class="text-right divider-column">-</td>
                                                                    <td class="text-right">@previousMonthServiceContractPercent.ToString("P", nfi)</td>
                                                                    <td class="text-right">@currentMonthServiceContractPercent.ToString("P", nfi)</td>
                                                                    <td class="text-right">@monDifference.ToString("P", nfi)</td>
                                                                    <td class="text-right divider-column">-</td>
                                                                    <td class="text-right">@previousYearServiceContractPercent.ToString("P", nfi)</td>
                                                                    <td class="text-right">@currentYearServiceContractPercent.ToString("P", nfi)</td>
                                                                    <td class="text-right">@yrDifference.ToString("P", nfi)</td>
                                                                    <td class="text-right divider-column">-</td>
                                                                </tr>

                                                            }

                                                        </tbody>
                                                    </table>
                                                </td>
                                            </tr>
                                                                }
                                    </tbody>
                                </table>

                            </td>

                        </tr>


                    </tbody>
                    <tfoot></tfoot>
                </table>
                <p><a class="btn btn-primary" href="@applicationPath/Sales">Analyze &raquo;</a></p>
            </div>

        </div>
    }
<div class="row">

    <div class="col-md-12">
        <h2>Parts</h2>
        <hr />
        <table class="table table-condensed table-bordered">
            <thead>
                <tr style="background-color:#d9edf7">
                    <th class="text-center">Coming Soon</th>
                </tr>
            </thead>
            <tbody>
            </tbody>
            <tfoot></tfoot>
        </table>
        <p><a class="btn btn-primary" href="@applicationPath/Parts">Analyze &raquo;</a></p>
    </div>
</div>
    }

@section scripts
    {
    <script type="text/javascript">
        $(document).ready(function () {
            $('#service-summary').DataTable({
                searching: false,
                ordering: false,
              dom: 'B',
              pageLength: -1,
              buttons: [
                  {
                    extend: 'copyHtml5', footer: true,
                  },
                  {
                    extend: 'excelHtml5', footer: true,
                  },
                  {
                    extend: 'pdfHtml5', footer: true,
                      orientation: 'landscape'
                  },
                  {
                    extend: 'print', footer: true,
                      orientation: 'landscape'
                  }
              ]

          });
            $('#sales-summary').DataTable({
                searching: false,
                ordering: false,
                dom: 'B',
                pageLength: -1,
                buttons: [
                    {
                    extend: 'copyHtml5', footer: true,
                    },
                    {
                    extend: 'excelHtml5', footer: true,
                    },
                    {
                    extend: 'pdfHtml5', footer: true,
                        orientation: 'landscape'
                    },
                    {
                    extend: 'print', footer: true,
                        orientation: 'landscape'
                    }
                ]

            });

        });

    </script>

}